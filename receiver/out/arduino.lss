
arduino.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000003a2  00800100  00001b62  00001bf6  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001b62  00000000  00000000  00000094  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000000d7  008004a2  008004a2  00001f98  2**0
                  ALLOC
  3 .comment      00000011  00000000  00000000  00001f98  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00001fac  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000410  00000000  00000000  00001ff0  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000c103  00000000  00000000  00002400  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000023f6  00000000  00000000  0000e503  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000028ca  00000000  00000000  000108f9  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000b18  00000000  00000000  000131c4  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000307e  00000000  00000000  00013cdc  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00004800  00000000  00000000  00016d5a  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000003d8  00000000  00000000  0001b55a  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 83 00 	jmp	0x106	; 0x106 <__ctors_end>
       4:	0c 94 ab 00 	jmp	0x156	; 0x156 <__bad_interrupt>
       8:	0c 94 ab 00 	jmp	0x156	; 0x156 <__bad_interrupt>
       c:	0c 94 ab 00 	jmp	0x156	; 0x156 <__bad_interrupt>
      10:	0c 94 ab 00 	jmp	0x156	; 0x156 <__bad_interrupt>
      14:	0c 94 ab 00 	jmp	0x156	; 0x156 <__bad_interrupt>
      18:	0c 94 ab 00 	jmp	0x156	; 0x156 <__bad_interrupt>
      1c:	0c 94 ab 00 	jmp	0x156	; 0x156 <__bad_interrupt>
      20:	0c 94 ab 00 	jmp	0x156	; 0x156 <__bad_interrupt>
      24:	0c 94 ab 00 	jmp	0x156	; 0x156 <__bad_interrupt>
      28:	0c 94 ab 00 	jmp	0x156	; 0x156 <__bad_interrupt>
      2c:	0c 94 ab 00 	jmp	0x156	; 0x156 <__bad_interrupt>
      30:	0c 94 ab 00 	jmp	0x156	; 0x156 <__bad_interrupt>
      34:	0c 94 ab 00 	jmp	0x156	; 0x156 <__bad_interrupt>
      38:	0c 94 ab 00 	jmp	0x156	; 0x156 <__bad_interrupt>
      3c:	0c 94 ab 00 	jmp	0x156	; 0x156 <__bad_interrupt>
      40:	0c 94 ac 06 	jmp	0xd58	; 0xd58 <__vector_16>
      44:	0c 94 ab 00 	jmp	0x156	; 0x156 <__bad_interrupt>
      48:	0c 94 61 09 	jmp	0x12c2	; 0x12c2 <__vector_18>
      4c:	0c 94 93 09 	jmp	0x1326	; 0x1326 <__vector_19>
      50:	0c 94 ab 00 	jmp	0x156	; 0x156 <__bad_interrupt>
      54:	0c 94 ab 00 	jmp	0x156	; 0x156 <__bad_interrupt>
      58:	0c 94 ab 00 	jmp	0x156	; 0x156 <__bad_interrupt>
      5c:	0c 94 ab 00 	jmp	0x156	; 0x156 <__bad_interrupt>
      60:	0c 94 ab 00 	jmp	0x156	; 0x156 <__bad_interrupt>
      64:	0c 94 ab 00 	jmp	0x156	; 0x156 <__bad_interrupt>
      68:	42 03       	mulsu	r20, r18
      6a:	db 02       	muls	r29, r27
      6c:	46 03       	mulsu	r20, r22
      6e:	de 02       	muls	r29, r30
      70:	e1 02       	muls	r30, r17
      72:	e4 02       	muls	r30, r20
      74:	e8 02       	muls	r30, r24
      76:	eb 02       	muls	r30, r27
      78:	ee 02       	muls	r30, r30
      7a:	f1 02       	muls	r31, r17
      7c:	f4 02       	muls	r31, r20
      7e:	f7 02       	muls	r31, r23
      80:	fa 02       	muls	r31, r26
      82:	fd 02       	muls	r31, r29
      84:	00 03       	mulsu	r16, r16
      86:	04 03       	mulsu	r16, r20
      88:	07 03       	mulsu	r16, r23
      8a:	0a 03       	fmul	r16, r18
      8c:	4a 03       	fmul	r20, r18
      8e:	18 03       	fmul	r17, r16
      90:	1b 03       	fmul	r17, r19
      92:	40 03       	mulsu	r20, r16
      94:	1e 03       	fmul	r17, r22
      96:	40 03       	mulsu	r20, r16
      98:	22 03       	mulsu	r18, r18
      9a:	25 03       	mulsu	r18, r21
      9c:	29 03       	fmul	r18, r17
      9e:	40 03       	mulsu	r20, r16
      a0:	40 03       	mulsu	r20, r16
      a2:	2c 03       	fmul	r18, r20
      a4:	30 03       	mulsu	r19, r16
      a6:	33 03       	mulsu	r19, r19
      a8:	37 03       	mulsu	r19, r23
      aa:	3a 03       	fmul	r19, r18
      ac:	40 03       	mulsu	r20, r16
      ae:	3d 03       	fmul	r19, r21

000000b0 <__trampolines_end>:
      b0:	00 00       	nop
      b2:	00 08       	sbc	r0, r0
      b4:	00 02       	muls	r16, r16
      b6:	01 00       	.word	0x0001	; ????
      b8:	00 03       	mulsu	r16, r16
      ba:	04 07       	cpc	r16, r20
	...

000000c4 <digital_pin_to_bit_mask_PGM>:
      c4:	01 02 04 08 10 20 40 80 01 02 04 08 10 20 01 02     ..... @...... ..
      d4:	04 08 10 20                                         ... 

000000d8 <digital_pin_to_port_PGM>:
      d8:	04 04 04 04 04 04 04 04 02 02 02 02 02 02 03 03     ................
      e8:	03 03 03 03                                         ....

000000ec <port_to_output_PGM>:
      ec:	00 00 00 00 25 00 28 00 2b 00                       ....%.(.+.

000000f6 <port_to_mode_PGM>:
      f6:	00 00 00 00 24 00 27 00 2a 00                       ....$.'.*.

00000100 <__ctors_start>:
     100:	be 01       	movw	r22, r28
     102:	a7 06       	cpc	r10, r23
     104:	c3 09       	sbc	r28, r3

00000106 <__ctors_end>:
     106:	11 24       	eor	r1, r1
     108:	1f be       	out	0x3f, r1	; 63
     10a:	cf ef       	ldi	r28, 0xFF	; 255
     10c:	d8 e0       	ldi	r29, 0x08	; 8
     10e:	de bf       	out	0x3e, r29	; 62
     110:	cd bf       	out	0x3d, r28	; 61

00000112 <__do_copy_data>:
     112:	14 e0       	ldi	r17, 0x04	; 4
     114:	a0 e0       	ldi	r26, 0x00	; 0
     116:	b1 e0       	ldi	r27, 0x01	; 1
     118:	e2 e6       	ldi	r30, 0x62	; 98
     11a:	fb e1       	ldi	r31, 0x1B	; 27
     11c:	02 c0       	rjmp	.+4      	; 0x122 <__do_copy_data+0x10>
     11e:	05 90       	lpm	r0, Z+
     120:	0d 92       	st	X+, r0
     122:	a2 3a       	cpi	r26, 0xA2	; 162
     124:	b1 07       	cpc	r27, r17
     126:	d9 f7       	brne	.-10     	; 0x11e <__do_copy_data+0xc>

00000128 <__do_clear_bss>:
     128:	25 e0       	ldi	r18, 0x05	; 5
     12a:	a2 ea       	ldi	r26, 0xA2	; 162
     12c:	b4 e0       	ldi	r27, 0x04	; 4
     12e:	01 c0       	rjmp	.+2      	; 0x132 <.do_clear_bss_start>

00000130 <.do_clear_bss_loop>:
     130:	1d 92       	st	X+, r1

00000132 <.do_clear_bss_start>:
     132:	a9 37       	cpi	r26, 0x79	; 121
     134:	b2 07       	cpc	r27, r18
     136:	e1 f7       	brne	.-8      	; 0x130 <.do_clear_bss_loop>

00000138 <__do_global_ctors>:
     138:	10 e0       	ldi	r17, 0x00	; 0
     13a:	c3 e8       	ldi	r28, 0x83	; 131
     13c:	d0 e0       	ldi	r29, 0x00	; 0
     13e:	04 c0       	rjmp	.+8      	; 0x148 <__do_global_ctors+0x10>
     140:	21 97       	sbiw	r28, 0x01	; 1
     142:	fe 01       	movw	r30, r28
     144:	0e 94 a9 0d 	call	0x1b52	; 0x1b52 <__tablejump2__>
     148:	c0 38       	cpi	r28, 0x80	; 128
     14a:	d1 07       	cpc	r29, r17
     14c:	c9 f7       	brne	.-14     	; 0x140 <__do_global_ctors+0x8>
     14e:	0e 94 b4 01 	call	0x368	; 0x368 <main>
     152:	0c 94 af 0d 	jmp	0x1b5e	; 0x1b5e <_exit>

00000156 <__bad_interrupt>:
     156:	0c 94 58 0c 	jmp	0x18b0	; 0x18b0 <__vector_default>
	...

0000015c <osEE_hal_save_ctx_and_restore_ctx>:
  .type osEE_hal_save_ctx_and_restore_ctx, @function
osEE_hal_save_ctx_and_restore_ctx:
  /*  r25:r24 parameter:  OsEE_TDB * p_to_tdb
      r23:r22 parameter:  OsEE_SCB * p_to_scb
      r21:r20 parameter:  OsEE_SCB * p_from_scb */
    osEE_hal_save_vcontext_m r21 r20
     15c:	2f 92       	push	r2
     15e:	3f 92       	push	r3
     160:	4f 92       	push	r4
     162:	5f 92       	push	r5
     164:	6f 92       	push	r6
     166:	7f 92       	push	r7
     168:	8f 92       	push	r8
     16a:	9f 92       	push	r9
     16c:	af 92       	push	r10
     16e:	bf 92       	push	r11
     170:	cf 92       	push	r12
     172:	df 92       	push	r13
     174:	ef 92       	push	r14
     176:	ff 92       	push	r15
     178:	0f 93       	push	r16
     17a:	1f 93       	push	r17
     17c:	cf 93       	push	r28
     17e:	df 93       	push	r29
     180:	e4 2f       	mov	r30, r20
     182:	f5 2f       	mov	r31, r21
     184:	41 90       	ld	r4, Z+
     186:	50 80       	ld	r5, Z
     188:	4f 92       	push	r4
     18a:	5f 92       	push	r5
     18c:	e4 2f       	mov	r30, r20
     18e:	f5 2f       	mov	r31, r21
     190:	4d b6       	in	r4, 0x3d	; 61
     192:	5e b6       	in	r5, 0x3e	; 62
     194:	41 92       	st	Z+, r4
     196:	50 82       	st	Z, r5

/* Unconditional brach to restore context */
    jmp osEE_hal_restore_ctx
     198:	0c 94 ce 00 	jmp	0x19c	; 0x19c <osEE_hal_restore_ctx>

0000019c <osEE_hal_restore_ctx>:
  .globl osEE_hal_restore_ctx
  .type osEE_hal_restore_ctx, @function
osEE_hal_restore_ctx:
  /*  r25:r24 parameter:  OsEE_TDB * p_to_tdb
      r23:r22 parameter:  OsEE_SCB * p_to_scb */
    osEE_hal_restore_vcontext_m r23 r22
     19c:	e6 2f       	mov	r30, r22
     19e:	f7 2f       	mov	r31, r23
     1a0:	41 90       	ld	r4, Z+
     1a2:	50 80       	ld	r5, Z
     1a4:	4d be       	out	0x3d, r4	; 61
     1a6:	5e be       	out	0x3e, r5	; 62
     1a8:	5f 90       	pop	r5
     1aa:	4f 90       	pop	r4
     1ac:	e6 2f       	mov	r30, r22
     1ae:	f7 2f       	mov	r31, r23
     1b0:	41 92       	st	Z+, r4
     1b2:	50 82       	st	Z, r5
     1b4:	df 91       	pop	r29
     1b6:	cf 91       	pop	r28
     1b8:	1f 91       	pop	r17
     1ba:	0f 91       	pop	r16
     1bc:	ff 90       	pop	r15
     1be:	ef 90       	pop	r14
     1c0:	df 90       	pop	r13
     1c2:	cf 90       	pop	r12
     1c4:	bf 90       	pop	r11
     1c6:	af 90       	pop	r10
     1c8:	9f 90       	pop	r9
     1ca:	8f 90       	pop	r8
     1cc:	7f 90       	pop	r7
     1ce:	6f 90       	pop	r6
     1d0:	5f 90       	pop	r5
     1d2:	4f 90       	pop	r4
     1d4:	3f 90       	pop	r3
     1d6:	2f 90       	pop	r2
    jmp osEE_scheduler_task_wrapper_restore
     1d8:	0c 94 44 0b 	jmp	0x1688	; 0x1688 <osEE_scheduler_task_wrapper_restore>

000001dc <osEE_hal_ready2stacked>:
  .type   osEE_hal_ready2stacked, @function
osEE_hal_ready2stacked:
  /*  r25:r24 parameter:  OsEE_TDB * p_to_tdb
      r23:r22 parameter:  OsEE_SCB * p_to_scb
      r21:r20 local       p_to_scb->p_tos */
    mov r30, r22
     1dc:	e6 2f       	mov	r30, r22
    mov r31, r23
     1de:	f7 2f       	mov	r31, r23
    ld  r20, z+
     1e0:	41 91       	ld	r20, Z+
    ld  r21, z
     1e2:	50 81       	ld	r21, Z
/* sp = 21:20 */
    out 0x3D, r20
     1e4:	4d bf       	out	0x3d, r20	; 61
    out 0x3E, r21
     1e6:	5e bf       	out	0x3e, r21	; 62

    jmp osEE_scheduler_task_wrapper_run
     1e8:	0c 94 45 0b 	jmp	0x168a	; 0x168a <osEE_scheduler_task_wrapper_run>

000001ec <osEE_hal_save_ctx_and_ready2stacked>:
  .type osEE_hal_save_ctx_and_ready2stacked, @function
osEE_hal_save_ctx_and_ready2stacked:
  /*  r25:r24 parameter:  OsEE_TDB * p_to_tdb
      r23:r22 parameter:  OsEE_SCB * p_to_scb
      r21:r20 parameter:  OsEE_SCB * p_from_scb */
    osEE_hal_save_vcontext_m r21 r20
     1ec:	2f 92       	push	r2
     1ee:	3f 92       	push	r3
     1f0:	4f 92       	push	r4
     1f2:	5f 92       	push	r5
     1f4:	6f 92       	push	r6
     1f6:	7f 92       	push	r7
     1f8:	8f 92       	push	r8
     1fa:	9f 92       	push	r9
     1fc:	af 92       	push	r10
     1fe:	bf 92       	push	r11
     200:	cf 92       	push	r12
     202:	df 92       	push	r13
     204:	ef 92       	push	r14
     206:	ff 92       	push	r15
     208:	0f 93       	push	r16
     20a:	1f 93       	push	r17
     20c:	cf 93       	push	r28
     20e:	df 93       	push	r29
     210:	e4 2f       	mov	r30, r20
     212:	f5 2f       	mov	r31, r21
     214:	41 90       	ld	r4, Z+
     216:	50 80       	ld	r5, Z
     218:	4f 92       	push	r4
     21a:	5f 92       	push	r5
     21c:	e4 2f       	mov	r30, r20
     21e:	f5 2f       	mov	r31, r21
     220:	4d b6       	in	r4, 0x3d	; 61
     222:	5e b6       	in	r5, 0x3e	; 62
     224:	41 92       	st	Z+, r4
     226:	50 82       	st	Z, r5
    jmp osEE_hal_ready2stacked
     228:	0c 94 ee 00 	jmp	0x1dc	; 0x1dc <osEE_hal_ready2stacked>

0000022c <osEE_hal_terminate_ctx>:
  .type osEE_hal_terminate_ctx, @function
osEE_hal_terminate_ctx:
  /*  r25:r24 parameter:  OsEE_SCB * p_term_scb
      r23:r22 parameter:  kernel_cb
      r21:r20 local       p_term_scb->p_tos */
    mov r30, r24
     22c:	e8 2f       	mov	r30, r24
    mov r31, r25
     22e:	f9 2f       	mov	r31, r25
    ld  r20, z+
     230:	41 91       	ld	r20, Z+
    ld  r21, z
     232:	50 81       	ld	r21, Z

/* Unwind SP */
    out 0x3D, r20 /* r20 -> spl */
     234:	4d bf       	out	0x3d, r20	; 61
    out 0x3E, r21 /* r21 -> sph */
     236:	5e bf       	out	0x3e, r21	; 62

/*  Jump to kern_callback (that schedule) */
    mov r30, r22
     238:	e6 2f       	mov	r30, r22
    mov r31, r23
     23a:	f7 2f       	mov	r31, r23

    ijmp
     23c:	09 94       	ijmp
	...

00000240 <_ZN8SPIClass5beginEv>:
     240:	cf 93       	push	r28
     242:	cf b7       	in	r28, 0x3f	; 63
     244:	f8 94       	cli
     246:	80 91 a5 04 	lds	r24, 0x04A5	; 0x8004a5 <_ZN8SPIClass11initializedE>
     24a:	81 11       	cpse	r24, r1
     24c:	27 c0       	rjmp	.+78     	; 0x29c <_ZN8SPIClass5beginEv+0x5c>
     24e:	e2 ee       	ldi	r30, 0xE2	; 226
     250:	f0 e0       	ldi	r31, 0x00	; 0
     252:	84 91       	lpm	r24, Z
     254:	ee ec       	ldi	r30, 0xCE	; 206
     256:	f0 e0       	ldi	r31, 0x00	; 0
     258:	94 91       	lpm	r25, Z
     25a:	e8 2f       	mov	r30, r24
     25c:	f0 e0       	ldi	r31, 0x00	; 0
     25e:	ee 0f       	add	r30, r30
     260:	ff 1f       	adc	r31, r31
     262:	ea 50       	subi	r30, 0x0A	; 10
     264:	ff 4f       	sbci	r31, 0xFF	; 255
     266:	a5 91       	lpm	r26, Z+
     268:	b4 91       	lpm	r27, Z
     26a:	ec 91       	ld	r30, X
     26c:	e9 23       	and	r30, r25
     26e:	21 f4       	brne	.+8      	; 0x278 <_ZN8SPIClass5beginEv+0x38>
     270:	61 e0       	ldi	r22, 0x01	; 1
     272:	8a e0       	ldi	r24, 0x0A	; 10
     274:	0e 94 f7 07 	call	0xfee	; 0xfee <digitalWrite>
     278:	61 e0       	ldi	r22, 0x01	; 1
     27a:	8a e0       	ldi	r24, 0x0A	; 10
     27c:	0e 94 bb 07 	call	0xf76	; 0xf76 <pinMode>
     280:	8c b5       	in	r24, 0x2c	; 44
     282:	80 61       	ori	r24, 0x10	; 16
     284:	8c bd       	out	0x2c, r24	; 44
     286:	8c b5       	in	r24, 0x2c	; 44
     288:	80 64       	ori	r24, 0x40	; 64
     28a:	8c bd       	out	0x2c, r24	; 44
     28c:	61 e0       	ldi	r22, 0x01	; 1
     28e:	8d e0       	ldi	r24, 0x0D	; 13
     290:	0e 94 bb 07 	call	0xf76	; 0xf76 <pinMode>
     294:	61 e0       	ldi	r22, 0x01	; 1
     296:	8b e0       	ldi	r24, 0x0B	; 11
     298:	0e 94 bb 07 	call	0xf76	; 0xf76 <pinMode>
     29c:	80 91 a5 04 	lds	r24, 0x04A5	; 0x8004a5 <_ZN8SPIClass11initializedE>
     2a0:	8f 5f       	subi	r24, 0xFF	; 255
     2a2:	80 93 a5 04 	sts	0x04A5, r24	; 0x8004a5 <_ZN8SPIClass11initializedE>
     2a6:	cf bf       	out	0x3f, r28	; 63
     2a8:	cf 91       	pop	r28
     2aa:	08 95       	ret

000002ac <loop>:
     2ac:	80 e0       	ldi	r24, 0x00	; 0
     2ae:	0e 94 f5 0a 	call	0x15ea	; 0x15ea <ActivateTask>
     2b2:	80 91 a9 04 	lds	r24, 0x04A9	; 0x8004a9 <stk_wrong>
     2b6:	81 11       	cpse	r24, r1
     2b8:	1e c0       	rjmp	.+60     	; 0x2f6 <loop+0x4a>
     2ba:	80 91 a7 04 	lds	r24, 0x04A7	; 0x8004a7 <old_sp>
     2be:	90 91 a8 04 	lds	r25, 0x04A8	; 0x8004a8 <old_sp+0x1>
     2c2:	89 2b       	or	r24, r25
     2c4:	39 f4       	brne	.+14     	; 0x2d4 <loop+0x28>
     2c6:	8d b7       	in	r24, 0x3d	; 61
     2c8:	9e b7       	in	r25, 0x3e	; 62
     2ca:	90 93 a8 04 	sts	0x04A8, r25	; 0x8004a8 <old_sp+0x1>
     2ce:	80 93 a7 04 	sts	0x04A7, r24	; 0x8004a7 <old_sp>
     2d2:	08 95       	ret
     2d4:	20 91 a7 04 	lds	r18, 0x04A7	; 0x8004a7 <old_sp>
     2d8:	30 91 a8 04 	lds	r19, 0x04A8	; 0x8004a8 <old_sp+0x1>
     2dc:	8d b7       	in	r24, 0x3d	; 61
     2de:	9e b7       	in	r25, 0x3e	; 62
     2e0:	28 17       	cp	r18, r24
     2e2:	39 07       	cpc	r19, r25
     2e4:	41 f0       	breq	.+16     	; 0x2f6 <loop+0x4a>
     2e6:	81 e0       	ldi	r24, 0x01	; 1
     2e8:	80 93 a9 04 	sts	0x04A9, r24	; 0x8004a9 <stk_wrong>
     2ec:	61 e0       	ldi	r22, 0x01	; 1
     2ee:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <led>
     2f2:	0c 94 f7 07 	jmp	0xfee	; 0xfee <digitalWrite>
     2f6:	08 95       	ret

000002f8 <setup>:
     2f8:	61 e0       	ldi	r22, 0x01	; 1
     2fa:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <led>
     2fe:	0e 94 bb 07 	call	0xf76	; 0xf76 <pinMode>
     302:	26 e0       	ldi	r18, 0x06	; 6
     304:	40 e0       	ldi	r20, 0x00	; 0
     306:	52 ec       	ldi	r21, 0xC2	; 194
     308:	61 e0       	ldi	r22, 0x01	; 1
     30a:	70 e0       	ldi	r23, 0x00	; 0
     30c:	8b ed       	ldi	r24, 0xDB	; 219
     30e:	94 e0       	ldi	r25, 0x04	; 4
     310:	0e 94 fc 08 	call	0x11f8	; 0x11f8 <_ZN14HardwareSerial5beginEmh>
     314:	41 e0       	ldi	r20, 0x01	; 1
     316:	60 e1       	ldi	r22, 0x10	; 16
     318:	8a ea       	ldi	r24, 0xAA	; 170
     31a:	94 e0       	ldi	r25, 0x04	; 4
     31c:	0e 94 b5 04 	call	0x96a	; 0x96a <_ZN7MCP_CAN5beginEhh>
     320:	88 23       	and	r24, r24
     322:	99 f0       	breq	.+38     	; 0x34a <setup+0x52>
     324:	6e e1       	ldi	r22, 0x1E	; 30
     326:	71 e0       	ldi	r23, 0x01	; 1
     328:	8b ed       	ldi	r24, 0xDB	; 219
     32a:	94 e0       	ldi	r25, 0x04	; 4
     32c:	0e 94 36 0a 	call	0x146c	; 0x146c <_ZN5Print7printlnEPKc>
     330:	67 e3       	ldi	r22, 0x37	; 55
     332:	71 e0       	ldi	r23, 0x01	; 1
     334:	8b ed       	ldi	r24, 0xDB	; 219
     336:	94 e0       	ldi	r25, 0x04	; 4
     338:	0e 94 36 0a 	call	0x146c	; 0x146c <_ZN5Print7printlnEPKc>
     33c:	64 e6       	ldi	r22, 0x64	; 100
     33e:	70 e0       	ldi	r23, 0x00	; 0
     340:	80 e0       	ldi	r24, 0x00	; 0
     342:	90 e0       	ldi	r25, 0x00	; 0
     344:	0e 94 1b 07 	call	0xe36	; 0xe36 <delay>
     348:	e5 cf       	rjmp	.-54     	; 0x314 <setup+0x1c>
     34a:	62 e5       	ldi	r22, 0x52	; 82
     34c:	71 e0       	ldi	r23, 0x01	; 1
     34e:	8b ed       	ldi	r24, 0xDB	; 219
     350:	94 e0       	ldi	r25, 0x04	; 4
     352:	0c 94 36 0a 	jmp	0x146c	; 0x146c <_ZN5Print7printlnEPKc>

00000356 <idle_hook>:
     356:	0e 94 56 01 	call	0x2ac	; 0x2ac <loop>
     35a:	84 e6       	ldi	r24, 0x64	; 100
     35c:	98 e0       	ldi	r25, 0x08	; 8
     35e:	89 2b       	or	r24, r25
     360:	11 f0       	breq	.+4      	; 0x366 <idle_hook+0x10>
     362:	0c 94 64 08 	jmp	0x10c8	; 0x10c8 <_Z14serialEventRunv>
     366:	08 95       	ret

00000368 <main>:
     368:	0e 94 57 07 	call	0xeae	; 0xeae <init>
     36c:	0e 94 7c 01 	call	0x2f8	; 0x2f8 <setup>
     370:	80 e0       	ldi	r24, 0x00	; 0
     372:	0e 94 bc 0a 	call	0x1578	; 0x1578 <StartOS>
     376:	80 e0       	ldi	r24, 0x00	; 0
     378:	90 e0       	ldi	r25, 0x00	; 0
     37a:	08 95       	ret

0000037c <_GLOBAL__sub_I_led>:
     37c:	6a e0       	ldi	r22, 0x0A	; 10
     37e:	8a ea       	ldi	r24, 0xAA	; 170
     380:	94 e0       	ldi	r25, 0x04	; 4
     382:	0c 94 ad 04 	jmp	0x95a	; 0x95a <_ZN7MCP_CANC1Eh>

00000386 <_ZN8SPIClass16beginTransactionE11SPISettings>:
     386:	20 91 a4 04 	lds	r18, 0x04A4	; 0x8004a4 <_ZN8SPIClass13interruptModeE>
     38a:	22 23       	and	r18, r18
     38c:	99 f0       	breq	.+38     	; 0x3b4 <_ZN8SPIClass16beginTransactionE11SPISettings+0x2e>
     38e:	4f b7       	in	r20, 0x3f	; 63
     390:	f8 94       	cli
     392:	20 91 a4 04 	lds	r18, 0x04A4	; 0x8004a4 <_ZN8SPIClass13interruptModeE>
     396:	21 30       	cpi	r18, 0x01	; 1
     398:	59 f4       	brne	.+22     	; 0x3b0 <_ZN8SPIClass16beginTransactionE11SPISettings+0x2a>
     39a:	2d b3       	in	r18, 0x1d	; 29
     39c:	20 93 a2 04 	sts	0x04A2, r18	; 0x8004a2 <__data_end>
     3a0:	3d b3       	in	r19, 0x1d	; 29
     3a2:	20 91 a3 04 	lds	r18, 0x04A3	; 0x8004a3 <_ZN8SPIClass13interruptMaskE>
     3a6:	20 95       	com	r18
     3a8:	23 23       	and	r18, r19
     3aa:	2d bb       	out	0x1d, r18	; 29
     3ac:	4f bf       	out	0x3f, r20	; 63
     3ae:	02 c0       	rjmp	.+4      	; 0x3b4 <_ZN8SPIClass16beginTransactionE11SPISettings+0x2e>
     3b0:	40 93 a2 04 	sts	0x04A2, r20	; 0x8004a2 <__data_end>
     3b4:	8c bd       	out	0x2c, r24	; 44
     3b6:	9d bd       	out	0x2d, r25	; 45
     3b8:	08 95       	ret

000003ba <_ZN8SPIClass8transferEh>:
     3ba:	8e bd       	out	0x2e, r24	; 46
     3bc:	00 00       	nop
     3be:	0d b4       	in	r0, 0x2d	; 45
     3c0:	07 fe       	sbrs	r0, 7
     3c2:	fd cf       	rjmp	.-6      	; 0x3be <_ZN8SPIClass8transferEh+0x4>
     3c4:	8e b5       	in	r24, 0x2e	; 46
     3c6:	08 95       	ret

000003c8 <_ZN8SPIClass14endTransactionEv>:
     3c8:	80 91 a4 04 	lds	r24, 0x04A4	; 0x8004a4 <_ZN8SPIClass13interruptModeE>
     3cc:	88 23       	and	r24, r24
     3ce:	61 f0       	breq	.+24     	; 0x3e8 <_ZN8SPIClass14endTransactionEv+0x20>
     3d0:	9f b7       	in	r25, 0x3f	; 63
     3d2:	f8 94       	cli
     3d4:	20 91 a4 04 	lds	r18, 0x04A4	; 0x8004a4 <_ZN8SPIClass13interruptModeE>
     3d8:	80 91 a2 04 	lds	r24, 0x04A2	; 0x8004a2 <__data_end>
     3dc:	21 30       	cpi	r18, 0x01	; 1
     3de:	19 f4       	brne	.+6      	; 0x3e6 <_ZN8SPIClass14endTransactionEv+0x1e>
     3e0:	8d bb       	out	0x1d, r24	; 29
     3e2:	9f bf       	out	0x3f, r25	; 63
     3e4:	08 95       	ret
     3e6:	8f bf       	out	0x3f, r24	; 63
     3e8:	08 95       	ret

000003ea <_ZN7MCP_CAN13mcp2515_resetEv>:
     3ea:	cf 93       	push	r28
     3ec:	df 93       	push	r29
     3ee:	ec 01       	movw	r28, r24
     3f0:	80 e5       	ldi	r24, 0x50	; 80
     3f2:	91 e0       	ldi	r25, 0x01	; 1
     3f4:	0e 94 c3 01 	call	0x386	; 0x386 <_ZN8SPIClass16beginTransactionE11SPISettings>
     3f8:	60 e0       	ldi	r22, 0x00	; 0
     3fa:	8e 81       	ldd	r24, Y+6	; 0x06
     3fc:	0e 94 f7 07 	call	0xfee	; 0xfee <digitalWrite>
     400:	80 ec       	ldi	r24, 0xC0	; 192
     402:	0e 94 dd 01 	call	0x3ba	; 0x3ba <_ZN8SPIClass8transferEh>
     406:	61 e0       	ldi	r22, 0x01	; 1
     408:	8e 81       	ldd	r24, Y+6	; 0x06
     40a:	0e 94 f7 07 	call	0xfee	; 0xfee <digitalWrite>
     40e:	0e 94 e4 01 	call	0x3c8	; 0x3c8 <_ZN8SPIClass14endTransactionEv>
     412:	6a e0       	ldi	r22, 0x0A	; 10
     414:	70 e0       	ldi	r23, 0x00	; 0
     416:	80 e0       	ldi	r24, 0x00	; 0
     418:	90 e0       	ldi	r25, 0x00	; 0
     41a:	df 91       	pop	r29
     41c:	cf 91       	pop	r28
     41e:	0c 94 1b 07 	jmp	0xe36	; 0xe36 <delay>

00000422 <_ZN7MCP_CAN20mcp2515_readRegisterEh>:
     422:	1f 93       	push	r17
     424:	cf 93       	push	r28
     426:	df 93       	push	r29
     428:	ec 01       	movw	r28, r24
     42a:	16 2f       	mov	r17, r22
     42c:	80 e5       	ldi	r24, 0x50	; 80
     42e:	91 e0       	ldi	r25, 0x01	; 1
     430:	0e 94 c3 01 	call	0x386	; 0x386 <_ZN8SPIClass16beginTransactionE11SPISettings>
     434:	60 e0       	ldi	r22, 0x00	; 0
     436:	8e 81       	ldd	r24, Y+6	; 0x06
     438:	0e 94 f7 07 	call	0xfee	; 0xfee <digitalWrite>
     43c:	83 e0       	ldi	r24, 0x03	; 3
     43e:	0e 94 dd 01 	call	0x3ba	; 0x3ba <_ZN8SPIClass8transferEh>
     442:	81 2f       	mov	r24, r17
     444:	0e 94 dd 01 	call	0x3ba	; 0x3ba <_ZN8SPIClass8transferEh>
     448:	80 e0       	ldi	r24, 0x00	; 0
     44a:	0e 94 dd 01 	call	0x3ba	; 0x3ba <_ZN8SPIClass8transferEh>
     44e:	18 2f       	mov	r17, r24
     450:	61 e0       	ldi	r22, 0x01	; 1
     452:	8e 81       	ldd	r24, Y+6	; 0x06
     454:	0e 94 f7 07 	call	0xfee	; 0xfee <digitalWrite>
     458:	0e 94 e4 01 	call	0x3c8	; 0x3c8 <_ZN8SPIClass14endTransactionEv>
     45c:	81 2f       	mov	r24, r17
     45e:	df 91       	pop	r29
     460:	cf 91       	pop	r28
     462:	1f 91       	pop	r17
     464:	08 95       	ret

00000466 <_ZN7MCP_CAN19mcp2515_setRegisterEhh>:
     466:	ef 92       	push	r14
     468:	ff 92       	push	r15
     46a:	1f 93       	push	r17
     46c:	cf 93       	push	r28
     46e:	df 93       	push	r29
     470:	1f 92       	push	r1
     472:	cd b7       	in	r28, 0x3d	; 61
     474:	de b7       	in	r29, 0x3e	; 62
     476:	7c 01       	movw	r14, r24
     478:	16 2f       	mov	r17, r22
     47a:	80 e5       	ldi	r24, 0x50	; 80
     47c:	91 e0       	ldi	r25, 0x01	; 1
     47e:	49 83       	std	Y+1, r20	; 0x01
     480:	0e 94 c3 01 	call	0x386	; 0x386 <_ZN8SPIClass16beginTransactionE11SPISettings>
     484:	60 e0       	ldi	r22, 0x00	; 0
     486:	f7 01       	movw	r30, r14
     488:	86 81       	ldd	r24, Z+6	; 0x06
     48a:	0e 94 f7 07 	call	0xfee	; 0xfee <digitalWrite>
     48e:	82 e0       	ldi	r24, 0x02	; 2
     490:	0e 94 dd 01 	call	0x3ba	; 0x3ba <_ZN8SPIClass8transferEh>
     494:	81 2f       	mov	r24, r17
     496:	0e 94 dd 01 	call	0x3ba	; 0x3ba <_ZN8SPIClass8transferEh>
     49a:	49 81       	ldd	r20, Y+1	; 0x01
     49c:	84 2f       	mov	r24, r20
     49e:	0e 94 dd 01 	call	0x3ba	; 0x3ba <_ZN8SPIClass8transferEh>
     4a2:	61 e0       	ldi	r22, 0x01	; 1
     4a4:	f7 01       	movw	r30, r14
     4a6:	86 81       	ldd	r24, Z+6	; 0x06
     4a8:	0e 94 f7 07 	call	0xfee	; 0xfee <digitalWrite>
     4ac:	0f 90       	pop	r0
     4ae:	df 91       	pop	r29
     4b0:	cf 91       	pop	r28
     4b2:	1f 91       	pop	r17
     4b4:	ff 90       	pop	r15
     4b6:	ef 90       	pop	r14
     4b8:	0c 94 e4 01 	jmp	0x3c8	; 0x3c8 <_ZN8SPIClass14endTransactionEv>

000004bc <_ZN7MCP_CAN22mcp2515_modifyRegisterEhhh>:
     4bc:	ef 92       	push	r14
     4be:	ff 92       	push	r15
     4c0:	1f 93       	push	r17
     4c2:	cf 93       	push	r28
     4c4:	df 93       	push	r29
     4c6:	00 d0       	rcall	.+0      	; 0x4c8 <_ZN7MCP_CAN22mcp2515_modifyRegisterEhhh+0xc>
     4c8:	cd b7       	in	r28, 0x3d	; 61
     4ca:	de b7       	in	r29, 0x3e	; 62
     4cc:	7c 01       	movw	r14, r24
     4ce:	16 2f       	mov	r17, r22
     4d0:	80 e5       	ldi	r24, 0x50	; 80
     4d2:	91 e0       	ldi	r25, 0x01	; 1
     4d4:	2a 83       	std	Y+2, r18	; 0x02
     4d6:	49 83       	std	Y+1, r20	; 0x01
     4d8:	0e 94 c3 01 	call	0x386	; 0x386 <_ZN8SPIClass16beginTransactionE11SPISettings>
     4dc:	60 e0       	ldi	r22, 0x00	; 0
     4de:	f7 01       	movw	r30, r14
     4e0:	86 81       	ldd	r24, Z+6	; 0x06
     4e2:	0e 94 f7 07 	call	0xfee	; 0xfee <digitalWrite>
     4e6:	85 e0       	ldi	r24, 0x05	; 5
     4e8:	0e 94 dd 01 	call	0x3ba	; 0x3ba <_ZN8SPIClass8transferEh>
     4ec:	81 2f       	mov	r24, r17
     4ee:	0e 94 dd 01 	call	0x3ba	; 0x3ba <_ZN8SPIClass8transferEh>
     4f2:	49 81       	ldd	r20, Y+1	; 0x01
     4f4:	84 2f       	mov	r24, r20
     4f6:	0e 94 dd 01 	call	0x3ba	; 0x3ba <_ZN8SPIClass8transferEh>
     4fa:	2a 81       	ldd	r18, Y+2	; 0x02
     4fc:	82 2f       	mov	r24, r18
     4fe:	0e 94 dd 01 	call	0x3ba	; 0x3ba <_ZN8SPIClass8transferEh>
     502:	61 e0       	ldi	r22, 0x01	; 1
     504:	f7 01       	movw	r30, r14
     506:	86 81       	ldd	r24, Z+6	; 0x06
     508:	0e 94 f7 07 	call	0xfee	; 0xfee <digitalWrite>
     50c:	0f 90       	pop	r0
     50e:	0f 90       	pop	r0
     510:	df 91       	pop	r29
     512:	cf 91       	pop	r28
     514:	1f 91       	pop	r17
     516:	ff 90       	pop	r15
     518:	ef 90       	pop	r14
     51a:	0c 94 e4 01 	jmp	0x3c8	; 0x3c8 <_ZN8SPIClass14endTransactionEv>

0000051e <_ZN7MCP_CAN18mcp2515_readStatusEv>:
     51e:	1f 93       	push	r17
     520:	cf 93       	push	r28
     522:	df 93       	push	r29
     524:	ec 01       	movw	r28, r24
     526:	80 e5       	ldi	r24, 0x50	; 80
     528:	91 e0       	ldi	r25, 0x01	; 1
     52a:	0e 94 c3 01 	call	0x386	; 0x386 <_ZN8SPIClass16beginTransactionE11SPISettings>
     52e:	60 e0       	ldi	r22, 0x00	; 0
     530:	8e 81       	ldd	r24, Y+6	; 0x06
     532:	0e 94 f7 07 	call	0xfee	; 0xfee <digitalWrite>
     536:	80 ea       	ldi	r24, 0xA0	; 160
     538:	0e 94 dd 01 	call	0x3ba	; 0x3ba <_ZN8SPIClass8transferEh>
     53c:	80 e0       	ldi	r24, 0x00	; 0
     53e:	0e 94 dd 01 	call	0x3ba	; 0x3ba <_ZN8SPIClass8transferEh>
     542:	18 2f       	mov	r17, r24
     544:	61 e0       	ldi	r22, 0x01	; 1
     546:	8e 81       	ldd	r24, Y+6	; 0x06
     548:	0e 94 f7 07 	call	0xfee	; 0xfee <digitalWrite>
     54c:	0e 94 e4 01 	call	0x3c8	; 0x3c8 <_ZN8SPIClass14endTransactionEv>
     550:	81 2f       	mov	r24, r17
     552:	df 91       	pop	r29
     554:	cf 91       	pop	r28
     556:	1f 91       	pop	r17
     558:	08 95       	ret

0000055a <_ZN7MCP_CAN23mcp2515_setCANCTRL_ModeEh>:
     55a:	0f 93       	push	r16
     55c:	1f 93       	push	r17
     55e:	cf 93       	push	r28
     560:	8c 01       	movw	r16, r24
     562:	c6 2f       	mov	r28, r22
     564:	26 2f       	mov	r18, r22
     566:	40 ee       	ldi	r20, 0xE0	; 224
     568:	6f e0       	ldi	r22, 0x0F	; 15
     56a:	0e 94 5e 02 	call	0x4bc	; 0x4bc <_ZN7MCP_CAN22mcp2515_modifyRegisterEhhh>
     56e:	6f e0       	ldi	r22, 0x0F	; 15
     570:	c8 01       	movw	r24, r16
     572:	0e 94 11 02 	call	0x422	; 0x422 <_ZN7MCP_CAN20mcp2515_readRegisterEh>
     576:	98 2f       	mov	r25, r24
     578:	90 7e       	andi	r25, 0xE0	; 224
     57a:	81 e0       	ldi	r24, 0x01	; 1
     57c:	9c 13       	cpse	r25, r28
     57e:	01 c0       	rjmp	.+2      	; 0x582 <_ZN7MCP_CAN23mcp2515_setCANCTRL_ModeEh+0x28>
     580:	80 e0       	ldi	r24, 0x00	; 0
     582:	cf 91       	pop	r28
     584:	1f 91       	pop	r17
     586:	0f 91       	pop	r16
     588:	08 95       	ret

0000058a <_ZN7MCP_CAN18mcp2515_configRateEhh>:
     58a:	0f 93       	push	r16
     58c:	1f 93       	push	r17
     58e:	cf 93       	push	r28
     590:	df 93       	push	r29
     592:	41 30       	cpi	r20, 0x01	; 1
     594:	21 f0       	breq	.+8      	; 0x59e <_ZN7MCP_CAN18mcp2515_configRateEhh+0x14>
     596:	42 30       	cpi	r20, 0x02	; 2
     598:	09 f4       	brne	.+2      	; 0x59c <_ZN7MCP_CAN18mcp2515_configRateEhh+0x12>
     59a:	3f c0       	rjmp	.+126    	; 0x61a <_ZN7MCP_CAN18mcp2515_configRateEhh+0x90>
     59c:	71 c0       	rjmp	.+226    	; 0x680 <_ZN7MCP_CAN18mcp2515_configRateEhh+0xf6>
     59e:	46 2f       	mov	r20, r22
     5a0:	50 e0       	ldi	r21, 0x00	; 0
     5a2:	fa 01       	movw	r30, r20
     5a4:	31 97       	sbiw	r30, 0x01	; 1
     5a6:	e2 31       	cpi	r30, 0x12	; 18
     5a8:	f1 05       	cpc	r31, r1
     5aa:	08 f0       	brcs	.+2      	; 0x5ae <_ZN7MCP_CAN18mcp2515_configRateEhh+0x24>
     5ac:	69 c0       	rjmp	.+210    	; 0x680 <_ZN7MCP_CAN18mcp2515_configRateEhh+0xf6>
     5ae:	ec 5c       	subi	r30, 0xCC	; 204
     5b0:	ff 4f       	sbci	r31, 0xFF	; 255
     5b2:	0c 94 a9 0d 	jmp	0x1b52	; 0x1b52 <__tablejump2__>
     5b6:	c7 e8       	ldi	r28, 0x87	; 135
     5b8:	df ef       	ldi	r29, 0xFF	; 255
     5ba:	6e c0       	rjmp	.+220    	; 0x698 <_ZN7MCP_CAN18mcp2515_configRateEhh+0x10e>
     5bc:	c7 e0       	ldi	r28, 0x07	; 7
     5be:	da eb       	ldi	r29, 0xBA	; 186
     5c0:	67 c0       	rjmp	.+206    	; 0x690 <_ZN7MCP_CAN18mcp2515_configRateEhh+0x106>
     5c2:	c5 e8       	ldi	r28, 0x85	; 133
     5c4:	d1 ef       	ldi	r29, 0xF1	; 241
     5c6:	64 c0       	rjmp	.+200    	; 0x690 <_ZN7MCP_CAN18mcp2515_configRateEhh+0x106>
     5c8:	c7 e0       	ldi	r28, 0x07	; 7
     5ca:	de eb       	ldi	r29, 0xBE	; 190
     5cc:	49 e0       	ldi	r20, 0x09	; 9
     5ce:	65 c0       	rjmp	.+202    	; 0x69a <_ZN7MCP_CAN18mcp2515_configRateEhh+0x110>
     5d0:	c7 e8       	ldi	r28, 0x87	; 135
     5d2:	df ef       	ldi	r29, 0xFF	; 255
     5d4:	35 c0       	rjmp	.+106    	; 0x640 <_ZN7MCP_CAN18mcp2515_configRateEhh+0xb6>
     5d6:	c7 e8       	ldi	r28, 0x87	; 135
     5d8:	da ef       	ldi	r29, 0xFA	; 250
     5da:	32 c0       	rjmp	.+100    	; 0x640 <_ZN7MCP_CAN18mcp2515_configRateEhh+0xb6>
     5dc:	c7 e8       	ldi	r28, 0x87	; 135
     5de:	df ef       	ldi	r29, 0xFF	; 255
     5e0:	36 c0       	rjmp	.+108    	; 0x64e <_ZN7MCP_CAN18mcp2515_configRateEhh+0xc4>
     5e2:	c7 e0       	ldi	r28, 0x07	; 7
     5e4:	de eb       	ldi	r29, 0xBE	; 190
     5e6:	33 c0       	rjmp	.+102    	; 0x64e <_ZN7MCP_CAN18mcp2515_configRateEhh+0xc4>
     5e8:	c7 e0       	ldi	r28, 0x07	; 7
     5ea:	dd ea       	ldi	r29, 0xAD	; 173
     5ec:	30 c0       	rjmp	.+96     	; 0x64e <_ZN7MCP_CAN18mcp2515_configRateEhh+0xc4>
     5ee:	c7 e8       	ldi	r28, 0x87	; 135
     5f0:	da ef       	ldi	r29, 0xFA	; 250
     5f2:	2d c0       	rjmp	.+90     	; 0x64e <_ZN7MCP_CAN18mcp2515_configRateEhh+0xc4>
     5f4:	c6 e8       	ldi	r28, 0x86	; 134
     5f6:	d0 ef       	ldi	r29, 0xF0	; 240
     5f8:	2a c0       	rjmp	.+84     	; 0x64e <_ZN7MCP_CAN18mcp2515_configRateEhh+0xc4>
     5fa:	c7 e8       	ldi	r28, 0x87	; 135
     5fc:	da ef       	ldi	r29, 0xFA	; 250
     5fe:	2e c0       	rjmp	.+92     	; 0x65c <_ZN7MCP_CAN18mcp2515_configRateEhh+0xd2>
     600:	c5 e8       	ldi	r28, 0x85	; 133
     602:	d1 ef       	ldi	r29, 0xF1	; 241
     604:	41 e4       	ldi	r20, 0x41	; 65
     606:	49 c0       	rjmp	.+146    	; 0x69a <_ZN7MCP_CAN18mcp2515_configRateEhh+0x110>
     608:	c6 e8       	ldi	r28, 0x86	; 134
     60a:	d0 ef       	ldi	r29, 0xF0	; 240
     60c:	2e c0       	rjmp	.+92     	; 0x66a <_ZN7MCP_CAN18mcp2515_configRateEhh+0xe0>
     60e:	c4 e0       	ldi	r28, 0x04	; 4
     610:	d0 ea       	ldi	r29, 0xA0	; 160
     612:	2b c0       	rjmp	.+86     	; 0x66a <_ZN7MCP_CAN18mcp2515_configRateEhh+0xe0>
     614:	c2 e8       	ldi	r28, 0x82	; 130
     616:	d0 ed       	ldi	r29, 0xD0	; 208
     618:	28 c0       	rjmp	.+80     	; 0x66a <_ZN7MCP_CAN18mcp2515_configRateEhh+0xe0>
     61a:	46 2f       	mov	r20, r22
     61c:	50 e0       	ldi	r21, 0x00	; 0
     61e:	fa 01       	movw	r30, r20
     620:	31 97       	sbiw	r30, 0x01	; 1
     622:	e2 31       	cpi	r30, 0x12	; 18
     624:	f1 05       	cpc	r31, r1
     626:	60 f5       	brcc	.+88     	; 0x680 <_ZN7MCP_CAN18mcp2515_configRateEhh+0xf6>
     628:	ea 5b       	subi	r30, 0xBA	; 186
     62a:	ff 4f       	sbci	r31, 0xFF	; 255
     62c:	0c 94 a9 0d 	jmp	0x1b52	; 0x1b52 <__tablejump2__>
     630:	c7 e0       	ldi	r28, 0x07	; 7
     632:	df eb       	ldi	r29, 0xBF	; 191
     634:	2d c0       	rjmp	.+90     	; 0x690 <_ZN7MCP_CAN18mcp2515_configRateEhh+0x106>
     636:	c7 e0       	ldi	r28, 0x07	; 7
     638:	df eb       	ldi	r29, 0xBF	; 191
     63a:	02 c0       	rjmp	.+4      	; 0x640 <_ZN7MCP_CAN18mcp2515_configRateEhh+0xb6>
     63c:	c4 e0       	ldi	r28, 0x04	; 4
     63e:	d4 ea       	ldi	r29, 0xA4	; 164
     640:	47 e0       	ldi	r20, 0x07	; 7
     642:	2b c0       	rjmp	.+86     	; 0x69a <_ZN7MCP_CAN18mcp2515_configRateEhh+0x110>
     644:	c7 e0       	ldi	r28, 0x07	; 7
     646:	df eb       	ldi	r29, 0xBF	; 191
     648:	02 c0       	rjmp	.+4      	; 0x64e <_ZN7MCP_CAN18mcp2515_configRateEhh+0xc4>
     64a:	c6 e0       	ldi	r28, 0x06	; 6
     64c:	d4 eb       	ldi	r29, 0xB4	; 180
     64e:	43 e0       	ldi	r20, 0x03	; 3
     650:	24 c0       	rjmp	.+72     	; 0x69a <_ZN7MCP_CAN18mcp2515_configRateEhh+0x110>
     652:	c7 e0       	ldi	r28, 0x07	; 7
     654:	df eb       	ldi	r29, 0xBF	; 191
     656:	02 c0       	rjmp	.+4      	; 0x65c <_ZN7MCP_CAN18mcp2515_configRateEhh+0xd2>
     658:	c6 e0       	ldi	r28, 0x06	; 6
     65a:	d4 eb       	ldi	r29, 0xB4	; 180
     65c:	41 e0       	ldi	r20, 0x01	; 1
     65e:	1d c0       	rjmp	.+58     	; 0x69a <_ZN7MCP_CAN18mcp2515_configRateEhh+0x110>
     660:	c5 e0       	ldi	r28, 0x05	; 5
     662:	d1 eb       	ldi	r29, 0xB1	; 177
     664:	fb cf       	rjmp	.-10     	; 0x65c <_ZN7MCP_CAN18mcp2515_configRateEhh+0xd2>
     666:	c6 e0       	ldi	r28, 0x06	; 6
     668:	d4 eb       	ldi	r29, 0xB4	; 180
     66a:	40 e0       	ldi	r20, 0x00	; 0
     66c:	16 c0       	rjmp	.+44     	; 0x69a <_ZN7MCP_CAN18mcp2515_configRateEhh+0x110>
     66e:	c5 e0       	ldi	r28, 0x05	; 5
     670:	d1 eb       	ldi	r29, 0xB1	; 177
     672:	fb cf       	rjmp	.-10     	; 0x66a <_ZN7MCP_CAN18mcp2515_configRateEhh+0xe0>
     674:	c2 e0       	ldi	r28, 0x02	; 2
     676:	d0 e9       	ldi	r29, 0x90	; 144
     678:	f8 cf       	rjmp	.-16     	; 0x66a <_ZN7MCP_CAN18mcp2515_configRateEhh+0xe0>
     67a:	c0 e0       	ldi	r28, 0x00	; 0
     67c:	d0 e8       	ldi	r29, 0x80	; 128
     67e:	f5 cf       	rjmp	.-22     	; 0x66a <_ZN7MCP_CAN18mcp2515_configRateEhh+0xe0>
     680:	81 e0       	ldi	r24, 0x01	; 1
     682:	1a c0       	rjmp	.+52     	; 0x6b8 <_ZN7MCP_CAN18mcp2515_configRateEhh+0x12e>
     684:	c7 e8       	ldi	r28, 0x87	; 135
     686:	df ef       	ldi	r29, 0xFF	; 255
     688:	4f e3       	ldi	r20, 0x3F	; 63
     68a:	07 c0       	rjmp	.+14     	; 0x69a <_ZN7MCP_CAN18mcp2515_configRateEhh+0x110>
     68c:	c7 e8       	ldi	r28, 0x87	; 135
     68e:	df ef       	ldi	r29, 0xFF	; 255
     690:	4f e0       	ldi	r20, 0x0F	; 15
     692:	03 c0       	rjmp	.+6      	; 0x69a <_ZN7MCP_CAN18mcp2515_configRateEhh+0x110>
     694:	c7 e0       	ldi	r28, 0x07	; 7
     696:	df eb       	ldi	r29, 0xBF	; 191
     698:	4f e1       	ldi	r20, 0x1F	; 31
     69a:	8c 01       	movw	r16, r24
     69c:	6a e2       	ldi	r22, 0x2A	; 42
     69e:	0e 94 33 02 	call	0x466	; 0x466 <_ZN7MCP_CAN19mcp2515_setRegisterEhh>
     6a2:	4d 2f       	mov	r20, r29
     6a4:	69 e2       	ldi	r22, 0x29	; 41
     6a6:	c8 01       	movw	r24, r16
     6a8:	0e 94 33 02 	call	0x466	; 0x466 <_ZN7MCP_CAN19mcp2515_setRegisterEhh>
     6ac:	4c 2f       	mov	r20, r28
     6ae:	68 e2       	ldi	r22, 0x28	; 40
     6b0:	c8 01       	movw	r24, r16
     6b2:	0e 94 33 02 	call	0x466	; 0x466 <_ZN7MCP_CAN19mcp2515_setRegisterEhh>
     6b6:	80 e0       	ldi	r24, 0x00	; 0
     6b8:	df 91       	pop	r29
     6ba:	cf 91       	pop	r28
     6bc:	1f 91       	pop	r17
     6be:	0f 91       	pop	r16
     6c0:	08 95       	ret

000006c2 <_ZN7MCP_CAN22mcp2515_initCANBuffersEv>:
     6c2:	0f 93       	push	r16
     6c4:	1f 93       	push	r17
     6c6:	cf 93       	push	r28
     6c8:	8c 01       	movw	r16, r24
     6ca:	c0 e3       	ldi	r28, 0x30	; 48
     6cc:	40 e0       	ldi	r20, 0x00	; 0
     6ce:	6c 2f       	mov	r22, r28
     6d0:	c8 01       	movw	r24, r16
     6d2:	0e 94 33 02 	call	0x466	; 0x466 <_ZN7MCP_CAN19mcp2515_setRegisterEhh>
     6d6:	60 e1       	ldi	r22, 0x10	; 16
     6d8:	6c 0f       	add	r22, r28
     6da:	40 e0       	ldi	r20, 0x00	; 0
     6dc:	c8 01       	movw	r24, r16
     6de:	0e 94 33 02 	call	0x466	; 0x466 <_ZN7MCP_CAN19mcp2515_setRegisterEhh>
     6e2:	60 e2       	ldi	r22, 0x20	; 32
     6e4:	6c 0f       	add	r22, r28
     6e6:	40 e0       	ldi	r20, 0x00	; 0
     6e8:	c8 01       	movw	r24, r16
     6ea:	0e 94 33 02 	call	0x466	; 0x466 <_ZN7MCP_CAN19mcp2515_setRegisterEhh>
     6ee:	cf 5f       	subi	r28, 0xFF	; 255
     6f0:	ce 33       	cpi	r28, 0x3E	; 62
     6f2:	61 f7       	brne	.-40     	; 0x6cc <_ZN7MCP_CAN22mcp2515_initCANBuffersEv+0xa>
     6f4:	40 e0       	ldi	r20, 0x00	; 0
     6f6:	60 e6       	ldi	r22, 0x60	; 96
     6f8:	c8 01       	movw	r24, r16
     6fa:	0e 94 33 02 	call	0x466	; 0x466 <_ZN7MCP_CAN19mcp2515_setRegisterEhh>
     6fe:	40 e0       	ldi	r20, 0x00	; 0
     700:	60 e7       	ldi	r22, 0x70	; 112
     702:	c8 01       	movw	r24, r16
     704:	cf 91       	pop	r28
     706:	1f 91       	pop	r17
     708:	0f 91       	pop	r16
     70a:	0c 94 33 02 	jmp	0x466	; 0x466 <_ZN7MCP_CAN19mcp2515_setRegisterEhh>

0000070e <_ZN7MCP_CAN12mcp2515_initEhh>:
     70e:	ef 92       	push	r14
     710:	ff 92       	push	r15
     712:	0f 93       	push	r16
     714:	1f 93       	push	r17
     716:	cf 93       	push	r28
     718:	df 93       	push	r29
     71a:	1f 92       	push	r1
     71c:	cd b7       	in	r28, 0x3d	; 61
     71e:	de b7       	in	r29, 0x3e	; 62
     720:	7c 01       	movw	r14, r24
     722:	06 2f       	mov	r16, r22
     724:	49 83       	std	Y+1, r20	; 0x01
     726:	0e 94 f5 01 	call	0x3ea	; 0x3ea <_ZN7MCP_CAN13mcp2515_resetEv>
     72a:	60 e8       	ldi	r22, 0x80	; 128
     72c:	c7 01       	movw	r24, r14
     72e:	0e 94 ad 02 	call	0x55a	; 0x55a <_ZN7MCP_CAN23mcp2515_setCANCTRL_ModeEh>
     732:	18 2f       	mov	r17, r24
     734:	49 81       	ldd	r20, Y+1	; 0x01
     736:	88 23       	and	r24, r24
     738:	19 f0       	breq	.+6      	; 0x740 <_ZN7MCP_CAN12mcp2515_initEhh+0x32>
     73a:	6e e9       	ldi	r22, 0x9E	; 158
     73c:	71 e0       	ldi	r23, 0x01	; 1
     73e:	37 c0       	rjmp	.+110    	; 0x7ae <_ZN7MCP_CAN12mcp2515_initEhh+0xa0>
     740:	68 eb       	ldi	r22, 0xB8	; 184
     742:	71 e0       	ldi	r23, 0x01	; 1
     744:	8b ed       	ldi	r24, 0xDB	; 219
     746:	94 e0       	ldi	r25, 0x04	; 4
     748:	49 83       	std	Y+1, r20	; 0x01
     74a:	0e 94 30 0a 	call	0x1460	; 0x1460 <_ZN5Print5printEPKc>
     74e:	49 81       	ldd	r20, Y+1	; 0x01
     750:	60 2f       	mov	r22, r16
     752:	c7 01       	movw	r24, r14
     754:	0e 94 c5 02 	call	0x58a	; 0x58a <_ZN7MCP_CAN18mcp2515_configRateEhh>
     758:	88 23       	and	r24, r24
     75a:	19 f0       	breq	.+6      	; 0x762 <_ZN7MCP_CAN12mcp2515_initEhh+0x54>
     75c:	66 ed       	ldi	r22, 0xD6	; 214
     75e:	71 e0       	ldi	r23, 0x01	; 1
     760:	26 c0       	rjmp	.+76     	; 0x7ae <_ZN7MCP_CAN12mcp2515_initEhh+0xa0>
     762:	68 ee       	ldi	r22, 0xE8	; 232
     764:	71 e0       	ldi	r23, 0x01	; 1
     766:	8b ed       	ldi	r24, 0xDB	; 219
     768:	94 e0       	ldi	r25, 0x04	; 4
     76a:	0e 94 30 0a 	call	0x1460	; 0x1460 <_ZN5Print5printEPKc>
     76e:	c7 01       	movw	r24, r14
     770:	0e 94 61 03 	call	0x6c2	; 0x6c2 <_ZN7MCP_CAN22mcp2515_initCANBuffersEv>
     774:	43 e0       	ldi	r20, 0x03	; 3
     776:	6b e2       	ldi	r22, 0x2B	; 43
     778:	c7 01       	movw	r24, r14
     77a:	0e 94 33 02 	call	0x466	; 0x466 <_ZN7MCP_CAN19mcp2515_setRegisterEhh>
     77e:	24 e0       	ldi	r18, 0x04	; 4
     780:	44 e6       	ldi	r20, 0x64	; 100
     782:	60 e6       	ldi	r22, 0x60	; 96
     784:	c7 01       	movw	r24, r14
     786:	0e 94 5e 02 	call	0x4bc	; 0x4bc <_ZN7MCP_CAN22mcp2515_modifyRegisterEhhh>
     78a:	20 e0       	ldi	r18, 0x00	; 0
     78c:	40 e6       	ldi	r20, 0x60	; 96
     78e:	60 e7       	ldi	r22, 0x70	; 112
     790:	c7 01       	movw	r24, r14
     792:	0e 94 5e 02 	call	0x4bc	; 0x4bc <_ZN7MCP_CAN22mcp2515_modifyRegisterEhhh>
     796:	60 e0       	ldi	r22, 0x00	; 0
     798:	c7 01       	movw	r24, r14
     79a:	0e 94 ad 02 	call	0x55a	; 0x55a <_ZN7MCP_CAN23mcp2515_setCANCTRL_ModeEh>
     79e:	18 2f       	mov	r17, r24
     7a0:	88 23       	and	r24, r24
     7a2:	19 f0       	breq	.+6      	; 0x7aa <_ZN7MCP_CAN12mcp2515_initEhh+0x9c>
     7a4:	6d ef       	ldi	r22, 0xFD	; 253
     7a6:	71 e0       	ldi	r23, 0x01	; 1
     7a8:	02 c0       	rjmp	.+4      	; 0x7ae <_ZN7MCP_CAN12mcp2515_initEhh+0xa0>
     7aa:	68 e1       	ldi	r22, 0x18	; 24
     7ac:	72 e0       	ldi	r23, 0x02	; 2
     7ae:	8b ed       	ldi	r24, 0xDB	; 219
     7b0:	94 e0       	ldi	r25, 0x04	; 4
     7b2:	0e 94 30 0a 	call	0x1460	; 0x1460 <_ZN5Print5printEPKc>
     7b6:	81 2f       	mov	r24, r17
     7b8:	0f 90       	pop	r0
     7ba:	df 91       	pop	r29
     7bc:	cf 91       	pop	r28
     7be:	1f 91       	pop	r17
     7c0:	0f 91       	pop	r16
     7c2:	ff 90       	pop	r15
     7c4:	ef 90       	pop	r14
     7c6:	08 95       	ret

000007c8 <_ZN7MCP_CAN19mcp2515_read_canMsgEhPVmPVhS3_S3_S3_>:
     7c8:	3f 92       	push	r3
     7ca:	4f 92       	push	r4
     7cc:	5f 92       	push	r5
     7ce:	6f 92       	push	r6
     7d0:	7f 92       	push	r7
     7d2:	8f 92       	push	r8
     7d4:	9f 92       	push	r9
     7d6:	af 92       	push	r10
     7d8:	bf 92       	push	r11
     7da:	cf 92       	push	r12
     7dc:	df 92       	push	r13
     7de:	ef 92       	push	r14
     7e0:	ff 92       	push	r15
     7e2:	0f 93       	push	r16
     7e4:	1f 93       	push	r17
     7e6:	cf 93       	push	r28
     7e8:	df 93       	push	r29
     7ea:	00 d0       	rcall	.+0      	; 0x7ec <_ZN7MCP_CAN19mcp2515_read_canMsgEhPVmPVhS3_S3_S3_+0x24>
     7ec:	00 d0       	rcall	.+0      	; 0x7ee <_ZN7MCP_CAN19mcp2515_read_canMsgEhPVmPVhS3_S3_S3_+0x26>
     7ee:	cd b7       	in	r28, 0x3d	; 61
     7f0:	de b7       	in	r29, 0x3e	; 62
     7f2:	4c 01       	movw	r8, r24
     7f4:	56 2e       	mov	r5, r22
     7f6:	5a 01       	movw	r10, r20
     7f8:	39 01       	movw	r6, r18
     7fa:	60 e0       	ldi	r22, 0x00	; 0
     7fc:	fc 01       	movw	r30, r24
     7fe:	86 81       	ldd	r24, Z+6	; 0x06
     800:	0e 94 f7 07 	call	0xfee	; 0xfee <digitalWrite>
     804:	85 2d       	mov	r24, r5
     806:	0e 94 dd 01 	call	0x3ba	; 0x3ba <_ZN8SPIClass8transferEh>
     80a:	ce 01       	movw	r24, r28
     80c:	01 96       	adiw	r24, 0x01	; 1
     80e:	2c 01       	movw	r4, r24
     810:	e4 e0       	ldi	r30, 0x04	; 4
     812:	3e 2e       	mov	r3, r30
     814:	38 0e       	add	r3, r24
     816:	80 e0       	ldi	r24, 0x00	; 0
     818:	0e 94 dd 01 	call	0x3ba	; 0x3ba <_ZN8SPIClass8transferEh>
     81c:	f2 01       	movw	r30, r4
     81e:	81 93       	st	Z+, r24
     820:	2f 01       	movw	r4, r30
     822:	3e 12       	cpse	r3, r30
     824:	f8 cf       	rjmp	.-16     	; 0x816 <_ZN7MCP_CAN19mcp2515_read_canMsgEhPVmPVhS3_S3_S3_+0x4e>
     826:	2c 81       	ldd	r18, Y+4	; 0x04
     828:	23 fb       	bst	r18, 3
     82a:	88 27       	eor	r24, r24
     82c:	80 f9       	bld	r24, 0
     82e:	f8 01       	movw	r30, r16
     830:	80 83       	st	Z, r24
     832:	3a 81       	ldd	r19, Y+2	; 0x02
     834:	49 81       	ldd	r20, Y+1	; 0x01
     836:	83 2f       	mov	r24, r19
     838:	90 e0       	ldi	r25, 0x00	; 0
     83a:	75 e0       	ldi	r23, 0x05	; 5
     83c:	95 95       	asr	r25
     83e:	87 95       	ror	r24
     840:	7a 95       	dec	r23
     842:	e1 f7       	brne	.-8      	; 0x83c <_ZN7MCP_CAN19mcp2515_read_canMsgEhPVmPVhS3_S3_S3_+0x74>
     844:	f8 e0       	ldi	r31, 0x08	; 8
     846:	4f 9f       	mul	r20, r31
     848:	80 0d       	add	r24, r0
     84a:	91 1d       	adc	r25, r1
     84c:	11 24       	eor	r1, r1
     84e:	09 2e       	mov	r0, r25
     850:	00 0c       	add	r0, r0
     852:	aa 0b       	sbc	r26, r26
     854:	bb 0b       	sbc	r27, r27
     856:	f5 01       	movw	r30, r10
     858:	80 83       	st	Z, r24
     85a:	91 83       	std	Z+1, r25	; 0x01
     85c:	a2 83       	std	Z+2, r26	; 0x02
     85e:	b3 83       	std	Z+3, r27	; 0x03
     860:	33 ff       	sbrs	r19, 3
     862:	38 c0       	rjmp	.+112    	; 0x8d4 <_ZN7MCP_CAN19mcp2515_read_canMsgEhPVmPVhS3_S3_S3_+0x10c>
     864:	80 81       	ld	r24, Z
     866:	91 81       	ldd	r25, Z+1	; 0x01
     868:	a2 81       	ldd	r26, Z+2	; 0x02
     86a:	b3 81       	ldd	r27, Z+3	; 0x03
     86c:	42 e0       	ldi	r20, 0x02	; 2
     86e:	88 0f       	add	r24, r24
     870:	99 1f       	adc	r25, r25
     872:	aa 1f       	adc	r26, r26
     874:	bb 1f       	adc	r27, r27
     876:	4a 95       	dec	r20
     878:	d1 f7       	brne	.-12     	; 0x86e <_ZN7MCP_CAN19mcp2515_read_canMsgEhPVmPVhS3_S3_S3_+0xa6>
     87a:	33 70       	andi	r19, 0x03	; 3
     87c:	83 0f       	add	r24, r19
     87e:	91 1d       	adc	r25, r1
     880:	a1 1d       	adc	r26, r1
     882:	b1 1d       	adc	r27, r1
     884:	80 83       	st	Z, r24
     886:	91 83       	std	Z+1, r25	; 0x01
     888:	a2 83       	std	Z+2, r26	; 0x02
     88a:	b3 83       	std	Z+3, r27	; 0x03
     88c:	80 81       	ld	r24, Z
     88e:	91 81       	ldd	r25, Z+1	; 0x01
     890:	a2 81       	ldd	r26, Z+2	; 0x02
     892:	b3 81       	ldd	r27, Z+3	; 0x03
     894:	ba 2f       	mov	r27, r26
     896:	a9 2f       	mov	r26, r25
     898:	98 2f       	mov	r25, r24
     89a:	88 27       	eor	r24, r24
     89c:	3b 81       	ldd	r19, Y+3	; 0x03
     89e:	83 0f       	add	r24, r19
     8a0:	91 1d       	adc	r25, r1
     8a2:	a1 1d       	adc	r26, r1
     8a4:	b1 1d       	adc	r27, r1
     8a6:	80 83       	st	Z, r24
     8a8:	91 83       	std	Z+1, r25	; 0x01
     8aa:	a2 83       	std	Z+2, r26	; 0x02
     8ac:	b3 83       	std	Z+3, r27	; 0x03
     8ae:	80 81       	ld	r24, Z
     8b0:	91 81       	ldd	r25, Z+1	; 0x01
     8b2:	a2 81       	ldd	r26, Z+2	; 0x02
     8b4:	b3 81       	ldd	r27, Z+3	; 0x03
     8b6:	ba 2f       	mov	r27, r26
     8b8:	a9 2f       	mov	r26, r25
     8ba:	98 2f       	mov	r25, r24
     8bc:	88 27       	eor	r24, r24
     8be:	82 0f       	add	r24, r18
     8c0:	91 1d       	adc	r25, r1
     8c2:	a1 1d       	adc	r26, r1
     8c4:	b1 1d       	adc	r27, r1
     8c6:	80 83       	st	Z, r24
     8c8:	91 83       	std	Z+1, r25	; 0x01
     8ca:	a2 83       	std	Z+2, r26	; 0x02
     8cc:	b3 83       	std	Z+3, r27	; 0x03
     8ce:	81 e0       	ldi	r24, 0x01	; 1
     8d0:	f3 01       	movw	r30, r6
     8d2:	80 83       	st	Z, r24
     8d4:	80 e0       	ldi	r24, 0x00	; 0
     8d6:	0e 94 dd 01 	call	0x3ba	; 0x3ba <_ZN8SPIClass8transferEh>
     8da:	8f 70       	andi	r24, 0x0F	; 15
     8dc:	f7 01       	movw	r30, r14
     8de:	80 83       	st	Z, r24
     8e0:	56 01       	movw	r10, r12
     8e2:	10 e0       	ldi	r17, 0x00	; 0
     8e4:	f7 01       	movw	r30, r14
     8e6:	80 81       	ld	r24, Z
     8e8:	18 17       	cp	r17, r24
     8ea:	50 f4       	brcc	.+20     	; 0x900 <__stack+0x1>
     8ec:	18 30       	cpi	r17, 0x08	; 8
     8ee:	41 f0       	breq	.+16     	; 0x900 <__stack+0x1>
     8f0:	80 e0       	ldi	r24, 0x00	; 0
     8f2:	0e 94 dd 01 	call	0x3ba	; 0x3ba <_ZN8SPIClass8transferEh>
     8f6:	f5 01       	movw	r30, r10
     8f8:	81 93       	st	Z+, r24
     8fa:	5f 01       	movw	r10, r30
     8fc:	1f 5f       	subi	r17, 0xFF	; 255
     8fe:	f2 cf       	rjmp	.-28     	; 0x8e4 <_ZN7MCP_CAN19mcp2515_read_canMsgEhPVmPVhS3_S3_S3_+0x11c>
     900:	61 e0       	ldi	r22, 0x01	; 1
     902:	f4 01       	movw	r30, r8
     904:	86 81       	ldd	r24, Z+6	; 0x06
     906:	0f 90       	pop	r0
     908:	0f 90       	pop	r0
     90a:	0f 90       	pop	r0
     90c:	0f 90       	pop	r0
     90e:	df 91       	pop	r29
     910:	cf 91       	pop	r28
     912:	1f 91       	pop	r17
     914:	0f 91       	pop	r16
     916:	ff 90       	pop	r15
     918:	ef 90       	pop	r14
     91a:	df 90       	pop	r13
     91c:	cf 90       	pop	r12
     91e:	bf 90       	pop	r11
     920:	af 90       	pop	r10
     922:	9f 90       	pop	r9
     924:	8f 90       	pop	r8
     926:	7f 90       	pop	r7
     928:	6f 90       	pop	r6
     92a:	5f 90       	pop	r5
     92c:	4f 90       	pop	r4
     92e:	3f 90       	pop	r3
     930:	0c 94 f7 07 	jmp	0xfee	; 0xfee <digitalWrite>

00000934 <_ZN7MCP_CAN7init_CSEh>:
     934:	cf 93       	push	r28
     936:	df 93       	push	r29
     938:	ec 01       	movw	r28, r24
     93a:	66 23       	and	r22, r22
     93c:	59 f0       	breq	.+22     	; 0x954 <_ZN7MCP_CAN7init_CSEh+0x20>
     93e:	86 2f       	mov	r24, r22
     940:	6e 83       	std	Y+6, r22	; 0x06
     942:	61 e0       	ldi	r22, 0x01	; 1
     944:	0e 94 bb 07 	call	0xf76	; 0xf76 <pinMode>
     948:	61 e0       	ldi	r22, 0x01	; 1
     94a:	8e 81       	ldd	r24, Y+6	; 0x06
     94c:	df 91       	pop	r29
     94e:	cf 91       	pop	r28
     950:	0c 94 f7 07 	jmp	0xfee	; 0xfee <digitalWrite>
     954:	df 91       	pop	r29
     956:	cf 91       	pop	r28
     958:	08 95       	ret

0000095a <_ZN7MCP_CANC1Eh>:
     95a:	fc 01       	movw	r30, r24
     95c:	11 86       	std	Z+9, r1	; 0x09
     95e:	26 ea       	ldi	r18, 0xA6	; 166
     960:	34 e0       	ldi	r19, 0x04	; 4
     962:	30 87       	std	Z+8, r19	; 0x08
     964:	27 83       	std	Z+7, r18	; 0x07
     966:	0c 94 9a 04 	jmp	0x934	; 0x934 <_ZN7MCP_CAN7init_CSEh>

0000096a <_ZN7MCP_CAN5beginEhh>:
     96a:	cf 93       	push	r28
     96c:	df 93       	push	r29
     96e:	00 d0       	rcall	.+0      	; 0x970 <_ZN7MCP_CAN5beginEhh+0x6>
     970:	00 d0       	rcall	.+0      	; 0x972 <_ZN7MCP_CAN5beginEhh+0x8>
     972:	cd b7       	in	r28, 0x3d	; 61
     974:	de b7       	in	r29, 0x3e	; 62
     976:	4c 83       	std	Y+4, r20	; 0x04
     978:	6b 83       	std	Y+3, r22	; 0x03
     97a:	89 83       	std	Y+1, r24	; 0x01
     97c:	9a 83       	std	Y+2, r25	; 0x02
     97e:	0e 94 20 01 	call	0x240	; 0x240 <_ZN8SPIClass5beginEv>
     982:	4c 81       	ldd	r20, Y+4	; 0x04
     984:	6b 81       	ldd	r22, Y+3	; 0x03
     986:	89 81       	ldd	r24, Y+1	; 0x01
     988:	9a 81       	ldd	r25, Y+2	; 0x02
     98a:	0e 94 87 03 	call	0x70e	; 0x70e <_ZN7MCP_CAN12mcp2515_initEhh>
     98e:	91 e0       	ldi	r25, 0x01	; 1
     990:	81 11       	cpse	r24, r1
     992:	01 c0       	rjmp	.+2      	; 0x996 <_ZN7MCP_CAN5beginEhh+0x2c>
     994:	90 e0       	ldi	r25, 0x00	; 0
     996:	89 2f       	mov	r24, r25
     998:	0f 90       	pop	r0
     99a:	0f 90       	pop	r0
     99c:	0f 90       	pop	r0
     99e:	0f 90       	pop	r0
     9a0:	df 91       	pop	r29
     9a2:	cf 91       	pop	r28
     9a4:	08 95       	ret

000009a6 <_ZN7MCP_CAN12readMsgBufIDEhPVmPVhS3_S3_S3_>:
     9a6:	6f 92       	push	r6
     9a8:	7f 92       	push	r7
     9aa:	8f 92       	push	r8
     9ac:	9f 92       	push	r9
     9ae:	af 92       	push	r10
     9b0:	bf 92       	push	r11
     9b2:	cf 92       	push	r12
     9b4:	df 92       	push	r13
     9b6:	ef 92       	push	r14
     9b8:	ff 92       	push	r15
     9ba:	0f 93       	push	r16
     9bc:	1f 93       	push	r17
     9be:	cf 93       	push	r28
     9c0:	df 93       	push	r29
     9c2:	ec 01       	movw	r28, r24
     9c4:	5a 01       	movw	r10, r20
     9c6:	49 01       	movw	r8, r18
     9c8:	38 01       	movw	r6, r16
     9ca:	60 ff       	sbrs	r22, 0
     9cc:	02 c0       	rjmp	.+4      	; 0x9d2 <_ZN7MCP_CAN12readMsgBufIDEhPVmPVhS3_S3_S3_+0x2c>
     9ce:	60 e9       	ldi	r22, 0x90	; 144
     9d0:	03 c0       	rjmp	.+6      	; 0x9d8 <_ZN7MCP_CAN12readMsgBufIDEhPVmPVhS3_S3_S3_+0x32>
     9d2:	61 ff       	sbrs	r22, 1
     9d4:	15 c0       	rjmp	.+42     	; 0xa00 <_ZN7MCP_CAN12readMsgBufIDEhPVmPVhS3_S3_S3_+0x5a>
     9d6:	64 e9       	ldi	r22, 0x94	; 148
     9d8:	ce 01       	movw	r24, r28
     9da:	0e 94 e4 03 	call	0x7c8	; 0x7c8 <_ZN7MCP_CAN19mcp2515_read_canMsgEhPVmPVhS3_S3_S3_>
     9de:	f3 01       	movw	r30, r6
     9e0:	80 81       	ld	r24, Z
     9e2:	8d 83       	std	Y+5, r24	; 0x05
     9e4:	f4 01       	movw	r30, r8
     9e6:	80 81       	ld	r24, Z
     9e8:	88 83       	st	Y, r24
     9ea:	f5 01       	movw	r30, r10
     9ec:	80 81       	ld	r24, Z
     9ee:	91 81       	ldd	r25, Z+1	; 0x01
     9f0:	a2 81       	ldd	r26, Z+2	; 0x02
     9f2:	b3 81       	ldd	r27, Z+3	; 0x03
     9f4:	89 83       	std	Y+1, r24	; 0x01
     9f6:	9a 83       	std	Y+2, r25	; 0x02
     9f8:	ab 83       	std	Y+3, r26	; 0x03
     9fa:	bc 83       	std	Y+4, r27	; 0x04
     9fc:	80 e0       	ldi	r24, 0x00	; 0
     9fe:	03 c0       	rjmp	.+6      	; 0xa06 <_ZN7MCP_CAN12readMsgBufIDEhPVmPVhS3_S3_S3_+0x60>
     a00:	f7 01       	movw	r30, r14
     a02:	10 82       	st	Z, r1
     a04:	84 e0       	ldi	r24, 0x04	; 4
     a06:	df 91       	pop	r29
     a08:	cf 91       	pop	r28
     a0a:	1f 91       	pop	r17
     a0c:	0f 91       	pop	r16
     a0e:	ff 90       	pop	r15
     a10:	ef 90       	pop	r14
     a12:	df 90       	pop	r13
     a14:	cf 90       	pop	r12
     a16:	bf 90       	pop	r11
     a18:	af 90       	pop	r10
     a1a:	9f 90       	pop	r9
     a1c:	8f 90       	pop	r8
     a1e:	7f 90       	pop	r7
     a20:	6f 90       	pop	r6
     a22:	08 95       	ret

00000a24 <_ZN7MCP_CAN14readRxTxStatusEv>:
     a24:	0e 94 8f 02 	call	0x51e	; 0x51e <_ZN7MCP_CAN18mcp2515_readStatusEv>
     a28:	98 2f       	mov	r25, r24
     a2a:	9b 7a       	andi	r25, 0xAB	; 171
     a2c:	83 fd       	sbrc	r24, 3
     a2e:	02 c0       	rjmp	.+4      	; 0xa34 <_ZN7MCP_CAN14readRxTxStatusEv+0x10>
     a30:	30 e0       	ldi	r19, 0x00	; 0
     a32:	01 c0       	rjmp	.+2      	; 0xa36 <_ZN7MCP_CAN14readRxTxStatusEv+0x12>
     a34:	34 e0       	ldi	r19, 0x04	; 4
     a36:	85 fd       	sbrc	r24, 5
     a38:	02 c0       	rjmp	.+4      	; 0xa3e <_ZN7MCP_CAN14readRxTxStatusEv+0x1a>
     a3a:	20 e0       	ldi	r18, 0x00	; 0
     a3c:	01 c0       	rjmp	.+2      	; 0xa40 <_ZN7MCP_CAN14readRxTxStatusEv+0x1c>
     a3e:	28 e0       	ldi	r18, 0x08	; 8
     a40:	89 2f       	mov	r24, r25
     a42:	88 1f       	adc	r24, r24
     a44:	88 27       	eor	r24, r24
     a46:	88 1f       	adc	r24, r24
     a48:	82 95       	swap	r24
     a4a:	80 7f       	andi	r24, 0xF0	; 240
     a4c:	93 70       	andi	r25, 0x03	; 3
     a4e:	93 2b       	or	r25, r19
     a50:	92 2b       	or	r25, r18
     a52:	89 2b       	or	r24, r25
     a54:	08 95       	ret

00000a56 <_ZN7MCP_CAN10readMsgBufEPhS0_>:
     a56:	cf 92       	push	r12
     a58:	df 92       	push	r13
     a5a:	ef 92       	push	r14
     a5c:	ff 92       	push	r15
     a5e:	0f 93       	push	r16
     a60:	1f 93       	push	r17
     a62:	cf 93       	push	r28
     a64:	df 93       	push	r29
     a66:	ec 01       	movw	r28, r24
     a68:	7b 01       	movw	r14, r22
     a6a:	6a 01       	movw	r12, r20
     a6c:	0e 94 12 05 	call	0xa24	; 0xa24 <_ZN7MCP_CAN14readRxTxStatusEv>
     a70:	8e 01       	movw	r16, r28
     a72:	0b 5f       	subi	r16, 0xFB	; 251
     a74:	1f 4f       	sbci	r17, 0xFF	; 255
     a76:	ae 01       	movw	r20, r28
     a78:	4f 5f       	subi	r20, 0xFF	; 255
     a7a:	5f 4f       	sbci	r21, 0xFF	; 255
     a7c:	9e 01       	movw	r18, r28
     a7e:	68 2f       	mov	r22, r24
     a80:	ce 01       	movw	r24, r28
     a82:	0e 94 d3 04 	call	0x9a6	; 0x9a6 <_ZN7MCP_CAN12readMsgBufIDEhPVmPVhS3_S3_S3_>
     a86:	df 91       	pop	r29
     a88:	cf 91       	pop	r28
     a8a:	1f 91       	pop	r17
     a8c:	0f 91       	pop	r16
     a8e:	ff 90       	pop	r15
     a90:	ef 90       	pop	r14
     a92:	df 90       	pop	r13
     a94:	cf 90       	pop	r12
     a96:	08 95       	ret

00000a98 <_ZN7MCP_CAN12checkReceiveEv>:
     a98:	0e 94 8f 02 	call	0x51e	; 0x51e <_ZN7MCP_CAN18mcp2515_readStatusEv>
     a9c:	83 70       	andi	r24, 0x03	; 3
     a9e:	11 f4       	brne	.+4      	; 0xaa4 <_ZN7MCP_CAN12checkReceiveEv+0xc>
     aa0:	84 e0       	ldi	r24, 0x04	; 4
     aa2:	08 95       	ret
     aa4:	83 e0       	ldi	r24, 0x03	; 3
     aa6:	08 95       	ret

00000aa8 <_ZN7MCP_CAN8getCanIdEv>:
     aa8:	fc 01       	movw	r30, r24
     aaa:	61 81       	ldd	r22, Z+1	; 0x01
     aac:	72 81       	ldd	r23, Z+2	; 0x02
     aae:	83 81       	ldd	r24, Z+3	; 0x03
     ab0:	94 81       	ldd	r25, Z+4	; 0x04
     ab2:	08 95       	ret

00000ab4 <FuncTaskL1>:
     ab4:	cf 92       	push	r12
     ab6:	df 92       	push	r13
     ab8:	ef 92       	push	r14
     aba:	ff 92       	push	r15
     abc:	0f 93       	push	r16
     abe:	1f 93       	push	r17
     ac0:	cf 93       	push	r28
     ac2:	df 93       	push	r29
     ac4:	cd b7       	in	r28, 0x3d	; 61
     ac6:	de b7       	in	r29, 0x3e	; 62
     ac8:	29 97       	sbiw	r28, 0x09	; 9
     aca:	0f b6       	in	r0, 0x3f	; 63
     acc:	f8 94       	cli
     ace:	de bf       	out	0x3e, r29	; 62
     ad0:	0f be       	out	0x3f, r0	; 63
     ad2:	cd bf       	out	0x3d, r28	; 61
     ad4:	80 91 c4 04 	lds	r24, 0x04C4	; 0x8004c4 <isr_cnt>
     ad8:	90 91 c5 04 	lds	r25, 0x04C5	; 0x8004c5 <isr_cnt+0x1>
     adc:	01 96       	adiw	r24, 0x01	; 1
     ade:	90 93 c5 04 	sts	0x04C5, r25	; 0x8004c5 <isr_cnt+0x1>
     ae2:	80 93 c4 04 	sts	0x04C4, r24	; 0x8004c4 <isr_cnt>
     ae6:	19 86       	std	Y+9, r1	; 0x09
     ae8:	80 91 c4 04 	lds	r24, 0x04C4	; 0x8004c4 <isr_cnt>
     aec:	90 91 c5 04 	lds	r25, 0x04C5	; 0x8004c5 <isr_cnt+0x1>
     af0:	88 3e       	cpi	r24, 0xE8	; 232
     af2:	93 40       	sbci	r25, 0x03	; 3
     af4:	08 f4       	brcc	.+2      	; 0xaf8 <FuncTaskL1+0x44>
     af6:	e5 c0       	rjmp	.+458    	; 0xcc2 <FuncTaskL1+0x20e>
     af8:	10 92 c5 04 	sts	0x04C5, r1	; 0x8004c5 <isr_cnt+0x1>
     afc:	10 92 c4 04 	sts	0x04C4, r1	; 0x8004c4 <isr_cnt>
     b00:	8a eb       	ldi	r24, 0xBA	; 186
     b02:	94 e0       	ldi	r25, 0x04	; 4
     b04:	0e 94 4c 05 	call	0xa98	; 0xa98 <_ZN7MCP_CAN12checkReceiveEv>
     b08:	83 30       	cpi	r24, 0x03	; 3
     b0a:	09 f0       	breq	.+2      	; 0xb0e <FuncTaskL1+0x5a>
     b0c:	da c0       	rjmp	.+436    	; 0xcc2 <FuncTaskL1+0x20e>
     b0e:	7e 01       	movw	r14, r28
     b10:	89 e0       	ldi	r24, 0x09	; 9
     b12:	e8 0e       	add	r14, r24
     b14:	f1 1c       	adc	r15, r1
     b16:	8e 01       	movw	r16, r28
     b18:	0f 5f       	subi	r16, 0xFF	; 255
     b1a:	1f 4f       	sbci	r17, 0xFF	; 255
     b1c:	a8 01       	movw	r20, r16
     b1e:	b7 01       	movw	r22, r14
     b20:	8a eb       	ldi	r24, 0xBA	; 186
     b22:	94 e0       	ldi	r25, 0x04	; 4
     b24:	0e 94 2b 05 	call	0xa56	; 0xa56 <_ZN7MCP_CAN10readMsgBufEPhS0_>
     b28:	f8 01       	movw	r30, r16
     b2a:	80 91 c6 04 	lds	r24, 0x04C6	; 0x8004c6 <result>
     b2e:	90 91 c7 04 	lds	r25, 0x04C7	; 0x8004c7 <result+0x1>
     b32:	21 91       	ld	r18, Z+
     b34:	98 2f       	mov	r25, r24
     b36:	88 27       	eor	r24, r24
     b38:	82 0f       	add	r24, r18
     b3a:	91 1d       	adc	r25, r1
     b3c:	90 93 c7 04 	sts	0x04C7, r25	; 0x8004c7 <result+0x1>
     b40:	80 93 c6 04 	sts	0x04C6, r24	; 0x8004c6 <result>
     b44:	ee 15       	cp	r30, r14
     b46:	ff 05       	cpc	r31, r15
     b48:	81 f7       	brne	.-32     	; 0xb2a <FuncTaskL1+0x76>
     b4a:	8a eb       	ldi	r24, 0xBA	; 186
     b4c:	94 e0       	ldi	r25, 0x04	; 4
     b4e:	0e 94 54 05 	call	0xaa8	; 0xaa8 <_ZN7MCP_CAN8getCanIdEv>
     b52:	6b 01       	movw	r12, r22
     b54:	7c 01       	movw	r14, r24
     b56:	61 30       	cpi	r22, 0x01	; 1
     b58:	71 05       	cpc	r23, r1
     b5a:	e9 f1       	breq	.+122    	; 0xbd6 <FuncTaskL1+0x122>
     b5c:	28 f0       	brcs	.+10     	; 0xb68 <FuncTaskL1+0xb4>
     b5e:	62 30       	cpi	r22, 0x02	; 2
     b60:	71 05       	cpc	r23, r1
     b62:	09 f4       	brne	.+2      	; 0xb66 <FuncTaskL1+0xb2>
     b64:	5b c0       	rjmp	.+182    	; 0xc1c <FuncTaskL1+0x168>
     b66:	7d c0       	rjmp	.+250    	; 0xc62 <FuncTaskL1+0x1ae>
     b68:	80 91 c6 04 	lds	r24, 0x04C6	; 0x8004c6 <result>
     b6c:	90 91 c7 04 	lds	r25, 0x04C7	; 0x8004c7 <result+0x1>
     b70:	90 93 cf 04 	sts	0x04CF, r25	; 0x8004cf <dis_cur+0x1>
     b74:	80 93 ce 04 	sts	0x04CE, r24	; 0x8004ce <dis_cur>
     b78:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
     b7c:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__data_start+0x1>
     b80:	20 91 ce 04 	lds	r18, 0x04CE	; 0x8004ce <dis_cur>
     b84:	30 91 cf 04 	lds	r19, 0x04CF	; 0x8004cf <dis_cur+0x1>
     b88:	82 1b       	sub	r24, r18
     b8a:	93 0b       	sbc	r25, r19
     b8c:	90 93 cd 04 	sts	0x04CD, r25	; 0x8004cd <dis_change+0x1>
     b90:	80 93 cc 04 	sts	0x04CC, r24	; 0x8004cc <dis_change>
     b94:	80 91 ce 04 	lds	r24, 0x04CE	; 0x8004ce <dis_cur>
     b98:	90 91 cf 04 	lds	r25, 0x04CF	; 0x8004cf <dis_cur+0x1>
     b9c:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__data_start+0x1>
     ba0:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
     ba4:	80 91 cc 04 	lds	r24, 0x04CC	; 0x8004cc <dis_change>
     ba8:	90 91 cd 04 	lds	r25, 0x04CD	; 0x8004cd <dis_change+0x1>
     bac:	89 2b       	or	r24, r25
     bae:	61 f0       	breq	.+24     	; 0xbc8 <FuncTaskL1+0x114>
     bb0:	80 91 cc 04 	lds	r24, 0x04CC	; 0x8004cc <dis_change>
     bb4:	90 91 cd 04 	lds	r25, 0x04CD	; 0x8004cd <dis_change+0x1>
     bb8:	c2 97       	sbiw	r24, 0x32	; 50
     bba:	18 f4       	brcc	.+6      	; 0xbc2 <FuncTaskL1+0x10e>
     bbc:	6f ee       	ldi	r22, 0xEF	; 239
     bbe:	72 e0       	ldi	r23, 0x02	; 2
     bc0:	c1 c0       	rjmp	.+386    	; 0xd44 <FuncTaskL1+0x290>
     bc2:	64 e1       	ldi	r22, 0x14	; 20
     bc4:	73 e0       	ldi	r23, 0x03	; 3
     bc6:	be c0       	rjmp	.+380    	; 0xd44 <FuncTaskL1+0x290>
     bc8:	80 91 cc 04 	lds	r24, 0x04CC	; 0x8004cc <dis_change>
     bcc:	90 91 cd 04 	lds	r25, 0x04CD	; 0x8004cd <dis_change+0x1>
     bd0:	66 e3       	ldi	r22, 0x36	; 54
     bd2:	73 e0       	ldi	r23, 0x03	; 3
     bd4:	b7 c0       	rjmp	.+366    	; 0xd44 <FuncTaskL1+0x290>
     bd6:	80 91 c6 04 	lds	r24, 0x04C6	; 0x8004c6 <result>
     bda:	90 91 c7 04 	lds	r25, 0x04C7	; 0x8004c7 <result+0x1>
     bde:	90 93 cb 04 	sts	0x04CB, r25	; 0x8004cb <temp+0x1>
     be2:	80 93 ca 04 	sts	0x04CA, r24	; 0x8004ca <temp>
     be6:	80 91 ca 04 	lds	r24, 0x04CA	; 0x8004ca <temp>
     bea:	90 91 cb 04 	lds	r25, 0x04CB	; 0x8004cb <temp+0x1>
     bee:	cc 97       	sbiw	r24, 0x3c	; 60
     bf0:	18 f4       	brcc	.+6      	; 0xbf8 <FuncTaskL1+0x144>
     bf2:	69 e5       	ldi	r22, 0x59	; 89
     bf4:	73 e0       	ldi	r23, 0x03	; 3
     bf6:	a6 c0       	rjmp	.+332    	; 0xd44 <FuncTaskL1+0x290>
     bf8:	80 91 ca 04 	lds	r24, 0x04CA	; 0x8004ca <temp>
     bfc:	90 91 cb 04 	lds	r25, 0x04CB	; 0x8004cb <temp+0x1>
     c00:	cc 97       	sbiw	r24, 0x3c	; 60
     c02:	08 f4       	brcc	.+2      	; 0xc06 <FuncTaskL1+0x152>
     c04:	78 c0       	rjmp	.+240    	; 0xcf6 <FuncTaskL1+0x242>
     c06:	80 91 ca 04 	lds	r24, 0x04CA	; 0x8004ca <temp>
     c0a:	90 91 cb 04 	lds	r25, 0x04CB	; 0x8004cb <temp+0x1>
     c0e:	85 35       	cpi	r24, 0x55	; 85
     c10:	91 05       	cpc	r25, r1
     c12:	08 f0       	brcs	.+2      	; 0xc16 <FuncTaskL1+0x162>
     c14:	70 c0       	rjmp	.+224    	; 0xcf6 <FuncTaskL1+0x242>
     c16:	65 ec       	ldi	r22, 0xC5	; 197
     c18:	73 e0       	ldi	r23, 0x03	; 3
     c1a:	94 c0       	rjmp	.+296    	; 0xd44 <FuncTaskL1+0x290>
     c1c:	80 91 c6 04 	lds	r24, 0x04C6	; 0x8004c6 <result>
     c20:	90 91 c7 04 	lds	r25, 0x04C7	; 0x8004c7 <result+0x1>
     c24:	90 93 c9 04 	sts	0x04C9, r25	; 0x8004c9 <depth+0x1>
     c28:	80 93 c8 04 	sts	0x04C8, r24	; 0x8004c8 <depth>
     c2c:	80 91 c8 04 	lds	r24, 0x04C8	; 0x8004c8 <depth>
     c30:	90 91 c9 04 	lds	r25, 0x04C9	; 0x8004c9 <depth+0x1>
     c34:	44 97       	sbiw	r24, 0x14	; 20
     c36:	18 f4       	brcc	.+6      	; 0xc3e <FuncTaskL1+0x18a>
     c38:	69 e7       	ldi	r22, 0x79	; 121
     c3a:	73 e0       	ldi	r23, 0x03	; 3
     c3c:	83 c0       	rjmp	.+262    	; 0xd44 <FuncTaskL1+0x290>
     c3e:	80 91 c8 04 	lds	r24, 0x04C8	; 0x8004c8 <depth>
     c42:	90 91 c9 04 	lds	r25, 0x04C9	; 0x8004c9 <depth+0x1>
     c46:	44 97       	sbiw	r24, 0x14	; 20
     c48:	08 f4       	brcc	.+2      	; 0xc4c <FuncTaskL1+0x198>
     c4a:	7a c0       	rjmp	.+244    	; 0xd40 <FuncTaskL1+0x28c>
     c4c:	80 91 c8 04 	lds	r24, 0x04C8	; 0x8004c8 <depth>
     c50:	90 91 c9 04 	lds	r25, 0x04C9	; 0x8004c9 <depth+0x1>
     c54:	84 36       	cpi	r24, 0x64	; 100
     c56:	91 05       	cpc	r25, r1
     c58:	08 f0       	brcs	.+2      	; 0xc5c <FuncTaskL1+0x1a8>
     c5a:	72 c0       	rjmp	.+228    	; 0xd40 <FuncTaskL1+0x28c>
     c5c:	61 e5       	ldi	r22, 0x51	; 81
     c5e:	74 e0       	ldi	r23, 0x04	; 4
     c60:	71 c0       	rjmp	.+226    	; 0xd44 <FuncTaskL1+0x290>
     c62:	62 e9       	ldi	r22, 0x92	; 146
     c64:	73 e0       	ldi	r23, 0x03	; 3
     c66:	8b ed       	ldi	r24, 0xDB	; 219
     c68:	94 e0       	ldi	r25, 0x04	; 4
     c6a:	0e 94 36 0a 	call	0x146c	; 0x146c <_ZN5Print7printlnEPKc>
     c6e:	60 eb       	ldi	r22, 0xB0	; 176
     c70:	73 e0       	ldi	r23, 0x03	; 3
     c72:	8b ed       	ldi	r24, 0xDB	; 219
     c74:	94 e0       	ldi	r25, 0x04	; 4
     c76:	0e 94 30 0a 	call	0x1460	; 0x1460 <_ZN5Print5printEPKc>
     c7a:	40 e1       	ldi	r20, 0x10	; 16
     c7c:	50 e0       	ldi	r21, 0x00	; 0
     c7e:	b6 01       	movw	r22, r12
     c80:	8b ed       	ldi	r24, 0xDB	; 219
     c82:	94 e0       	ldi	r25, 0x04	; 4
     c84:	0e 94 a5 0a 	call	0x154a	; 0x154a <_ZN5Print7printlnEji>
     c88:	78 01       	movw	r14, r16
     c8a:	89 85       	ldd	r24, Y+9	; 0x09
     c8c:	90 e0       	ldi	r25, 0x00	; 0
     c8e:	97 01       	movw	r18, r14
     c90:	20 1b       	sub	r18, r16
     c92:	31 0b       	sbc	r19, r17
     c94:	28 17       	cp	r18, r24
     c96:	39 07       	cpc	r19, r25
     c98:	84 f4       	brge	.+32     	; 0xcba <FuncTaskL1+0x206>
     c9a:	f7 01       	movw	r30, r14
     c9c:	61 91       	ld	r22, Z+
     c9e:	7f 01       	movw	r14, r30
     ca0:	40 e1       	ldi	r20, 0x10	; 16
     ca2:	50 e0       	ldi	r21, 0x00	; 0
     ca4:	8b ed       	ldi	r24, 0xDB	; 219
     ca6:	94 e0       	ldi	r25, 0x04	; 4
     ca8:	0e 94 9e 0a 	call	0x153c	; 0x153c <_ZN5Print5printEhi>
     cac:	63 ec       	ldi	r22, 0xC3	; 195
     cae:	73 e0       	ldi	r23, 0x03	; 3
     cb0:	8b ed       	ldi	r24, 0xDB	; 219
     cb2:	94 e0       	ldi	r25, 0x04	; 4
     cb4:	0e 94 30 0a 	call	0x1460	; 0x1460 <_ZN5Print5printEPKc>
     cb8:	e8 cf       	rjmp	.-48     	; 0xc8a <FuncTaskL1+0x1d6>
     cba:	8b ed       	ldi	r24, 0xDB	; 219
     cbc:	94 e0       	ldi	r25, 0x04	; 4
     cbe:	0e 94 32 0a 	call	0x1464	; 0x1464 <_ZN5Print7printlnEv>
     cc2:	80 91 d0 04 	lds	r24, 0x04D0	; 0x8004d0 <TaskL1_count>
     cc6:	90 91 d1 04 	lds	r25, 0x04D1	; 0x8004d1 <TaskL1_count+0x1>
     cca:	01 96       	adiw	r24, 0x01	; 1
     ccc:	90 93 d1 04 	sts	0x04D1, r25	; 0x8004d1 <TaskL1_count+0x1>
     cd0:	80 93 d0 04 	sts	0x04D0, r24	; 0x8004d0 <TaskL1_count>
     cd4:	0e 94 1d 0b 	call	0x163a	; 0x163a <TerminateTask>
     cd8:	29 96       	adiw	r28, 0x09	; 9
     cda:	0f b6       	in	r0, 0x3f	; 63
     cdc:	f8 94       	cli
     cde:	de bf       	out	0x3e, r29	; 62
     ce0:	0f be       	out	0x3f, r0	; 63
     ce2:	cd bf       	out	0x3d, r28	; 61
     ce4:	df 91       	pop	r29
     ce6:	cf 91       	pop	r28
     ce8:	1f 91       	pop	r17
     cea:	0f 91       	pop	r16
     cec:	ff 90       	pop	r15
     cee:	ef 90       	pop	r14
     cf0:	df 90       	pop	r13
     cf2:	cf 90       	pop	r12
     cf4:	08 95       	ret
     cf6:	80 91 ca 04 	lds	r24, 0x04CA	; 0x8004ca <temp>
     cfa:	90 91 cb 04 	lds	r25, 0x04CB	; 0x8004cb <temp+0x1>
     cfe:	85 35       	cpi	r24, 0x55	; 85
     d00:	91 05       	cpc	r25, r1
     d02:	50 f0       	brcs	.+20     	; 0xd18 <FuncTaskL1+0x264>
     d04:	80 91 ca 04 	lds	r24, 0x04CA	; 0x8004ca <temp>
     d08:	90 91 cb 04 	lds	r25, 0x04CB	; 0x8004cb <temp+0x1>
     d0c:	8f 35       	cpi	r24, 0x5F	; 95
     d0e:	91 05       	cpc	r25, r1
     d10:	18 f4       	brcc	.+6      	; 0xd18 <FuncTaskL1+0x264>
     d12:	6b ee       	ldi	r22, 0xEB	; 235
     d14:	73 e0       	ldi	r23, 0x03	; 3
     d16:	16 c0       	rjmp	.+44     	; 0xd44 <FuncTaskL1+0x290>
     d18:	80 91 ca 04 	lds	r24, 0x04CA	; 0x8004ca <temp>
     d1c:	90 91 cb 04 	lds	r25, 0x04CB	; 0x8004cb <temp+0x1>
     d20:	8f 35       	cpi	r24, 0x5F	; 95
     d22:	91 05       	cpc	r25, r1
     d24:	50 f0       	brcs	.+20     	; 0xd3a <FuncTaskL1+0x286>
     d26:	80 91 ca 04 	lds	r24, 0x04CA	; 0x8004ca <temp>
     d2a:	90 91 cb 04 	lds	r25, 0x04CB	; 0x8004cb <temp+0x1>
     d2e:	8e 36       	cpi	r24, 0x6E	; 110
     d30:	91 05       	cpc	r25, r1
     d32:	18 f4       	brcc	.+6      	; 0xd3a <FuncTaskL1+0x286>
     d34:	60 e1       	ldi	r22, 0x10	; 16
     d36:	74 e0       	ldi	r23, 0x04	; 4
     d38:	05 c0       	rjmp	.+10     	; 0xd44 <FuncTaskL1+0x290>
     d3a:	63 e3       	ldi	r22, 0x33	; 51
     d3c:	74 e0       	ldi	r23, 0x04	; 4
     d3e:	02 c0       	rjmp	.+4      	; 0xd44 <FuncTaskL1+0x290>
     d40:	6a e6       	ldi	r22, 0x6A	; 106
     d42:	74 e0       	ldi	r23, 0x04	; 4
     d44:	8b ed       	ldi	r24, 0xDB	; 219
     d46:	94 e0       	ldi	r25, 0x04	; 4
     d48:	0e 94 36 0a 	call	0x146c	; 0x146c <_ZN5Print7printlnEPKc>
     d4c:	ba cf       	rjmp	.-140    	; 0xcc2 <FuncTaskL1+0x20e>

00000d4e <_GLOBAL__sub_I_TaskL1_count>:
     d4e:	6a e0       	ldi	r22, 0x0A	; 10
     d50:	8a eb       	ldi	r24, 0xBA	; 186
     d52:	94 e0       	ldi	r25, 0x04	; 4
     d54:	0c 94 ad 04 	jmp	0x95a	; 0x95a <_ZN7MCP_CANC1Eh>

00000d58 <__vector_16>:
	

#endif

	// busy wait
	__asm__ __volatile__ (
     d58:	1f 92       	push	r1
     d5a:	0f 92       	push	r0
     d5c:	0f b6       	in	r0, 0x3f	; 63
     d5e:	0f 92       	push	r0
     d60:	11 24       	eor	r1, r1
     d62:	2f 93       	push	r18
     d64:	3f 93       	push	r19
     d66:	8f 93       	push	r24
     d68:	9f 93       	push	r25
     d6a:	af 93       	push	r26
     d6c:	bf 93       	push	r27
     d6e:	80 91 d3 04 	lds	r24, 0x04D3	; 0x8004d3 <timer0_millis>
     d72:	90 91 d4 04 	lds	r25, 0x04D4	; 0x8004d4 <timer0_millis+0x1>
     d76:	a0 91 d5 04 	lds	r26, 0x04D5	; 0x8004d5 <timer0_millis+0x2>
     d7a:	b0 91 d6 04 	lds	r27, 0x04D6	; 0x8004d6 <timer0_millis+0x3>
     d7e:	30 91 d2 04 	lds	r19, 0x04D2	; 0x8004d2 <timer0_fract>
     d82:	23 e0       	ldi	r18, 0x03	; 3
     d84:	23 0f       	add	r18, r19
     d86:	2d 37       	cpi	r18, 0x7D	; 125
     d88:	20 f4       	brcc	.+8      	; 0xd92 <__vector_16+0x3a>
     d8a:	01 96       	adiw	r24, 0x01	; 1
     d8c:	a1 1d       	adc	r26, r1
     d8e:	b1 1d       	adc	r27, r1
     d90:	05 c0       	rjmp	.+10     	; 0xd9c <__vector_16+0x44>
     d92:	26 e8       	ldi	r18, 0x86	; 134
     d94:	23 0f       	add	r18, r19
     d96:	02 96       	adiw	r24, 0x02	; 2
     d98:	a1 1d       	adc	r26, r1
     d9a:	b1 1d       	adc	r27, r1
     d9c:	20 93 d2 04 	sts	0x04D2, r18	; 0x8004d2 <timer0_fract>
     da0:	80 93 d3 04 	sts	0x04D3, r24	; 0x8004d3 <timer0_millis>
     da4:	90 93 d4 04 	sts	0x04D4, r25	; 0x8004d4 <timer0_millis+0x1>
     da8:	a0 93 d5 04 	sts	0x04D5, r26	; 0x8004d5 <timer0_millis+0x2>
     dac:	b0 93 d6 04 	sts	0x04D6, r27	; 0x8004d6 <timer0_millis+0x3>
     db0:	80 91 d7 04 	lds	r24, 0x04D7	; 0x8004d7 <timer0_overflow_count>
     db4:	90 91 d8 04 	lds	r25, 0x04D8	; 0x8004d8 <timer0_overflow_count+0x1>
     db8:	a0 91 d9 04 	lds	r26, 0x04D9	; 0x8004d9 <timer0_overflow_count+0x2>
     dbc:	b0 91 da 04 	lds	r27, 0x04DA	; 0x8004da <timer0_overflow_count+0x3>
     dc0:	01 96       	adiw	r24, 0x01	; 1
     dc2:	a1 1d       	adc	r26, r1
     dc4:	b1 1d       	adc	r27, r1
     dc6:	80 93 d7 04 	sts	0x04D7, r24	; 0x8004d7 <timer0_overflow_count>
     dca:	90 93 d8 04 	sts	0x04D8, r25	; 0x8004d8 <timer0_overflow_count+0x1>
     dce:	a0 93 d9 04 	sts	0x04D9, r26	; 0x8004d9 <timer0_overflow_count+0x2>
     dd2:	b0 93 da 04 	sts	0x04DA, r27	; 0x8004da <timer0_overflow_count+0x3>
     dd6:	bf 91       	pop	r27
     dd8:	af 91       	pop	r26
     dda:	9f 91       	pop	r25
     ddc:	8f 91       	pop	r24
     dde:	3f 91       	pop	r19
     de0:	2f 91       	pop	r18
     de2:	0f 90       	pop	r0
     de4:	0f be       	out	0x3f, r0	; 63
     de6:	0f 90       	pop	r0
     de8:	1f 90       	pop	r1
     dea:	18 95       	reti

00000dec <micros>:
     dec:	3f b7       	in	r19, 0x3f	; 63
     dee:	f8 94       	cli
     df0:	80 91 d7 04 	lds	r24, 0x04D7	; 0x8004d7 <timer0_overflow_count>
     df4:	90 91 d8 04 	lds	r25, 0x04D8	; 0x8004d8 <timer0_overflow_count+0x1>
     df8:	a0 91 d9 04 	lds	r26, 0x04D9	; 0x8004d9 <timer0_overflow_count+0x2>
     dfc:	b0 91 da 04 	lds	r27, 0x04DA	; 0x8004da <timer0_overflow_count+0x3>
     e00:	26 b5       	in	r18, 0x26	; 38
     e02:	a8 9b       	sbis	0x15, 0	; 21
     e04:	05 c0       	rjmp	.+10     	; 0xe10 <micros+0x24>
     e06:	2f 3f       	cpi	r18, 0xFF	; 255
     e08:	19 f0       	breq	.+6      	; 0xe10 <micros+0x24>
     e0a:	01 96       	adiw	r24, 0x01	; 1
     e0c:	a1 1d       	adc	r26, r1
     e0e:	b1 1d       	adc	r27, r1
     e10:	3f bf       	out	0x3f, r19	; 63
     e12:	ba 2f       	mov	r27, r26
     e14:	a9 2f       	mov	r26, r25
     e16:	98 2f       	mov	r25, r24
     e18:	88 27       	eor	r24, r24
     e1a:	82 0f       	add	r24, r18
     e1c:	91 1d       	adc	r25, r1
     e1e:	a1 1d       	adc	r26, r1
     e20:	b1 1d       	adc	r27, r1
     e22:	bc 01       	movw	r22, r24
     e24:	cd 01       	movw	r24, r26
     e26:	42 e0       	ldi	r20, 0x02	; 2
     e28:	66 0f       	add	r22, r22
     e2a:	77 1f       	adc	r23, r23
     e2c:	88 1f       	adc	r24, r24
     e2e:	99 1f       	adc	r25, r25
     e30:	4a 95       	dec	r20
     e32:	d1 f7       	brne	.-12     	; 0xe28 <micros+0x3c>
     e34:	08 95       	ret

00000e36 <delay>:
     e36:	8f 92       	push	r8
     e38:	9f 92       	push	r9
     e3a:	af 92       	push	r10
     e3c:	bf 92       	push	r11
     e3e:	cf 92       	push	r12
     e40:	df 92       	push	r13
     e42:	ef 92       	push	r14
     e44:	ff 92       	push	r15
     e46:	6b 01       	movw	r12, r22
     e48:	7c 01       	movw	r14, r24
     e4a:	0e 94 f6 06 	call	0xdec	; 0xdec <micros>
     e4e:	4b 01       	movw	r8, r22
     e50:	5c 01       	movw	r10, r24
     e52:	c1 14       	cp	r12, r1
     e54:	d1 04       	cpc	r13, r1
     e56:	e1 04       	cpc	r14, r1
     e58:	f1 04       	cpc	r15, r1
     e5a:	01 f1       	breq	.+64     	; 0xe9c <delay+0x66>
     e5c:	0e 94 bb 0a 	call	0x1576	; 0x1576 <yield>
     e60:	0e 94 f6 06 	call	0xdec	; 0xdec <micros>
     e64:	dc 01       	movw	r26, r24
     e66:	cb 01       	movw	r24, r22
     e68:	88 19       	sub	r24, r8
     e6a:	99 09       	sbc	r25, r9
     e6c:	aa 09       	sbc	r26, r10
     e6e:	bb 09       	sbc	r27, r11
     e70:	88 3e       	cpi	r24, 0xE8	; 232
     e72:	93 40       	sbci	r25, 0x03	; 3
     e74:	a1 05       	cpc	r26, r1
     e76:	b1 05       	cpc	r27, r1
     e78:	60 f3       	brcs	.-40     	; 0xe52 <delay+0x1c>
     e7a:	21 e0       	ldi	r18, 0x01	; 1
     e7c:	c2 1a       	sub	r12, r18
     e7e:	d1 08       	sbc	r13, r1
     e80:	e1 08       	sbc	r14, r1
     e82:	f1 08       	sbc	r15, r1
     e84:	88 ee       	ldi	r24, 0xE8	; 232
     e86:	88 0e       	add	r8, r24
     e88:	83 e0       	ldi	r24, 0x03	; 3
     e8a:	98 1e       	adc	r9, r24
     e8c:	a1 1c       	adc	r10, r1
     e8e:	b1 1c       	adc	r11, r1
     e90:	c1 14       	cp	r12, r1
     e92:	d1 04       	cpc	r13, r1
     e94:	e1 04       	cpc	r14, r1
     e96:	f1 04       	cpc	r15, r1
     e98:	19 f7       	brne	.-58     	; 0xe60 <delay+0x2a>
     e9a:	db cf       	rjmp	.-74     	; 0xe52 <delay+0x1c>
     e9c:	ff 90       	pop	r15
     e9e:	ef 90       	pop	r14
     ea0:	df 90       	pop	r13
     ea2:	cf 90       	pop	r12
     ea4:	bf 90       	pop	r11
     ea6:	af 90       	pop	r10
     ea8:	9f 90       	pop	r9
     eaa:	8f 90       	pop	r8
     eac:	08 95       	ret

00000eae <init>:

void init()
{
	// this needs to be called before setup() or some functions won't
	// work there
	sei();
     eae:	78 94       	sei
	
	// on the ATmega168, timer 0 is also used for fast hardware pwm
	// (using phase-correct PWM would mean that timer 0 overflowed half as often
	// resulting in different millis() behavior on the ATmega8 and ATmega168)
#if defined(TCCR0A) && defined(WGM01)
	sbi(TCCR0A, WGM01);
     eb0:	84 b5       	in	r24, 0x24	; 36
     eb2:	82 60       	ori	r24, 0x02	; 2
     eb4:	84 bd       	out	0x24, r24	; 36
	sbi(TCCR0A, WGM00);
     eb6:	84 b5       	in	r24, 0x24	; 36
     eb8:	81 60       	ori	r24, 0x01	; 1
     eba:	84 bd       	out	0x24, r24	; 36
	// this combination is for the standard atmega8
	sbi(TCCR0, CS01);
	sbi(TCCR0, CS00);
#elif defined(TCCR0B) && defined(CS01) && defined(CS00)
	// this combination is for the standard 168/328/1280/2560
	sbi(TCCR0B, CS01);
     ebc:	85 b5       	in	r24, 0x25	; 37
     ebe:	82 60       	ori	r24, 0x02	; 2
     ec0:	85 bd       	out	0x25, r24	; 37
	sbi(TCCR0B, CS00);
     ec2:	85 b5       	in	r24, 0x25	; 37
     ec4:	81 60       	ori	r24, 0x01	; 1
     ec6:	85 bd       	out	0x25, r24	; 37

	// enable timer 0 overflow interrupt
#if defined(TIMSK) && defined(TOIE0)
	sbi(TIMSK, TOIE0);
#elif defined(TIMSK0) && defined(TOIE0)
	sbi(TIMSK0, TOIE0);
     ec8:	ee e6       	ldi	r30, 0x6E	; 110
     eca:	f0 e0       	ldi	r31, 0x00	; 0
     ecc:	80 81       	ld	r24, Z
     ece:	81 60       	ori	r24, 0x01	; 1
     ed0:	80 83       	st	Z, r24
	// this is better for motors as it ensures an even waveform
	// note, however, that fast pwm mode can achieve a frequency of up
	// 8 MHz (with a 16 MHz clock) at 50% duty cycle

#if defined(TCCR1B) && defined(CS11) && defined(CS10)
	TCCR1B = 0;
     ed2:	e1 e8       	ldi	r30, 0x81	; 129
     ed4:	f0 e0       	ldi	r31, 0x00	; 0
     ed6:	10 82       	st	Z, r1

	// set timer 1 prescale factor to 64
	sbi(TCCR1B, CS11);
     ed8:	80 81       	ld	r24, Z
     eda:	82 60       	ori	r24, 0x02	; 2
     edc:	80 83       	st	Z, r24
#if F_CPU >= 8000000L
	sbi(TCCR1B, CS10);
     ede:	80 81       	ld	r24, Z
     ee0:	81 60       	ori	r24, 0x01	; 1
     ee2:	80 83       	st	Z, r24
	sbi(TCCR1, CS10);
#endif
#endif
	// put timer 1 in 8-bit phase correct pwm mode
#if defined(TCCR1A) && defined(WGM10)
	sbi(TCCR1A, WGM10);
     ee4:	e0 e8       	ldi	r30, 0x80	; 128
     ee6:	f0 e0       	ldi	r31, 0x00	; 0
     ee8:	80 81       	ld	r24, Z
     eea:	81 60       	ori	r24, 0x01	; 1
     eec:	80 83       	st	Z, r24

	// set timer 2 prescale factor to 64
#if defined(TCCR2) && defined(CS22)
	sbi(TCCR2, CS22);
#elif defined(TCCR2B) && defined(CS22)
	sbi(TCCR2B, CS22);
     eee:	e1 eb       	ldi	r30, 0xB1	; 177
     ef0:	f0 e0       	ldi	r31, 0x00	; 0
     ef2:	80 81       	ld	r24, Z
     ef4:	84 60       	ori	r24, 0x04	; 4
     ef6:	80 83       	st	Z, r24

	// configure timer 2 for phase correct pwm (8-bit)
#if defined(TCCR2) && defined(WGM20)
	sbi(TCCR2, WGM20);
#elif defined(TCCR2A) && defined(WGM20)
	sbi(TCCR2A, WGM20);
     ef8:	e0 eb       	ldi	r30, 0xB0	; 176
     efa:	f0 e0       	ldi	r31, 0x00	; 0
     efc:	80 81       	ld	r24, Z
     efe:	81 60       	ori	r24, 0x01	; 1
     f00:	80 83       	st	Z, r24
#endif

#if defined(ADCSRA)
	// set a2d prescaler so we are inside the desired 50-200 KHz range.
	#if F_CPU >= 16000000 // 16 MHz / 128 = 125 KHz
		sbi(ADCSRA, ADPS2);
     f02:	ea e7       	ldi	r30, 0x7A	; 122
     f04:	f0 e0       	ldi	r31, 0x00	; 0
     f06:	80 81       	ld	r24, Z
     f08:	84 60       	ori	r24, 0x04	; 4
     f0a:	80 83       	st	Z, r24
		sbi(ADCSRA, ADPS1);
     f0c:	80 81       	ld	r24, Z
     f0e:	82 60       	ori	r24, 0x02	; 2
     f10:	80 83       	st	Z, r24
		sbi(ADCSRA, ADPS0);
     f12:	80 81       	ld	r24, Z
     f14:	81 60       	ori	r24, 0x01	; 1
     f16:	80 83       	st	Z, r24
		cbi(ADCSRA, ADPS2);
		cbi(ADCSRA, ADPS1);
		sbi(ADCSRA, ADPS0);
	#endif
	// enable a2d conversions
	sbi(ADCSRA, ADEN);
     f18:	80 81       	ld	r24, Z
     f1a:	80 68       	ori	r24, 0x80	; 128
     f1c:	80 83       	st	Z, r24
	// here so they can be used as normal digital i/o; they will be
	// reconnected in Serial.begin()
#if defined(UCSRB)
	UCSRB = 0;
#elif defined(UCSR0B)
	UCSR0B = 0;
     f1e:	10 92 c1 00 	sts	0x00C1, r1	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
     f22:	08 95       	ret

00000f24 <turnOffPWM>:
//
//static inline void turnOffPWM(uint8_t timer) __attribute__ ((always_inline));
//static inline void turnOffPWM(uint8_t timer)
static void turnOffPWM(uint8_t timer)
{
	switch (timer)
     f24:	83 30       	cpi	r24, 0x03	; 3
     f26:	81 f0       	breq	.+32     	; 0xf48 <turnOffPWM+0x24>
     f28:	28 f4       	brcc	.+10     	; 0xf34 <turnOffPWM+0x10>
     f2a:	81 30       	cpi	r24, 0x01	; 1
     f2c:	99 f0       	breq	.+38     	; 0xf54 <turnOffPWM+0x30>
     f2e:	82 30       	cpi	r24, 0x02	; 2
     f30:	a1 f0       	breq	.+40     	; 0xf5a <turnOffPWM+0x36>
     f32:	08 95       	ret
     f34:	87 30       	cpi	r24, 0x07	; 7
     f36:	a9 f0       	breq	.+42     	; 0xf62 <turnOffPWM+0x3e>
     f38:	88 30       	cpi	r24, 0x08	; 8
     f3a:	b9 f0       	breq	.+46     	; 0xf6a <turnOffPWM+0x46>
     f3c:	84 30       	cpi	r24, 0x04	; 4
     f3e:	d1 f4       	brne	.+52     	; 0xf74 <turnOffPWM+0x50>
	{
		#if defined(TCCR1A) && defined(COM1A1)
		case TIMER1A:   cbi(TCCR1A, COM1A1);    break;
		#endif
		#if defined(TCCR1A) && defined(COM1B1)
		case TIMER1B:   cbi(TCCR1A, COM1B1);    break;
     f40:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
     f44:	8f 7d       	andi	r24, 0xDF	; 223
     f46:	03 c0       	rjmp	.+6      	; 0xf4e <turnOffPWM+0x2a>
static void turnOffPWM(uint8_t timer)
{
	switch (timer)
	{
		#if defined(TCCR1A) && defined(COM1A1)
		case TIMER1A:   cbi(TCCR1A, COM1A1);    break;
     f48:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
     f4c:	8f 77       	andi	r24, 0x7F	; 127
		#endif
		#if defined(TCCR1A) && defined(COM1B1)
		case TIMER1B:   cbi(TCCR1A, COM1B1);    break;
     f4e:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
     f52:	08 95       	ret
		#if defined(TCCR2) && defined(COM21)
		case  TIMER2:   cbi(TCCR2, COM21);      break;
		#endif
		
		#if defined(TCCR0A) && defined(COM0A1)
		case  TIMER0A:  cbi(TCCR0A, COM0A1);    break;
     f54:	84 b5       	in	r24, 0x24	; 36
     f56:	8f 77       	andi	r24, 0x7F	; 127
     f58:	02 c0       	rjmp	.+4      	; 0xf5e <turnOffPWM+0x3a>
		#endif
		
		#if defined(TCCR0A) && defined(COM0B1)
		case  TIMER0B:  cbi(TCCR0A, COM0B1);    break;
     f5a:	84 b5       	in	r24, 0x24	; 36
     f5c:	8f 7d       	andi	r24, 0xDF	; 223
     f5e:	84 bd       	out	0x24, r24	; 36
     f60:	08 95       	ret
		#endif
		#if defined(TCCR2A) && defined(COM2A1)
		case  TIMER2A:  cbi(TCCR2A, COM2A1);    break;
     f62:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7e00b0>
     f66:	8f 77       	andi	r24, 0x7F	; 127
     f68:	03 c0       	rjmp	.+6      	; 0xf70 <turnOffPWM+0x4c>
		#endif
		#if defined(TCCR2A) && defined(COM2B1)
		case  TIMER2B:  cbi(TCCR2A, COM2B1);    break;
     f6a:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7e00b0>
     f6e:	8f 7d       	andi	r24, 0xDF	; 223
     f70:	80 93 b0 00 	sts	0x00B0, r24	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7e00b0>
     f74:	08 95       	ret

00000f76 <pinMode>:
#define ARDUINO_MAIN
#include "wiring_private.h"
#include "pins_arduino.h"

void pinMode(uint8_t pin, uint8_t mode)
{
     f76:	cf 93       	push	r28
     f78:	df 93       	push	r29
	uint8_t bit = digitalPinToBitMask(pin);
     f7a:	90 e0       	ldi	r25, 0x00	; 0
     f7c:	fc 01       	movw	r30, r24
     f7e:	ec 53       	subi	r30, 0x3C	; 60
     f80:	ff 4f       	sbci	r31, 0xFF	; 255
     f82:	24 91       	lpm	r18, Z
	uint8_t port = digitalPinToPort(pin);
     f84:	fc 01       	movw	r30, r24
     f86:	e8 52       	subi	r30, 0x28	; 40
     f88:	ff 4f       	sbci	r31, 0xFF	; 255
     f8a:	84 91       	lpm	r24, Z
	volatile uint8_t *reg, *out;

	if (port == NOT_A_PIN) return;
     f8c:	88 23       	and	r24, r24
     f8e:	61 f1       	breq	.+88     	; 0xfe8 <pinMode+0x72>

	// JWS: can I let the optimizer do this?
	reg = portModeRegister(port);
     f90:	90 e0       	ldi	r25, 0x00	; 0
     f92:	88 0f       	add	r24, r24
     f94:	99 1f       	adc	r25, r25
     f96:	fc 01       	movw	r30, r24
     f98:	ea 50       	subi	r30, 0x0A	; 10
     f9a:	ff 4f       	sbci	r31, 0xFF	; 255
     f9c:	c5 91       	lpm	r28, Z+
     f9e:	d4 91       	lpm	r29, Z
	out = portOutputRegister(port);
     fa0:	fc 01       	movw	r30, r24
     fa2:	e4 51       	subi	r30, 0x14	; 20
     fa4:	ff 4f       	sbci	r31, 0xFF	; 255
     fa6:	a5 91       	lpm	r26, Z+
     fa8:	b4 91       	lpm	r27, Z

	if (mode == INPUT) { 
     faa:	61 11       	cpse	r22, r1
     fac:	09 c0       	rjmp	.+18     	; 0xfc0 <pinMode+0x4a>
		uint8_t oldSREG = SREG;
     fae:	9f b7       	in	r25, 0x3f	; 63
                cli();
     fb0:	f8 94       	cli
		*reg &= ~bit;
     fb2:	88 81       	ld	r24, Y
     fb4:	20 95       	com	r18
     fb6:	82 23       	and	r24, r18
     fb8:	88 83       	st	Y, r24
		*out &= ~bit;
     fba:	ec 91       	ld	r30, X
     fbc:	2e 23       	and	r18, r30
     fbe:	0b c0       	rjmp	.+22     	; 0xfd6 <pinMode+0x60>
		SREG = oldSREG;
	} else if (mode == INPUT_PULLUP) {
     fc0:	62 30       	cpi	r22, 0x02	; 2
     fc2:	61 f4       	brne	.+24     	; 0xfdc <pinMode+0x66>
		uint8_t oldSREG = SREG;
     fc4:	9f b7       	in	r25, 0x3f	; 63
                cli();
     fc6:	f8 94       	cli
		*reg &= ~bit;
     fc8:	38 81       	ld	r19, Y
     fca:	82 2f       	mov	r24, r18
     fcc:	80 95       	com	r24
     fce:	83 23       	and	r24, r19
     fd0:	88 83       	st	Y, r24
		*out |= bit;
     fd2:	ec 91       	ld	r30, X
     fd4:	2e 2b       	or	r18, r30
     fd6:	2c 93       	st	X, r18
		SREG = oldSREG;
     fd8:	9f bf       	out	0x3f, r25	; 63
     fda:	06 c0       	rjmp	.+12     	; 0xfe8 <pinMode+0x72>
	} else {
		uint8_t oldSREG = SREG;
     fdc:	8f b7       	in	r24, 0x3f	; 63
                cli();
     fde:	f8 94       	cli
		*reg |= bit;
     fe0:	e8 81       	ld	r30, Y
     fe2:	2e 2b       	or	r18, r30
     fe4:	28 83       	st	Y, r18
		SREG = oldSREG;
     fe6:	8f bf       	out	0x3f, r24	; 63
	}
}
     fe8:	df 91       	pop	r29
     fea:	cf 91       	pop	r28
     fec:	08 95       	ret

00000fee <digitalWrite>:
		#endif
	}
}

void digitalWrite(uint8_t pin, uint8_t val)
{
     fee:	1f 93       	push	r17
     ff0:	cf 93       	push	r28
     ff2:	df 93       	push	r29
	uint8_t timer = digitalPinToTimer(pin);
     ff4:	28 2f       	mov	r18, r24
     ff6:	30 e0       	ldi	r19, 0x00	; 0
     ff8:	f9 01       	movw	r30, r18
     ffa:	e0 55       	subi	r30, 0x50	; 80
     ffc:	ff 4f       	sbci	r31, 0xFF	; 255
     ffe:	84 91       	lpm	r24, Z
	uint8_t bit = digitalPinToBitMask(pin);
    1000:	f9 01       	movw	r30, r18
    1002:	ec 53       	subi	r30, 0x3C	; 60
    1004:	ff 4f       	sbci	r31, 0xFF	; 255
    1006:	d4 91       	lpm	r29, Z
	uint8_t port = digitalPinToPort(pin);
    1008:	f9 01       	movw	r30, r18
    100a:	e8 52       	subi	r30, 0x28	; 40
    100c:	ff 4f       	sbci	r31, 0xFF	; 255
    100e:	c4 91       	lpm	r28, Z
	volatile uint8_t *out;

	if (port == NOT_A_PIN) return;
    1010:	cc 23       	and	r28, r28
    1012:	c9 f0       	breq	.+50     	; 0x1046 <digitalWrite+0x58>
    1014:	16 2f       	mov	r17, r22

	// If the pin that support PWM output, we need to turn it off
	// before doing a digital write.
	if (timer != NOT_ON_TIMER) turnOffPWM(timer);
    1016:	81 11       	cpse	r24, r1
    1018:	0e 94 92 07 	call	0xf24	; 0xf24 <turnOffPWM>

	out = portOutputRegister(port);
    101c:	ec 2f       	mov	r30, r28
    101e:	f0 e0       	ldi	r31, 0x00	; 0
    1020:	ee 0f       	add	r30, r30
    1022:	ff 1f       	adc	r31, r31
    1024:	e4 51       	subi	r30, 0x14	; 20
    1026:	ff 4f       	sbci	r31, 0xFF	; 255
    1028:	a5 91       	lpm	r26, Z+
    102a:	b4 91       	lpm	r27, Z

	uint8_t oldSREG = SREG;
    102c:	8f b7       	in	r24, 0x3f	; 63
	cli();
    102e:	f8 94       	cli

	if (val == LOW) {
    1030:	11 11       	cpse	r17, r1
    1032:	05 c0       	rjmp	.+10     	; 0x103e <digitalWrite+0x50>
		*out &= ~bit;
    1034:	9c 91       	ld	r25, X
    1036:	ed 2f       	mov	r30, r29
    1038:	e0 95       	com	r30
    103a:	e9 23       	and	r30, r25
    103c:	02 c0       	rjmp	.+4      	; 0x1042 <digitalWrite+0x54>
	} else {
		*out |= bit;
    103e:	ec 91       	ld	r30, X
    1040:	ed 2b       	or	r30, r29
    1042:	ec 93       	st	X, r30
	}

	SREG = oldSREG;
    1044:	8f bf       	out	0x3f, r24	; 63
}
    1046:	df 91       	pop	r29
    1048:	cf 91       	pop	r28
    104a:	1f 91       	pop	r17
    104c:	08 95       	ret

0000104e <_ZN14HardwareSerial9availableEv>:
  // clear any received data
  _rx_buffer_head = _rx_buffer_tail;
}

int HardwareSerial::available(void)
{
    104e:	fc 01       	movw	r30, r24
  return ((unsigned int)(SERIAL_RX_BUFFER_SIZE + _rx_buffer_head - _rx_buffer_tail)) % SERIAL_RX_BUFFER_SIZE;
    1050:	91 8d       	ldd	r25, Z+25	; 0x19
    1052:	22 8d       	ldd	r18, Z+26	; 0x1a
    1054:	89 2f       	mov	r24, r25
    1056:	90 e0       	ldi	r25, 0x00	; 0
    1058:	80 5c       	subi	r24, 0xC0	; 192
    105a:	9f 4f       	sbci	r25, 0xFF	; 255
    105c:	82 1b       	sub	r24, r18
    105e:	91 09       	sbc	r25, r1
}
    1060:	8f 73       	andi	r24, 0x3F	; 63
    1062:	99 27       	eor	r25, r25
    1064:	08 95       	ret

00001066 <_ZN14HardwareSerial4peekEv>:

int HardwareSerial::peek(void)
{
    1066:	fc 01       	movw	r30, r24
  if (_rx_buffer_head == _rx_buffer_tail) {
    1068:	91 8d       	ldd	r25, Z+25	; 0x19
    106a:	82 8d       	ldd	r24, Z+26	; 0x1a
    106c:	98 17       	cp	r25, r24
    106e:	31 f0       	breq	.+12     	; 0x107c <_ZN14HardwareSerial4peekEv+0x16>
    return -1;
  } else {
    return _rx_buffer[_rx_buffer_tail];
    1070:	82 8d       	ldd	r24, Z+26	; 0x1a
    1072:	e8 0f       	add	r30, r24
    1074:	f1 1d       	adc	r31, r1
    1076:	85 8d       	ldd	r24, Z+29	; 0x1d
    1078:	90 e0       	ldi	r25, 0x00	; 0
    107a:	08 95       	ret
}

int HardwareSerial::peek(void)
{
  if (_rx_buffer_head == _rx_buffer_tail) {
    return -1;
    107c:	8f ef       	ldi	r24, 0xFF	; 255
    107e:	9f ef       	ldi	r25, 0xFF	; 255
  } else {
    return _rx_buffer[_rx_buffer_tail];
  }
}
    1080:	08 95       	ret

00001082 <_ZN14HardwareSerial4readEv>:

int HardwareSerial::read(void)
{
    1082:	fc 01       	movw	r30, r24
  // if the head isn't ahead of the tail, we don't have any characters
  if (_rx_buffer_head == _rx_buffer_tail) {
    1084:	91 8d       	ldd	r25, Z+25	; 0x19
    1086:	82 8d       	ldd	r24, Z+26	; 0x1a
    1088:	98 17       	cp	r25, r24
    108a:	61 f0       	breq	.+24     	; 0x10a4 <_ZN14HardwareSerial4readEv+0x22>
    return -1;
  } else {
    unsigned char c = _rx_buffer[_rx_buffer_tail];
    108c:	82 8d       	ldd	r24, Z+26	; 0x1a
    108e:	df 01       	movw	r26, r30
    1090:	a8 0f       	add	r26, r24
    1092:	b1 1d       	adc	r27, r1
    1094:	5d 96       	adiw	r26, 0x1d	; 29
    1096:	8c 91       	ld	r24, X
    _rx_buffer_tail = (rx_buffer_index_t)(_rx_buffer_tail + 1) % SERIAL_RX_BUFFER_SIZE;
    1098:	92 8d       	ldd	r25, Z+26	; 0x1a
    109a:	9f 5f       	subi	r25, 0xFF	; 255
    109c:	9f 73       	andi	r25, 0x3F	; 63
    109e:	92 8f       	std	Z+26, r25	; 0x1a
    return c;
    10a0:	90 e0       	ldi	r25, 0x00	; 0
    10a2:	08 95       	ret

int HardwareSerial::read(void)
{
  // if the head isn't ahead of the tail, we don't have any characters
  if (_rx_buffer_head == _rx_buffer_tail) {
    return -1;
    10a4:	8f ef       	ldi	r24, 0xFF	; 255
    10a6:	9f ef       	ldi	r25, 0xFF	; 255
  } else {
    unsigned char c = _rx_buffer[_rx_buffer_tail];
    _rx_buffer_tail = (rx_buffer_index_t)(_rx_buffer_tail + 1) % SERIAL_RX_BUFFER_SIZE;
    return c;
  }
}
    10a8:	08 95       	ret

000010aa <_ZN14HardwareSerial17availableForWriteEv>:
{
#if (SERIAL_TX_BUFFER_SIZE>256)
  uint8_t oldSREG = SREG;
  cli();
#endif
  tx_buffer_index_t head = _tx_buffer_head;
    10aa:	fc 01       	movw	r30, r24
    10ac:	53 8d       	ldd	r21, Z+27	; 0x1b
  tx_buffer_index_t tail = _tx_buffer_tail;
    10ae:	44 8d       	ldd	r20, Z+28	; 0x1c
    10b0:	25 2f       	mov	r18, r21
    10b2:	30 e0       	ldi	r19, 0x00	; 0
    10b4:	84 2f       	mov	r24, r20
    10b6:	90 e0       	ldi	r25, 0x00	; 0
#if (SERIAL_TX_BUFFER_SIZE>256)
  SREG = oldSREG;
#endif
  if (head >= tail) return SERIAL_TX_BUFFER_SIZE - 1 - head + tail;
    10b8:	82 1b       	sub	r24, r18
    10ba:	93 0b       	sbc	r25, r19
    10bc:	54 17       	cp	r21, r20
    10be:	10 f0       	brcs	.+4      	; 0x10c4 <_ZN14HardwareSerial17availableForWriteEv+0x1a>
    10c0:	cf 96       	adiw	r24, 0x3f	; 63
    10c2:	08 95       	ret
  return tail - head - 1;
    10c4:	01 97       	sbiw	r24, 0x01	; 1
}
    10c6:	08 95       	ret

000010c8 <_Z14serialEventRunv>:
#endif

void serialEventRun(void)
{
#if defined(HAVE_HWSERIAL0)
  if (Serial0_available && serialEvent && Serial0_available()) serialEvent();
    10c8:	89 eb       	ldi	r24, 0xB9	; 185
    10ca:	99 e0       	ldi	r25, 0x09	; 9
    10cc:	89 2b       	or	r24, r25
    10ce:	49 f0       	breq	.+18     	; 0x10e2 <_Z14serialEventRunv+0x1a>
    10d0:	80 e0       	ldi	r24, 0x00	; 0
    10d2:	90 e0       	ldi	r25, 0x00	; 0
    10d4:	89 2b       	or	r24, r25
    10d6:	29 f0       	breq	.+10     	; 0x10e2 <_Z14serialEventRunv+0x1a>
    10d8:	0e 94 b9 09 	call	0x1372	; 0x1372 <_Z17Serial0_availablev>
    10dc:	81 11       	cpse	r24, r1
    10de:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>
    10e2:	08 95       	ret

000010e4 <_ZN14HardwareSerial17_tx_udr_empty_irqEv>:
}

// Actual interrupt handlers //////////////////////////////////////////////////////////////

void HardwareSerial::_tx_udr_empty_irq(void)
{
    10e4:	fc 01       	movw	r30, r24
  // If interrupts are enabled, there must be more data in the output
  // buffer. Send the next byte
  unsigned char c = _tx_buffer[_tx_buffer_tail];
    10e6:	84 8d       	ldd	r24, Z+28	; 0x1c
    10e8:	df 01       	movw	r26, r30
    10ea:	a8 0f       	add	r26, r24
    10ec:	b1 1d       	adc	r27, r1
    10ee:	a3 5a       	subi	r26, 0xA3	; 163
    10f0:	bf 4f       	sbci	r27, 0xFF	; 255
    10f2:	2c 91       	ld	r18, X
  _tx_buffer_tail = (_tx_buffer_tail + 1) % SERIAL_TX_BUFFER_SIZE;
    10f4:	84 8d       	ldd	r24, Z+28	; 0x1c
    10f6:	90 e0       	ldi	r25, 0x00	; 0
    10f8:	01 96       	adiw	r24, 0x01	; 1
    10fa:	8f 73       	andi	r24, 0x3F	; 63
    10fc:	99 27       	eor	r25, r25
    10fe:	84 8f       	std	Z+28, r24	; 0x1c

  *_udr = c;
    1100:	a6 89       	ldd	r26, Z+22	; 0x16
    1102:	b7 89       	ldd	r27, Z+23	; 0x17
    1104:	2c 93       	st	X, r18

  // clear the TXC bit -- "can be cleared by writing a one to its bit
  // location". This makes sure flush() won't return until the bytes
  // actually got written
  sbi(*_ucsra, TXC0);
    1106:	a0 89       	ldd	r26, Z+16	; 0x10
    1108:	b1 89       	ldd	r27, Z+17	; 0x11
    110a:	8c 91       	ld	r24, X
    110c:	80 64       	ori	r24, 0x40	; 64
    110e:	8c 93       	st	X, r24

  if (_tx_buffer_head == _tx_buffer_tail) {
    1110:	93 8d       	ldd	r25, Z+27	; 0x1b
    1112:	84 8d       	ldd	r24, Z+28	; 0x1c
    1114:	98 13       	cpse	r25, r24
    1116:	06 c0       	rjmp	.+12     	; 0x1124 <_ZN14HardwareSerial17_tx_udr_empty_irqEv+0x40>
    // Buffer empty, so disable interrupts
    cbi(*_ucsrb, UDRIE0);
    1118:	02 88       	ldd	r0, Z+18	; 0x12
    111a:	f3 89       	ldd	r31, Z+19	; 0x13
    111c:	e0 2d       	mov	r30, r0
    111e:	80 81       	ld	r24, Z
    1120:	8f 7d       	andi	r24, 0xDF	; 223
    1122:	80 83       	st	Z, r24
    1124:	08 95       	ret

00001126 <_ZN14HardwareSerial5flushEv>:
  if (head >= tail) return SERIAL_TX_BUFFER_SIZE - 1 - head + tail;
  return tail - head - 1;
}

void HardwareSerial::flush()
{
    1126:	cf 93       	push	r28
    1128:	df 93       	push	r29
    112a:	ec 01       	movw	r28, r24
  // If we have never written a byte, no need to flush. This special
  // case is needed since there is no way to force the TXC (transmit
  // complete) bit to 1 during initialization
  if (!_written)
    112c:	88 8d       	ldd	r24, Y+24	; 0x18
    112e:	88 23       	and	r24, r24
    1130:	c9 f0       	breq	.+50     	; 0x1164 <_ZN14HardwareSerial5flushEv+0x3e>
    return;

  while (bit_is_set(*_ucsrb, UDRIE0) || bit_is_clear(*_ucsra, TXC0)) {
    1132:	ea 89       	ldd	r30, Y+18	; 0x12
    1134:	fb 89       	ldd	r31, Y+19	; 0x13
    1136:	80 81       	ld	r24, Z
    1138:	85 fd       	sbrc	r24, 5
    113a:	05 c0       	rjmp	.+10     	; 0x1146 <_ZN14HardwareSerial5flushEv+0x20>
    113c:	a8 89       	ldd	r26, Y+16	; 0x10
    113e:	b9 89       	ldd	r27, Y+17	; 0x11
    1140:	8c 91       	ld	r24, X
    1142:	86 fd       	sbrc	r24, 6
    1144:	0f c0       	rjmp	.+30     	; 0x1164 <_ZN14HardwareSerial5flushEv+0x3e>
    if (bit_is_clear(SREG, SREG_I) && bit_is_set(*_ucsrb, UDRIE0))
    1146:	0f b6       	in	r0, 0x3f	; 63
    1148:	07 fc       	sbrc	r0, 7
    114a:	f5 cf       	rjmp	.-22     	; 0x1136 <_ZN14HardwareSerial5flushEv+0x10>
    114c:	80 81       	ld	r24, Z
    114e:	85 ff       	sbrs	r24, 5
    1150:	f2 cf       	rjmp	.-28     	; 0x1136 <_ZN14HardwareSerial5flushEv+0x10>
	// Interrupts are globally disabled, but the DR empty
	// interrupt should be enabled, so poll the DR empty flag to
	// prevent deadlock
	if (bit_is_set(*_ucsra, UDRE0))
    1152:	a8 89       	ldd	r26, Y+16	; 0x10
    1154:	b9 89       	ldd	r27, Y+17	; 0x11
    1156:	8c 91       	ld	r24, X
    1158:	85 ff       	sbrs	r24, 5
    115a:	ed cf       	rjmp	.-38     	; 0x1136 <_ZN14HardwareSerial5flushEv+0x10>
	  _tx_udr_empty_irq();
    115c:	ce 01       	movw	r24, r28
    115e:	0e 94 72 08 	call	0x10e4	; 0x10e4 <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
    1162:	e7 cf       	rjmp	.-50     	; 0x1132 <_ZN14HardwareSerial5flushEv+0xc>
  }
  // If we get here, nothing is queued anymore (DRIE is disabled) and
  // the hardware finished tranmission (TXC is set).
}
    1164:	df 91       	pop	r29
    1166:	cf 91       	pop	r28
    1168:	08 95       	ret

0000116a <_ZN14HardwareSerial5writeEh>:

size_t HardwareSerial::write(uint8_t c)
{
    116a:	ef 92       	push	r14
    116c:	ff 92       	push	r15
    116e:	0f 93       	push	r16
    1170:	1f 93       	push	r17
    1172:	cf 93       	push	r28
    1174:	df 93       	push	r29
    1176:	ec 01       	movw	r28, r24
  _written = true;
    1178:	81 e0       	ldi	r24, 0x01	; 1
    117a:	88 8f       	std	Y+24, r24	; 0x18
  // If the buffer and the data register is empty, just write the byte
  // to the data register and be done. This shortcut helps
  // significantly improve the effective datarate at high (>
  // 500kbit/s) bitrates, where interrupt overhead becomes a slowdown.
  if (_tx_buffer_head == _tx_buffer_tail && bit_is_set(*_ucsra, UDRE0)) {
    117c:	9b 8d       	ldd	r25, Y+27	; 0x1b
    117e:	8c 8d       	ldd	r24, Y+28	; 0x1c
    1180:	98 13       	cpse	r25, r24
    1182:	05 c0       	rjmp	.+10     	; 0x118e <_ZN14HardwareSerial5writeEh+0x24>
    1184:	e8 89       	ldd	r30, Y+16	; 0x10
    1186:	f9 89       	ldd	r31, Y+17	; 0x11
    1188:	80 81       	ld	r24, Z
    118a:	85 fd       	sbrc	r24, 5
    118c:	24 c0       	rjmp	.+72     	; 0x11d6 <_ZN14HardwareSerial5writeEh+0x6c>
    118e:	f6 2e       	mov	r15, r22
    *_udr = c;
    sbi(*_ucsra, TXC0);
    return 1;
  }
  tx_buffer_index_t i = (_tx_buffer_head + 1) % SERIAL_TX_BUFFER_SIZE;
    1190:	0b 8d       	ldd	r16, Y+27	; 0x1b
    1192:	10 e0       	ldi	r17, 0x00	; 0
    1194:	0f 5f       	subi	r16, 0xFF	; 255
    1196:	1f 4f       	sbci	r17, 0xFF	; 255
    1198:	0f 73       	andi	r16, 0x3F	; 63
    119a:	11 27       	eor	r17, r17
    119c:	e0 2e       	mov	r14, r16
	
  // If the output buffer is full, there's nothing for it other than to 
  // wait for the interrupt handler to empty it a bit
  while (i == _tx_buffer_tail) {
    119e:	8c 8d       	ldd	r24, Y+28	; 0x1c
    11a0:	e8 12       	cpse	r14, r24
    11a2:	0c c0       	rjmp	.+24     	; 0x11bc <_ZN14HardwareSerial5writeEh+0x52>
    if (bit_is_clear(SREG, SREG_I)) {
    11a4:	0f b6       	in	r0, 0x3f	; 63
    11a6:	07 fc       	sbrc	r0, 7
    11a8:	fa cf       	rjmp	.-12     	; 0x119e <_ZN14HardwareSerial5writeEh+0x34>
      // Interrupts are disabled, so we'll have to poll the data
      // register empty flag ourselves. If it is set, pretend an
      // interrupt has happened and call the handler to free up
      // space for us.
      if(bit_is_set(*_ucsra, UDRE0))
    11aa:	e8 89       	ldd	r30, Y+16	; 0x10
    11ac:	f9 89       	ldd	r31, Y+17	; 0x11
    11ae:	80 81       	ld	r24, Z
    11b0:	85 ff       	sbrs	r24, 5
    11b2:	f5 cf       	rjmp	.-22     	; 0x119e <_ZN14HardwareSerial5writeEh+0x34>
	_tx_udr_empty_irq();
    11b4:	ce 01       	movw	r24, r28
    11b6:	0e 94 72 08 	call	0x10e4	; 0x10e4 <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
    11ba:	f1 cf       	rjmp	.-30     	; 0x119e <_ZN14HardwareSerial5writeEh+0x34>
    } else {
      // nop, the interrupt handler will free up space for us
    }
  }

  _tx_buffer[_tx_buffer_head] = c;
    11bc:	8b 8d       	ldd	r24, Y+27	; 0x1b
    11be:	fe 01       	movw	r30, r28
    11c0:	e8 0f       	add	r30, r24
    11c2:	f1 1d       	adc	r31, r1
    11c4:	e3 5a       	subi	r30, 0xA3	; 163
    11c6:	ff 4f       	sbci	r31, 0xFF	; 255
    11c8:	f0 82       	st	Z, r15
  _tx_buffer_head = i;
    11ca:	0b 8f       	std	Y+27, r16	; 0x1b
	
  sbi(*_ucsrb, UDRIE0);
    11cc:	ea 89       	ldd	r30, Y+18	; 0x12
    11ce:	fb 89       	ldd	r31, Y+19	; 0x13
    11d0:	80 81       	ld	r24, Z
    11d2:	80 62       	ori	r24, 0x20	; 32
    11d4:	07 c0       	rjmp	.+14     	; 0x11e4 <_ZN14HardwareSerial5writeEh+0x7a>
  // If the buffer and the data register is empty, just write the byte
  // to the data register and be done. This shortcut helps
  // significantly improve the effective datarate at high (>
  // 500kbit/s) bitrates, where interrupt overhead becomes a slowdown.
  if (_tx_buffer_head == _tx_buffer_tail && bit_is_set(*_ucsra, UDRE0)) {
    *_udr = c;
    11d6:	ee 89       	ldd	r30, Y+22	; 0x16
    11d8:	ff 89       	ldd	r31, Y+23	; 0x17
    11da:	60 83       	st	Z, r22
    sbi(*_ucsra, TXC0);
    11dc:	e8 89       	ldd	r30, Y+16	; 0x10
    11de:	f9 89       	ldd	r31, Y+17	; 0x11
    11e0:	80 81       	ld	r24, Z
    11e2:	80 64       	ori	r24, 0x40	; 64
    11e4:	80 83       	st	Z, r24
  _tx_buffer_head = i;
	
  sbi(*_ucsrb, UDRIE0);
  
  return 1;
}
    11e6:	81 e0       	ldi	r24, 0x01	; 1
    11e8:	90 e0       	ldi	r25, 0x00	; 0
    11ea:	df 91       	pop	r29
    11ec:	cf 91       	pop	r28
    11ee:	1f 91       	pop	r17
    11f0:	0f 91       	pop	r16
    11f2:	ff 90       	pop	r15
    11f4:	ef 90       	pop	r14
    11f6:	08 95       	ret

000011f8 <_ZN14HardwareSerial5beginEmh>:
}

// Public Methods //////////////////////////////////////////////////////////////

void HardwareSerial::begin(unsigned long baud, byte config)
{
    11f8:	cf 92       	push	r12
    11fa:	df 92       	push	r13
    11fc:	ef 92       	push	r14
    11fe:	ff 92       	push	r15
    1200:	1f 93       	push	r17
    1202:	cf 93       	push	r28
    1204:	df 93       	push	r29
    1206:	ec 01       	movw	r28, r24
    1208:	6a 01       	movw	r12, r20
    120a:	7b 01       	movw	r14, r22
    120c:	12 2f       	mov	r17, r18
  // Try u2x mode first
  uint16_t baud_setting = (F_CPU / 4 / baud - 1) / 2;
  *_ucsra = 1 << U2X0;
    120e:	e8 89       	ldd	r30, Y+16	; 0x10
    1210:	f9 89       	ldd	r31, Y+17	; 0x11
    1212:	82 e0       	ldi	r24, 0x02	; 2
    1214:	80 83       	st	Z, r24
  // hardcoded exception for 57600 for compatibility with the bootloader
  // shipped with the Duemilanove and previous boards and the firmware
  // on the 8U2 on the Uno and Mega 2560. Also, The baud_setting cannot
  // be > 4095, so switch back to non-u2x mode if the baud rate is too
  // low.
  if (((F_CPU == 16000000UL) && (baud == 57600)) || (baud_setting >4095))
    1216:	41 15       	cp	r20, r1
    1218:	51 4e       	sbci	r21, 0xE1	; 225
    121a:	61 05       	cpc	r22, r1
    121c:	71 05       	cpc	r23, r1
    121e:	b1 f0       	breq	.+44     	; 0x124c <_ZN14HardwareSerial5beginEmh+0x54>
// Public Methods //////////////////////////////////////////////////////////////

void HardwareSerial::begin(unsigned long baud, byte config)
{
  // Try u2x mode first
  uint16_t baud_setting = (F_CPU / 4 / baud - 1) / 2;
    1220:	60 e0       	ldi	r22, 0x00	; 0
    1222:	79 e0       	ldi	r23, 0x09	; 9
    1224:	8d e3       	ldi	r24, 0x3D	; 61
    1226:	90 e0       	ldi	r25, 0x00	; 0
    1228:	a7 01       	movw	r20, r14
    122a:	96 01       	movw	r18, r12
    122c:	0e 94 87 0d 	call	0x1b0e	; 0x1b0e <__udivmodsi4>
    1230:	da 01       	movw	r26, r20
    1232:	c9 01       	movw	r24, r18
    1234:	01 97       	sbiw	r24, 0x01	; 1
    1236:	a1 09       	sbc	r26, r1
    1238:	b1 09       	sbc	r27, r1
    123a:	b6 95       	lsr	r27
    123c:	a7 95       	ror	r26
    123e:	97 95       	ror	r25
    1240:	87 95       	ror	r24
    1242:	ac 01       	movw	r20, r24
  // hardcoded exception for 57600 for compatibility with the bootloader
  // shipped with the Duemilanove and previous boards and the firmware
  // on the 8U2 on the Uno and Mega 2560. Also, The baud_setting cannot
  // be > 4095, so switch back to non-u2x mode if the baud rate is too
  // low.
  if (((F_CPU == 16000000UL) && (baud == 57600)) || (baud_setting >4095))
    1244:	41 15       	cp	r20, r1
    1246:	80 e1       	ldi	r24, 0x10	; 16
    1248:	58 07       	cpc	r21, r24
    124a:	a8 f0       	brcs	.+42     	; 0x1276 <_ZN14HardwareSerial5beginEmh+0x7e>
  {
    *_ucsra = 0;
    124c:	e8 89       	ldd	r30, Y+16	; 0x10
    124e:	f9 89       	ldd	r31, Y+17	; 0x11
    1250:	10 82       	st	Z, r1
    baud_setting = (F_CPU / 8 / baud - 1) / 2;
    1252:	60 e8       	ldi	r22, 0x80	; 128
    1254:	74 e8       	ldi	r23, 0x84	; 132
    1256:	8e e1       	ldi	r24, 0x1E	; 30
    1258:	90 e0       	ldi	r25, 0x00	; 0
    125a:	a7 01       	movw	r20, r14
    125c:	96 01       	movw	r18, r12
    125e:	0e 94 87 0d 	call	0x1b0e	; 0x1b0e <__udivmodsi4>
    1262:	ba 01       	movw	r22, r20
    1264:	a9 01       	movw	r20, r18
    1266:	41 50       	subi	r20, 0x01	; 1
    1268:	51 09       	sbc	r21, r1
    126a:	61 09       	sbc	r22, r1
    126c:	71 09       	sbc	r23, r1
    126e:	76 95       	lsr	r23
    1270:	67 95       	ror	r22
    1272:	57 95       	ror	r21
    1274:	47 95       	ror	r20
  }

  // assign the baud_setting, a.k.a. ubrr (USART Baud Rate Register)
  *_ubrrh = baud_setting >> 8;
    1276:	ec 85       	ldd	r30, Y+12	; 0x0c
    1278:	fd 85       	ldd	r31, Y+13	; 0x0d
    127a:	50 83       	st	Z, r21
  *_ubrrl = baud_setting;
    127c:	ee 85       	ldd	r30, Y+14	; 0x0e
    127e:	ff 85       	ldd	r31, Y+15	; 0x0f
    1280:	40 83       	st	Z, r20

  _written = false;
    1282:	18 8e       	std	Y+24, r1	; 0x18

  //set the data bits, parity, and stop bits
#if defined(__AVR_ATmega8__)
  config |= 0x80; // select UCSRC register (shared with UBRRH)
#endif
  *_ucsrc = config;
    1284:	ec 89       	ldd	r30, Y+20	; 0x14
    1286:	fd 89       	ldd	r31, Y+21	; 0x15
    1288:	10 83       	st	Z, r17
  
  sbi(*_ucsrb, RXEN0);
    128a:	ea 89       	ldd	r30, Y+18	; 0x12
    128c:	fb 89       	ldd	r31, Y+19	; 0x13
    128e:	80 81       	ld	r24, Z
    1290:	80 61       	ori	r24, 0x10	; 16
    1292:	80 83       	st	Z, r24
  sbi(*_ucsrb, TXEN0);
    1294:	ea 89       	ldd	r30, Y+18	; 0x12
    1296:	fb 89       	ldd	r31, Y+19	; 0x13
    1298:	80 81       	ld	r24, Z
    129a:	88 60       	ori	r24, 0x08	; 8
    129c:	80 83       	st	Z, r24
  sbi(*_ucsrb, RXCIE0);
    129e:	ea 89       	ldd	r30, Y+18	; 0x12
    12a0:	fb 89       	ldd	r31, Y+19	; 0x13
    12a2:	80 81       	ld	r24, Z
    12a4:	80 68       	ori	r24, 0x80	; 128
    12a6:	80 83       	st	Z, r24
  cbi(*_ucsrb, UDRIE0);
    12a8:	ea 89       	ldd	r30, Y+18	; 0x12
    12aa:	fb 89       	ldd	r31, Y+19	; 0x13
    12ac:	80 81       	ld	r24, Z
    12ae:	8f 7d       	andi	r24, 0xDF	; 223
    12b0:	80 83       	st	Z, r24
}
    12b2:	df 91       	pop	r29
    12b4:	cf 91       	pop	r28
    12b6:	1f 91       	pop	r17
    12b8:	ff 90       	pop	r15
    12ba:	ef 90       	pop	r14
    12bc:	df 90       	pop	r13
    12be:	cf 90       	pop	r12
    12c0:	08 95       	ret

000012c2 <__vector_18>:
#elif defined(USART_RXC_vect)
  ISR(USART_RXC_vect) // ATmega8
#else
  #error "Don't know what the Data Received vector is called for Serial"
#endif
  {
    12c2:	1f 92       	push	r1
    12c4:	0f 92       	push	r0
    12c6:	0f b6       	in	r0, 0x3f	; 63
    12c8:	0f 92       	push	r0
    12ca:	11 24       	eor	r1, r1
    12cc:	2f 93       	push	r18
    12ce:	8f 93       	push	r24
    12d0:	9f 93       	push	r25
    12d2:	ef 93       	push	r30
    12d4:	ff 93       	push	r31

// Actual interrupt handlers //////////////////////////////////////////////////////////////

void HardwareSerial::_rx_complete_irq(void)
{
  if (bit_is_clear(*_ucsra, UPE0)) {
    12d6:	e0 91 eb 04 	lds	r30, 0x04EB	; 0x8004eb <Serial+0x10>
    12da:	f0 91 ec 04 	lds	r31, 0x04EC	; 0x8004ec <Serial+0x11>
    12de:	80 81       	ld	r24, Z
    12e0:	e0 91 f1 04 	lds	r30, 0x04F1	; 0x8004f1 <Serial+0x16>
    12e4:	f0 91 f2 04 	lds	r31, 0x04F2	; 0x8004f2 <Serial+0x17>
    12e8:	82 fd       	sbrc	r24, 2
    12ea:	12 c0       	rjmp	.+36     	; 0x1310 <__vector_18+0x4e>
    // No Parity error, read byte and store it in the buffer if there is
    // room
    unsigned char c = *_udr;
    12ec:	90 81       	ld	r25, Z
    rx_buffer_index_t i = (unsigned int)(_rx_buffer_head + 1) % SERIAL_RX_BUFFER_SIZE;
    12ee:	80 91 f4 04 	lds	r24, 0x04F4	; 0x8004f4 <Serial+0x19>
    12f2:	8f 5f       	subi	r24, 0xFF	; 255
    12f4:	8f 73       	andi	r24, 0x3F	; 63

    // if we should be storing the received character into the location
    // just before the tail (meaning that the head would advance to the
    // current location of the tail), we're about to overflow the buffer
    // and so we don't write the character or advance the head.
    if (i != _rx_buffer_tail) {
    12f6:	20 91 f5 04 	lds	r18, 0x04F5	; 0x8004f5 <Serial+0x1a>
    12fa:	82 17       	cp	r24, r18
    12fc:	51 f0       	breq	.+20     	; 0x1312 <__vector_18+0x50>
      _rx_buffer[_rx_buffer_head] = c;
    12fe:	e0 91 f4 04 	lds	r30, 0x04F4	; 0x8004f4 <Serial+0x19>
    1302:	f0 e0       	ldi	r31, 0x00	; 0
    1304:	e5 52       	subi	r30, 0x25	; 37
    1306:	fb 4f       	sbci	r31, 0xFB	; 251
    1308:	95 8f       	std	Z+29, r25	; 0x1d
      _rx_buffer_head = i;
    130a:	80 93 f4 04 	sts	0x04F4, r24	; 0x8004f4 <Serial+0x19>
    130e:	01 c0       	rjmp	.+2      	; 0x1312 <__vector_18+0x50>
    }
  } else {
    // Parity error, read byte but discard it
    *_udr;
    1310:	80 81       	ld	r24, Z
    Serial._rx_complete_irq();
  }
    1312:	ff 91       	pop	r31
    1314:	ef 91       	pop	r30
    1316:	9f 91       	pop	r25
    1318:	8f 91       	pop	r24
    131a:	2f 91       	pop	r18
    131c:	0f 90       	pop	r0
    131e:	0f be       	out	0x3f, r0	; 63
    1320:	0f 90       	pop	r0
    1322:	1f 90       	pop	r1
    1324:	18 95       	reti

00001326 <__vector_19>:
#elif defined(USART_UDRE_vect)
ISR(USART_UDRE_vect)
#else
  #error "Don't know what the Data Register Empty vector is called for Serial"
#endif
{
    1326:	1f 92       	push	r1
    1328:	0f 92       	push	r0
    132a:	0f b6       	in	r0, 0x3f	; 63
    132c:	0f 92       	push	r0
    132e:	11 24       	eor	r1, r1
    1330:	2f 93       	push	r18
    1332:	3f 93       	push	r19
    1334:	4f 93       	push	r20
    1336:	5f 93       	push	r21
    1338:	6f 93       	push	r22
    133a:	7f 93       	push	r23
    133c:	8f 93       	push	r24
    133e:	9f 93       	push	r25
    1340:	af 93       	push	r26
    1342:	bf 93       	push	r27
    1344:	ef 93       	push	r30
    1346:	ff 93       	push	r31
  Serial._tx_udr_empty_irq();
    1348:	8b ed       	ldi	r24, 0xDB	; 219
    134a:	94 e0       	ldi	r25, 0x04	; 4
    134c:	0e 94 72 08 	call	0x10e4	; 0x10e4 <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
}
    1350:	ff 91       	pop	r31
    1352:	ef 91       	pop	r30
    1354:	bf 91       	pop	r27
    1356:	af 91       	pop	r26
    1358:	9f 91       	pop	r25
    135a:	8f 91       	pop	r24
    135c:	7f 91       	pop	r23
    135e:	6f 91       	pop	r22
    1360:	5f 91       	pop	r21
    1362:	4f 91       	pop	r20
    1364:	3f 91       	pop	r19
    1366:	2f 91       	pop	r18
    1368:	0f 90       	pop	r0
    136a:	0f be       	out	0x3f, r0	; 63
    136c:	0f 90       	pop	r0
    136e:	1f 90       	pop	r1
    1370:	18 95       	reti

00001372 <_Z17Serial0_availablev>:
#endif

// Function that can be weakly referenced by serialEventRun to prevent
// pulling in this file if it's not otherwise used.
bool Serial0_available() {
  return Serial.available();
    1372:	8b ed       	ldi	r24, 0xDB	; 219
    1374:	94 e0       	ldi	r25, 0x04	; 4
    1376:	0e 94 27 08 	call	0x104e	; 0x104e <_ZN14HardwareSerial9availableEv>
    137a:	21 e0       	ldi	r18, 0x01	; 1
    137c:	89 2b       	or	r24, r25
    137e:	09 f4       	brne	.+2      	; 0x1382 <_Z17Serial0_availablev+0x10>
    1380:	20 e0       	ldi	r18, 0x00	; 0
}
    1382:	82 2f       	mov	r24, r18
    1384:	08 95       	ret

00001386 <_GLOBAL__sub_I___vector_18>:
    size_t printNumber(unsigned long, uint8_t);
    size_t printFloat(double, uint8_t);
  protected:
    void setWriteError(int err = 1) { write_error = err; }
  public:
    Print() : write_error(0) {}
    1386:	eb ed       	ldi	r30, 0xDB	; 219
    1388:	f4 e0       	ldi	r31, 0x04	; 4
    138a:	13 82       	std	Z+3, r1	; 0x03
    138c:	12 82       	std	Z+2, r1	; 0x02
  public:
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;

    Stream() {_timeout=1000;}
    138e:	88 ee       	ldi	r24, 0xE8	; 232
    1390:	93 e0       	ldi	r25, 0x03	; 3
    1392:	a0 e0       	ldi	r26, 0x00	; 0
    1394:	b0 e0       	ldi	r27, 0x00	; 0
    1396:	84 83       	std	Z+4, r24	; 0x04
    1398:	95 83       	std	Z+5, r25	; 0x05
    139a:	a6 83       	std	Z+6, r26	; 0x06
    139c:	b7 83       	std	Z+7, r27	; 0x07
  volatile uint8_t *ucsrc, volatile uint8_t *udr) :
    _ubrrh(ubrrh), _ubrrl(ubrrl),
    _ucsra(ucsra), _ucsrb(ucsrb), _ucsrc(ucsrc),
    _udr(udr),
    _rx_buffer_head(0), _rx_buffer_tail(0),
    _tx_buffer_head(0), _tx_buffer_tail(0)
    139e:	88 e8       	ldi	r24, 0x88	; 136
    13a0:	94 e0       	ldi	r25, 0x04	; 4
    13a2:	91 83       	std	Z+1, r25	; 0x01
    13a4:	80 83       	st	Z, r24
    13a6:	85 ec       	ldi	r24, 0xC5	; 197
    13a8:	90 e0       	ldi	r25, 0x00	; 0
    13aa:	95 87       	std	Z+13, r25	; 0x0d
    13ac:	84 87       	std	Z+12, r24	; 0x0c
    13ae:	84 ec       	ldi	r24, 0xC4	; 196
    13b0:	90 e0       	ldi	r25, 0x00	; 0
    13b2:	97 87       	std	Z+15, r25	; 0x0f
    13b4:	86 87       	std	Z+14, r24	; 0x0e
    13b6:	80 ec       	ldi	r24, 0xC0	; 192
    13b8:	90 e0       	ldi	r25, 0x00	; 0
    13ba:	91 8b       	std	Z+17, r25	; 0x11
    13bc:	80 8b       	std	Z+16, r24	; 0x10
    13be:	81 ec       	ldi	r24, 0xC1	; 193
    13c0:	90 e0       	ldi	r25, 0x00	; 0
    13c2:	93 8b       	std	Z+19, r25	; 0x13
    13c4:	82 8b       	std	Z+18, r24	; 0x12
    13c6:	82 ec       	ldi	r24, 0xC2	; 194
    13c8:	90 e0       	ldi	r25, 0x00	; 0
    13ca:	95 8b       	std	Z+21, r25	; 0x15
    13cc:	84 8b       	std	Z+20, r24	; 0x14
    13ce:	86 ec       	ldi	r24, 0xC6	; 198
    13d0:	90 e0       	ldi	r25, 0x00	; 0
    13d2:	97 8b       	std	Z+23, r25	; 0x17
    13d4:	86 8b       	std	Z+22, r24	; 0x16
    13d6:	11 8e       	std	Z+25, r1	; 0x19
    13d8:	12 8e       	std	Z+26, r1	; 0x1a
    13da:	13 8e       	std	Z+27, r1	; 0x1b
    13dc:	14 8e       	std	Z+28, r1	; 0x1c
    13de:	08 95       	ret

000013e0 <_ZN5Print5writeEPKhj>:
  return print((long) n, base);
}

size_t Print::print(unsigned int n, int base)
{
  return print((unsigned long) n, base);
    13e0:	cf 92       	push	r12
    13e2:	df 92       	push	r13
    13e4:	ef 92       	push	r14
    13e6:	ff 92       	push	r15
    13e8:	0f 93       	push	r16
    13ea:	1f 93       	push	r17
    13ec:	cf 93       	push	r28
    13ee:	df 93       	push	r29
    13f0:	6c 01       	movw	r12, r24
    13f2:	7a 01       	movw	r14, r20
    13f4:	8b 01       	movw	r16, r22
    13f6:	c0 e0       	ldi	r28, 0x00	; 0
    13f8:	d0 e0       	ldi	r29, 0x00	; 0
    13fa:	ce 15       	cp	r28, r14
    13fc:	df 05       	cpc	r29, r15
    13fe:	89 f0       	breq	.+34     	; 0x1422 <_ZN5Print5writeEPKhj+0x42>
    1400:	d8 01       	movw	r26, r16
    1402:	6d 91       	ld	r22, X+
    1404:	8d 01       	movw	r16, r26
    1406:	d6 01       	movw	r26, r12
    1408:	ed 91       	ld	r30, X+
    140a:	fc 91       	ld	r31, X
    140c:	01 90       	ld	r0, Z+
    140e:	f0 81       	ld	r31, Z
    1410:	e0 2d       	mov	r30, r0
    1412:	c6 01       	movw	r24, r12
    1414:	09 95       	icall
    1416:	89 2b       	or	r24, r25
    1418:	11 f4       	brne	.+4      	; 0x141e <_ZN5Print5writeEPKhj+0x3e>
    141a:	7e 01       	movw	r14, r28
    141c:	02 c0       	rjmp	.+4      	; 0x1422 <_ZN5Print5writeEPKhj+0x42>
    141e:	21 96       	adiw	r28, 0x01	; 1
    1420:	ec cf       	rjmp	.-40     	; 0x13fa <_ZN5Print5writeEPKhj+0x1a>
    1422:	c7 01       	movw	r24, r14
    1424:	df 91       	pop	r29
    1426:	cf 91       	pop	r28
    1428:	1f 91       	pop	r17
    142a:	0f 91       	pop	r16
    142c:	ff 90       	pop	r15
    142e:	ef 90       	pop	r14
    1430:	df 90       	pop	r13
    1432:	cf 90       	pop	r12
    1434:	08 95       	ret

00001436 <_ZN5Print5writeEPKc>:
    1436:	61 15       	cp	r22, r1
    1438:	71 05       	cpc	r23, r1
    143a:	79 f0       	breq	.+30     	; 0x145a <_ZN5Print5writeEPKc+0x24>
    143c:	fb 01       	movw	r30, r22
    143e:	01 90       	ld	r0, Z+
    1440:	00 20       	and	r0, r0
    1442:	e9 f7       	brne	.-6      	; 0x143e <_ZN5Print5writeEPKc+0x8>
    1444:	31 97       	sbiw	r30, 0x01	; 1
    1446:	af 01       	movw	r20, r30
    1448:	46 1b       	sub	r20, r22
    144a:	57 0b       	sbc	r21, r23
    144c:	dc 01       	movw	r26, r24
    144e:	ed 91       	ld	r30, X+
    1450:	fc 91       	ld	r31, X
    1452:	02 80       	ldd	r0, Z+2	; 0x02
    1454:	f3 81       	ldd	r31, Z+3	; 0x03
    1456:	e0 2d       	mov	r30, r0
    1458:	09 94       	ijmp
    145a:	80 e0       	ldi	r24, 0x00	; 0
    145c:	90 e0       	ldi	r25, 0x00	; 0
    145e:	08 95       	ret

00001460 <_ZN5Print5printEPKc>:
    1460:	0c 94 1b 0a 	jmp	0x1436	; 0x1436 <_ZN5Print5writeEPKc>

00001464 <_ZN5Print7printlnEv>:
    1464:	63 ed       	ldi	r22, 0xD3	; 211
    1466:	71 e0       	ldi	r23, 0x01	; 1
    1468:	0c 94 1b 0a 	jmp	0x1436	; 0x1436 <_ZN5Print5writeEPKc>

0000146c <_ZN5Print7printlnEPKc>:
    146c:	0f 93       	push	r16
    146e:	1f 93       	push	r17
    1470:	cf 93       	push	r28
    1472:	df 93       	push	r29
    1474:	ec 01       	movw	r28, r24
    1476:	0e 94 1b 0a 	call	0x1436	; 0x1436 <_ZN5Print5writeEPKc>
    147a:	8c 01       	movw	r16, r24
    147c:	ce 01       	movw	r24, r28
    147e:	0e 94 32 0a 	call	0x1464	; 0x1464 <_ZN5Print7printlnEv>
    1482:	80 0f       	add	r24, r16
    1484:	91 1f       	adc	r25, r17
    1486:	df 91       	pop	r29
    1488:	cf 91       	pop	r28
    148a:	1f 91       	pop	r17
    148c:	0f 91       	pop	r16
    148e:	08 95       	ret

00001490 <_ZN5Print11printNumberEmh>:
    1490:	4f 92       	push	r4
    1492:	5f 92       	push	r5
    1494:	6f 92       	push	r6
    1496:	7f 92       	push	r7
    1498:	ef 92       	push	r14
    149a:	ff 92       	push	r15
    149c:	0f 93       	push	r16
    149e:	1f 93       	push	r17
    14a0:	cf 93       	push	r28
    14a2:	df 93       	push	r29
    14a4:	cd b7       	in	r28, 0x3d	; 61
    14a6:	de b7       	in	r29, 0x3e	; 62
    14a8:	a1 97       	sbiw	r28, 0x21	; 33
    14aa:	0f b6       	in	r0, 0x3f	; 63
    14ac:	f8 94       	cli
    14ae:	de bf       	out	0x3e, r29	; 62
    14b0:	0f be       	out	0x3f, r0	; 63
    14b2:	cd bf       	out	0x3d, r28	; 61
    14b4:	7c 01       	movw	r14, r24
    14b6:	fa 01       	movw	r30, r20
    14b8:	cb 01       	movw	r24, r22
    14ba:	19 a2       	std	Y+33, r1	; 0x21
    14bc:	22 30       	cpi	r18, 0x02	; 2
    14be:	08 f4       	brcc	.+2      	; 0x14c2 <_ZN5Print11printNumberEmh+0x32>
    14c0:	2a e0       	ldi	r18, 0x0A	; 10
    14c2:	8e 01       	movw	r16, r28
    14c4:	0f 5d       	subi	r16, 0xDF	; 223
    14c6:	1f 4f       	sbci	r17, 0xFF	; 255
    14c8:	42 2e       	mov	r4, r18
    14ca:	51 2c       	mov	r5, r1
    14cc:	61 2c       	mov	r6, r1
    14ce:	71 2c       	mov	r7, r1
    14d0:	bf 01       	movw	r22, r30
    14d2:	a3 01       	movw	r20, r6
    14d4:	92 01       	movw	r18, r4
    14d6:	0e 94 87 0d 	call	0x1b0e	; 0x1b0e <__udivmodsi4>
    14da:	f9 01       	movw	r30, r18
    14dc:	ca 01       	movw	r24, r20
    14de:	01 50       	subi	r16, 0x01	; 1
    14e0:	11 09       	sbc	r17, r1
    14e2:	6a 30       	cpi	r22, 0x0A	; 10
    14e4:	14 f4       	brge	.+4      	; 0x14ea <_ZN5Print11printNumberEmh+0x5a>
    14e6:	60 5d       	subi	r22, 0xD0	; 208
    14e8:	01 c0       	rjmp	.+2      	; 0x14ec <_ZN5Print11printNumberEmh+0x5c>
    14ea:	69 5c       	subi	r22, 0xC9	; 201
    14ec:	d8 01       	movw	r26, r16
    14ee:	6c 93       	st	X, r22
    14f0:	23 2b       	or	r18, r19
    14f2:	24 2b       	or	r18, r20
    14f4:	25 2b       	or	r18, r21
    14f6:	61 f7       	brne	.-40     	; 0x14d0 <_ZN5Print11printNumberEmh+0x40>
    14f8:	b8 01       	movw	r22, r16
    14fa:	c7 01       	movw	r24, r14
    14fc:	0e 94 1b 0a 	call	0x1436	; 0x1436 <_ZN5Print5writeEPKc>
    1500:	a1 96       	adiw	r28, 0x21	; 33
    1502:	0f b6       	in	r0, 0x3f	; 63
    1504:	f8 94       	cli
    1506:	de bf       	out	0x3e, r29	; 62
    1508:	0f be       	out	0x3f, r0	; 63
    150a:	cd bf       	out	0x3d, r28	; 61
    150c:	df 91       	pop	r29
    150e:	cf 91       	pop	r28
    1510:	1f 91       	pop	r17
    1512:	0f 91       	pop	r16
    1514:	ff 90       	pop	r15
    1516:	ef 90       	pop	r14
    1518:	7f 90       	pop	r7
    151a:	6f 90       	pop	r6
    151c:	5f 90       	pop	r5
    151e:	4f 90       	pop	r4
    1520:	08 95       	ret

00001522 <_ZN5Print5printEmi>:
    1522:	21 15       	cp	r18, r1
    1524:	31 05       	cpc	r19, r1
    1526:	41 f4       	brne	.+16     	; 0x1538 <_ZN5Print5printEmi+0x16>
    1528:	dc 01       	movw	r26, r24
    152a:	ed 91       	ld	r30, X+
    152c:	fc 91       	ld	r31, X
    152e:	01 90       	ld	r0, Z+
    1530:	f0 81       	ld	r31, Z
    1532:	e0 2d       	mov	r30, r0
    1534:	64 2f       	mov	r22, r20
    1536:	09 94       	ijmp
    1538:	0c 94 48 0a 	jmp	0x1490	; 0x1490 <_ZN5Print11printNumberEmh>

0000153c <_ZN5Print5printEhi>:
    153c:	9a 01       	movw	r18, r20
    153e:	46 2f       	mov	r20, r22
    1540:	50 e0       	ldi	r21, 0x00	; 0
    1542:	60 e0       	ldi	r22, 0x00	; 0
    1544:	70 e0       	ldi	r23, 0x00	; 0
    1546:	0c 94 91 0a 	jmp	0x1522	; 0x1522 <_ZN5Print5printEmi>

0000154a <_ZN5Print7printlnEji>:
  n += println();
  return n;
}

size_t Print::println(unsigned int num, int base)
{
    154a:	0f 93       	push	r16
    154c:	1f 93       	push	r17
    154e:	cf 93       	push	r28
    1550:	df 93       	push	r29
    1552:	ec 01       	movw	r28, r24
    1554:	9a 01       	movw	r18, r20
  return print((long) n, base);
}

size_t Print::print(unsigned int n, int base)
{
  return print((unsigned long) n, base);
    1556:	ab 01       	movw	r20, r22
    1558:	60 e0       	ldi	r22, 0x00	; 0
    155a:	70 e0       	ldi	r23, 0x00	; 0
    155c:	0e 94 91 0a 	call	0x1522	; 0x1522 <_ZN5Print5printEmi>
    1560:	8c 01       	movw	r16, r24
}

size_t Print::println(unsigned int num, int base)
{
  size_t n = print(num, base);
  n += println();
    1562:	ce 01       	movw	r24, r28
    1564:	0e 94 32 0a 	call	0x1464	; 0x1464 <_ZN5Print7printlnEv>
  return n;
}
    1568:	80 0f       	add	r24, r16
    156a:	91 1f       	adc	r25, r17
    156c:	df 91       	pop	r29
    156e:	cf 91       	pop	r28
    1570:	1f 91       	pop	r17
    1572:	0f 91       	pop	r16
    1574:	08 95       	ret

00001576 <yield>:
 * libraries or sketches that supports cooperative threads.
 *
 * Its defined as a weak symbol and it can be redefined to implement a
 * real cooperative scheduler.
 */
static void __empty() {
    1576:	08 95       	ret

00001578 <StartOS>:
    osEE_end_primitive(flags);
  }
#endif /* OSEE_HAS_ERRORHOOK */

  return ev;
}
    1578:	0f 93       	push	r16
    157a:	1f 93       	push	r17
    157c:	cf 93       	push	r28
    157e:	df 93       	push	r29
    1580:	00 d0       	rcall	.+0      	; 0x1582 <StartOS+0xa>
    1582:	cd b7       	in	r28, 0x3d	; 61
    1584:	de b7       	in	r29, 0x3e	; 62
    1586:	00 91 74 01 	lds	r16, 0x0174	; 0x800174 <CDB>
    158a:	10 91 75 01 	lds	r17, 0x0175	; 0x800175 <CDB+0x1>
    158e:	9f b7       	in	r25, 0x3f	; 63
    1590:	f8 94       	cli
    1592:	f8 01       	movw	r30, r16
    1594:	20 85       	ldd	r18, Z+8	; 0x08
    1596:	31 85       	ldd	r19, Z+9	; 0x09
    1598:	23 2b       	or	r18, r19
    159a:	e9 f4       	brne	.+58     	; 0x15d6 <StartOS+0x5e>
    159c:	28 2f       	mov	r18, r24
    159e:	8a e5       	ldi	r24, 0x5A	; 90
    15a0:	9c e0       	ldi	r25, 0x0C	; 12
    15a2:	9a 83       	std	Y+2, r25	; 0x02
    15a4:	89 83       	std	Y+1, r24	; 0x01
    15a6:	80 91 78 01 	lds	r24, 0x0178	; 0x800178 <CDB+0x4>
    15aa:	90 91 79 01 	lds	r25, 0x0179	; 0x800179 <CDB+0x5>
    15ae:	22 87       	std	Z+10, r18	; 0x0a
    15b0:	22 e0       	ldi	r18, 0x02	; 2
    15b2:	30 e0       	ldi	r19, 0x00	; 0
    15b4:	31 87       	std	Z+9, r19	; 0x09
    15b6:	20 87       	std	Z+8, r18	; 0x08
    15b8:	fc 01       	movw	r30, r24
    15ba:	62 81       	ldd	r22, Z+2	; 0x02
    15bc:	73 81       	ldd	r23, Z+3	; 0x03
    15be:	ab 01       	movw	r20, r22
    15c0:	0e 94 f6 00 	call	0x1ec	; 0x1ec <osEE_hal_save_ctx_and_ready2stacked>
    15c4:	f8 01       	movw	r30, r16
    15c6:	80 85       	ldd	r24, Z+8	; 0x08
    15c8:	91 85       	ldd	r25, Z+9	; 0x09
    15ca:	02 97       	sbiw	r24, 0x02	; 2
    15cc:	09 f4       	brne	.+2      	; 0x15d0 <StartOS+0x58>
    15ce:	78 94       	sei
    15d0:	80 e0       	ldi	r24, 0x00	; 0
    15d2:	90 e0       	ldi	r25, 0x00	; 0
    15d4:	03 c0       	rjmp	.+6      	; 0x15dc <StartOS+0x64>
    15d6:	9f bf       	out	0x3f, r25	; 63
    15d8:	81 e0       	ldi	r24, 0x01	; 1
    15da:	90 e0       	ldi	r25, 0x00	; 0
    15dc:	0f 90       	pop	r0
    15de:	0f 90       	pop	r0
    15e0:	df 91       	pop	r29
    15e2:	cf 91       	pop	r28
    15e4:	1f 91       	pop	r17
    15e6:	0f 91       	pop	r16
    15e8:	08 95       	ret

000015ea <ActivateTask>:
    15ea:	cf 93       	push	r28
    15ec:	90 e0       	ldi	r25, 0x00	; 0
    15ee:	20 91 70 01 	lds	r18, 0x0170	; 0x800170 <KDB+0x6>
    15f2:	30 91 71 01 	lds	r19, 0x0171	; 0x800171 <KDB+0x7>
    15f6:	82 17       	cp	r24, r18
    15f8:	93 07       	cpc	r25, r19
    15fa:	d8 f4       	brcc	.+54     	; 0x1632 <ActivateTask+0x48>
    15fc:	e0 91 6c 01 	lds	r30, 0x016C	; 0x80016c <KDB+0x2>
    1600:	f0 91 6d 01 	lds	r31, 0x016D	; 0x80016d <KDB+0x3>
    1604:	88 0f       	add	r24, r24
    1606:	99 1f       	adc	r25, r25
    1608:	e8 0f       	add	r30, r24
    160a:	f9 1f       	adc	r31, r25
    160c:	40 81       	ld	r20, Z
    160e:	51 81       	ldd	r21, Z+1	; 0x01
    1610:	fa 01       	movw	r30, r20
    1612:	87 81       	ldd	r24, Z+7	; 0x07
    1614:	90 85       	ldd	r25, Z+8	; 0x08
    1616:	02 97       	sbiw	r24, 0x02	; 2
    1618:	60 f4       	brcc	.+24     	; 0x1632 <ActivateTask+0x48>
    161a:	cf b7       	in	r28, 0x3f	; 63
    161c:	f8 94       	cli
    161e:	21 e0       	ldi	r18, 0x01	; 1
    1620:	30 e0       	ldi	r19, 0x00	; 0
    1622:	64 e7       	ldi	r22, 0x74	; 116
    1624:	71 e0       	ldi	r23, 0x01	; 1
    1626:	8a e6       	ldi	r24, 0x6A	; 106
    1628:	91 e0       	ldi	r25, 0x01	; 1
    162a:	0e 94 77 0b 	call	0x16ee	; 0x16ee <osEE_scheduler_task_activated>
    162e:	cf bf       	out	0x3f, r28	; 63
    1630:	02 c0       	rjmp	.+4      	; 0x1636 <ActivateTask+0x4c>
    1632:	83 e0       	ldi	r24, 0x03	; 3
    1634:	90 e0       	ldi	r25, 0x00	; 0
    1636:	cf 91       	pop	r28
    1638:	08 95       	ret

0000163a <TerminateTask>:
  CONSTP2VAR(OsEE_CDB, OS_APPL_DATA, AUTOMATIC)
    p_cdb       = osEE_get_curr_core();
  CONSTP2VAR(OsEE_CCB, OS_APPL_DATA, AUTOMATIC)
    p_ccb       = p_cdb->p_ccb;
  CONSTP2VAR(OsEE_TDB, OS_APPL_DATA, AUTOMATIC)
    p_curr      = p_ccb->p_curr;
    163a:	e0 91 74 01 	lds	r30, 0x0174	; 0x800174 <CDB>
    163e:	f0 91 75 01 	lds	r31, 0x0175	; 0x800175 <CDB+0x1>
    1642:	01 90       	ld	r0, Z+
    1644:	f0 81       	ld	r31, Z
    1646:	e0 2d       	mov	r30, r0
}

/* Suspend/Resume Interrupts */
OSEE_STATIC_INLINE OsEE_reg osEE_hal_suspendIRQ ( void )
{
  register OsEE_reg sr = SREG;
    1648:	8f b7       	in	r24, 0x3f	; 63
 =============================================================================*/

/* Disable/Enable Interrupts */
OSEE_STATIC_INLINE void osEE_hal_disableIRQ( void )
{
  cli();
    164a:	f8 94       	cli
(
  P2VAR(OsEE_HDB, AUTOMATIC, OS_APPL_DATA)  p_to_term,
  VAR(OsEE_kernel_cb, AUTOMATIC)            kernel_cb
)
{
  osEE_hal_terminate_ctx(p_to_term->p_scb, kernel_cb);
    164c:	6c e2       	ldi	r22, 0x2C	; 44
    164e:	7b e0       	ldi	r23, 0x0B	; 11
    1650:	82 81       	ldd	r24, Z+2	; 0x02
    1652:	93 81       	ldd	r25, Z+3	; 0x03
    1654:	0e 94 16 01 	call	0x22c	; 0x22c <osEE_hal_terminate_ctx>

00001658 <osEE_scheduler_task_end>:
FUNC(void, OS_CODE)
  osEE_scheduler_task_end
(
  void
)
{
    1658:	cf 93       	push	r28
    165a:	df 93       	push	r29
    165c:	00 d0       	rcall	.+0      	; 0x165e <osEE_scheduler_task_end+0x6>
    165e:	cd b7       	in	r28, 0x3d	; 61
    1660:	de b7       	in	r29, 0x3e	; 62
  P2VAR(OsEE_TDB, AUTOMATIC, OS_APPL_DATA)  p_to;
  P2VAR(OsEE_TDB, AUTOMATIC, OS_APPL_DATA)  p_from;

  p_to = osEE_scheduler_task_terminated(osEE_get_kernel(), osEE_get_curr_core(),
    1662:	ae 01       	movw	r20, r28
    1664:	4f 5f       	subi	r20, 0xFF	; 255
    1666:	5f 4f       	sbci	r21, 0xFF	; 255
    1668:	64 e7       	ldi	r22, 0x74	; 116
    166a:	71 e0       	ldi	r23, 0x01	; 1
    166c:	8a e6       	ldi	r24, 0x6A	; 106
    166e:	91 e0       	ldi	r25, 0x01	; 1
    1670:	0e 94 de 0b 	call	0x17bc	; 0x17bc <osEE_scheduler_task_terminated>
(
  P2VAR(OsEE_TDB, AUTOMATIC, OS_APPL_CONST) p_from,
  P2VAR(OsEE_TDB, AUTOMATIC, OS_APPL_CONST) p_to
)
{
  osEE_change_context_from_task_end(p_from, p_to);
    1674:	bc 01       	movw	r22, r24
    1676:	89 81       	ldd	r24, Y+1	; 0x01
    1678:	9a 81       	ldd	r25, Y+2	; 0x02
    167a:	0e 94 78 0c 	call	0x18f0	; 0x18f0 <osEE_change_context_from_task_end>
  if (p_from->task_type != OSEE_TASK_TYPE_ISR2) {
    osEE_change_context_from_task_end(p_from, p_to);
  } else {
    osEE_change_context_from_isr2_end(p_from, p_to);
  }
}
    167e:	0f 90       	pop	r0
    1680:	0f 90       	pop	r0
    1682:	df 91       	pop	r29
    1684:	cf 91       	pop	r28
    1686:	08 95       	ret

00001688 <osEE_scheduler_task_wrapper_restore>:
FUNC(void, OS_CODE)
  osEE_scheduler_task_wrapper_restore
(
  P2VAR(OsEE_TDB, AUTOMATIC, OS_APPL_DATA)  p_tdb_to
)
{
    1688:	08 95       	ret

0000168a <osEE_scheduler_task_wrapper_run>:
FUNC(void, OS_CODE)
  osEE_scheduler_task_wrapper_run
(
  P2VAR(OsEE_TDB, AUTOMATIC, OS_APPL_DATA)  p_tdb_to
)
{
    168a:	ec 01       	movw	r28, r24
  CONST(TaskPrio, AUTOMATIC) task_prio = p_tdb_to->p_tcb->current_prio;
    168c:	ec 81       	ldd	r30, Y+4	; 0x04
    168e:	fd 81       	ldd	r31, Y+5	; 0x05
  osEE_scheduler_task_wrapper_restore(p_tdb_to);

  if (task_prio < OSEE_ISR_ALL_PRIO) {
    1690:	81 81       	ldd	r24, Z+1	; 0x01
    1692:	8f 3f       	cpi	r24, 0xFF	; 255
    1694:	09 f0       	breq	.+2      	; 0x1698 <osEE_scheduler_task_wrapper_run+0xe>
  cli();
}

OSEE_STATIC_INLINE void osEE_hal_enableIRQ( void )
{
  sei();
    1696:	78 94       	sei
    /* Set-up IPL at current TASK level in addition to enable IRQ */
    osEE_hal_set_ipl(task_prio);
    osEE_hal_enableIRQ();
  }
  p_tdb_to->task_func();
    1698:	e9 85       	ldd	r30, Y+9	; 0x09
    169a:	fa 85       	ldd	r31, Y+10	; 0x0a
    169c:	09 95       	icall
}

/* Suspend/Resume Interrupts */
OSEE_STATIC_INLINE OsEE_reg osEE_hal_suspendIRQ ( void )
{
  register OsEE_reg sr = SREG;
    169e:	8f b7       	in	r24, 0x3f	; 63
 =============================================================================*/

/* Disable/Enable Interrupts */
OSEE_STATIC_INLINE void osEE_hal_disableIRQ( void )
{
  cli();
    16a0:	f8 94       	cli
    16a2:	6c e2       	ldi	r22, 0x2C	; 44
    16a4:	7b e0       	ldi	r23, 0x0B	; 11
    16a6:	8a 81       	ldd	r24, Y+2	; 0x02
    16a8:	9b 81       	ldd	r25, Y+3	; 0x03
    16aa:	0e 94 16 01 	call	0x22c	; 0x22c <osEE_hal_terminate_ctx>

000016ae <osEE_idle_hook_wrapper>:
FUNC(void, OS_CODE)
  osEE_idle_hook_wrapper
(
  void
)
{
    16ae:	0f 93       	push	r16
    16b0:	1f 93       	push	r17
    16b2:	cf 93       	push	r28
    16b4:	df 93       	push	r29
  (void)osEE_scheduler_task_preemption_point(osEE_get_kernel(), p_cdb);
  osEE_end_primitive(flags);
#endif /* !OSEE_STARTOS_RETURN && !OSEE_API_DYNAMIC && !OSEE_HAS_AUTOSTART_TASK */
  while (p_cdb->p_ccb->os_status == OSEE_KERNEL_STARTED) {
#if (defined(OSEE_HAS_IDLEHOOK)) || (defined(OSEE_API_DYNAMIC))
    CONST(TaskFunc, AUTOMATIC) p_idle_hook = p_cdb->p_idle_hook;
    16b6:	c0 91 76 01 	lds	r28, 0x0176	; 0x800176 <CDB+0x2>
    16ba:	d0 91 77 01 	lds	r29, 0x0177	; 0x800177 <CDB+0x3>
  /* Schedule Here: Autostart TASKs */
  CONST(OsEE_reg, AUTOMATIC) flags = osEE_begin_primitive();
  (void)osEE_scheduler_task_preemption_point(osEE_get_kernel(), p_cdb);
  osEE_end_primitive(flags);
#endif /* !OSEE_STARTOS_RETURN && !OSEE_API_DYNAMIC && !OSEE_HAS_AUTOSTART_TASK */
  while (p_cdb->p_ccb->os_status == OSEE_KERNEL_STARTED) {
    16be:	00 91 74 01 	lds	r16, 0x0174	; 0x800174 <CDB>
    16c2:	10 91 75 01 	lds	r17, 0x0175	; 0x800175 <CDB+0x1>
    16c6:	f8 01       	movw	r30, r16
    16c8:	80 85       	ldd	r24, Z+8	; 0x08
    16ca:	91 85       	ldd	r25, Z+9	; 0x09
    16cc:	02 97       	sbiw	r24, 0x02	; 2
    16ce:	29 f4       	brne	.+10     	; 0x16da <osEE_idle_hook_wrapper+0x2c>
#if (defined(OSEE_HAS_IDLEHOOK)) || (defined(OSEE_API_DYNAMIC))
    CONST(TaskFunc, AUTOMATIC) p_idle_hook = p_cdb->p_idle_hook;
    if (p_idle_hook != NULL) {
    16d0:	20 97       	sbiw	r28, 0x00	; 0
    16d2:	f1 f3       	breq	.-4      	; 0x16d0 <osEE_idle_hook_wrapper+0x22>
      p_idle_hook();
    16d4:	fe 01       	movw	r30, r28
    16d6:	09 95       	icall
    16d8:	f6 cf       	rjmp	.-20     	; 0x16c6 <osEE_idle_hook_wrapper+0x18>
    }
#else
    ; /* Empty Endless Loop */
#endif /* OSEE_HAS_IDLEHOOK || OSEE_API_DYNAMIC */
  }
  osEE_idle_task_terminate(p_cdb->p_idle_task);
    16da:	80 91 78 01 	lds	r24, 0x0178	; 0x800178 <CDB+0x4>
    16de:	90 91 79 01 	lds	r25, 0x0179	; 0x800179 <CDB+0x5>
}
    16e2:	df 91       	pop	r29
    16e4:	cf 91       	pop	r28
    16e6:	1f 91       	pop	r17
    16e8:	0f 91       	pop	r16
    }
#else
    ; /* Empty Endless Loop */
#endif /* OSEE_HAS_IDLEHOOK || OSEE_API_DYNAMIC */
  }
  osEE_idle_task_terminate(p_cdb->p_idle_task);
    16ea:	0c 94 8f 0c 	jmp	0x191e	; 0x191e <osEE_idle_task_terminate>

000016ee <osEE_scheduler_task_activated>:
    }
  }
#endif /* !OSEE_SINGLECORE */

  return is_preemption;
}
    16ee:	ef 92       	push	r14
    16f0:	ff 92       	push	r15
    16f2:	0f 93       	push	r16
    16f4:	1f 93       	push	r17
    16f6:	cf 93       	push	r28
    16f8:	df 93       	push	r29
    16fa:	da 01       	movw	r26, r20
    16fc:	14 96       	adiw	r26, 0x04	; 4
    16fe:	ed 90       	ld	r14, X+
    1700:	fc 90       	ld	r15, X
    1702:	15 97       	sbiw	r26, 0x05	; 5
    1704:	e7 01       	movw	r28, r14
    1706:	98 81       	ld	r25, Y
    1708:	1d 96       	adiw	r26, 0x0d	; 13
    170a:	8c 91       	ld	r24, X
    170c:	98 17       	cp	r25, r24
    170e:	08 f0       	brcs	.+2      	; 0x1712 <osEE_scheduler_task_activated+0x24>
    1710:	4c c0       	rjmp	.+152    	; 0x17aa <osEE_scheduler_task_activated+0xbc>
    1712:	fb 01       	movw	r30, r22
    1714:	01 90       	ld	r0, Z+
    1716:	f0 81       	ld	r31, Z
    1718:	e0 2d       	mov	r30, r0
    171a:	00 81       	ld	r16, Z
    171c:	11 81       	ldd	r17, Z+1	; 0x01
    171e:	d8 01       	movw	r26, r16
    1720:	14 96       	adiw	r26, 0x04	; 4
    1722:	6d 91       	ld	r22, X+
    1724:	7c 91       	ld	r23, X
    1726:	15 97       	sbiw	r26, 0x05	; 5
    1728:	9f 5f       	subi	r25, 0xFF	; 255
    172a:	98 83       	st	Y, r25
    172c:	a4 81       	ldd	r26, Z+4	; 0x04
    172e:	b5 81       	ldd	r27, Z+5	; 0x05
    1730:	23 2b       	or	r18, r19
    1732:	11 f1       	breq	.+68     	; 0x1778 <osEE_scheduler_task_activated+0x8a>
    1734:	eb 01       	movw	r28, r22
    1736:	99 81       	ldd	r25, Y+1	; 0x01
    1738:	e7 01       	movw	r28, r14
    173a:	89 81       	ldd	r24, Y+1	; 0x01
    173c:	98 17       	cp	r25, r24
    173e:	e0 f4       	brcc	.+56     	; 0x1778 <osEE_scheduler_task_activated+0x8a>
    1740:	8d 91       	ld	r24, X+
    1742:	9c 91       	ld	r25, X
    1744:	11 97       	sbiw	r26, 0x01	; 1
    1746:	95 83       	std	Z+5, r25	; 0x05
    1748:	84 83       	std	Z+4, r24	; 0x04
    174a:	82 e0       	ldi	r24, 0x02	; 2
    174c:	90 e0       	ldi	r25, 0x00	; 0
    174e:	eb 01       	movw	r28, r22
    1750:	9b 83       	std	Y+3, r25	; 0x03
    1752:	8a 83       	std	Y+2, r24	; 0x02
    1754:	13 96       	adiw	r26, 0x03	; 3
    1756:	5c 93       	st	X, r21
    1758:	4e 93       	st	-X, r20
    175a:	12 97       	sbiw	r26, 0x02	; 2
    175c:	86 81       	ldd	r24, Z+6	; 0x06
    175e:	97 81       	ldd	r25, Z+7	; 0x07
    1760:	11 96       	adiw	r26, 0x01	; 1
    1762:	9c 93       	st	X, r25
    1764:	8e 93       	st	-X, r24
    1766:	b7 83       	std	Z+7, r27	; 0x07
    1768:	a6 83       	std	Z+6, r26	; 0x06
    176a:	51 83       	std	Z+1, r21	; 0x01
    176c:	40 83       	st	Z, r20
    176e:	ba 01       	movw	r22, r20
    1770:	c8 01       	movw	r24, r16
    1772:	0e 94 5c 0c 	call	0x18b8	; 0x18b8 <osEE_change_context_from_running>
    1776:	16 c0       	rjmp	.+44     	; 0x17a4 <osEE_scheduler_task_activated+0xb6>
    1778:	e7 01       	movw	r28, r14
    177a:	8a 81       	ldd	r24, Y+2	; 0x02
    177c:	9b 81       	ldd	r25, Y+3	; 0x03
    177e:	89 2b       	or	r24, r25
    1780:	21 f4       	brne	.+8      	; 0x178a <osEE_scheduler_task_activated+0x9c>
    1782:	81 e0       	ldi	r24, 0x01	; 1
    1784:	90 e0       	ldi	r25, 0x00	; 0
    1786:	9b 83       	std	Y+3, r25	; 0x03
    1788:	8a 83       	std	Y+2, r24	; 0x02
    178a:	8d 91       	ld	r24, X+
    178c:	9c 91       	ld	r25, X
    178e:	11 97       	sbiw	r26, 0x01	; 1
    1790:	95 83       	std	Z+5, r25	; 0x05
    1792:	84 83       	std	Z+4, r24	; 0x04
    1794:	11 96       	adiw	r26, 0x01	; 1
    1796:	1c 92       	st	X, r1
    1798:	1e 92       	st	-X, r1
    179a:	bd 01       	movw	r22, r26
    179c:	cf 01       	movw	r24, r30
    179e:	02 96       	adiw	r24, 0x02	; 2
    17a0:	0e 94 56 0d 	call	0x1aac	; 0x1aac <osEE_scheduler_rq_insert>
    17a4:	80 e0       	ldi	r24, 0x00	; 0
    17a6:	90 e0       	ldi	r25, 0x00	; 0
    17a8:	02 c0       	rjmp	.+4      	; 0x17ae <osEE_scheduler_task_activated+0xc0>
    17aa:	84 e0       	ldi	r24, 0x04	; 4
    17ac:	90 e0       	ldi	r25, 0x00	; 0
    17ae:	df 91       	pop	r29
    17b0:	cf 91       	pop	r28
    17b2:	1f 91       	pop	r17
    17b4:	0f 91       	pop	r16
    17b6:	ff 90       	pop	r15
    17b8:	ef 90       	pop	r14
    17ba:	08 95       	ret

000017bc <osEE_scheduler_task_terminated>:
(
  P2VAR(OsEE_KDB, AUTOMATIC, OS_APPL_DATA)    p_kdb,
  P2VAR(OsEE_CDB, AUTOMATIC, OS_APPL_DATA)    p_cdb,
  P2VAR(OsEE_TDB *, AUTOMATIC, OS_APPL_DATA)  pp_tdb_from
)
{
    17bc:	af 92       	push	r10
    17be:	bf 92       	push	r11
    17c0:	cf 92       	push	r12
    17c2:	df 92       	push	r13
    17c4:	ef 92       	push	r14
    17c6:	ff 92       	push	r15
    17c8:	0f 93       	push	r16
    17ca:	1f 93       	push	r17
    17cc:	cf 93       	push	r28
    17ce:	df 93       	push	r29
    17d0:	5b 01       	movw	r10, r22
  CONSTP2VAR(OsEE_CCB, AUTOMATIC, OS_APPL_DATA) p_ccb = p_cdb->p_ccb;
    17d2:	db 01       	movw	r26, r22
    17d4:	cd 91       	ld	r28, X+
    17d6:	dc 91       	ld	r29, X
  /* Touch unused parameters */
  (void)p_kdb;
  osEE_lock_core(p_cdb);
  {
    CONSTP2VAR(OsEE_TDB, AUTOMATIC, OS_APPL_DATA)
      p_tdb_term  = p_ccb->p_curr;
    17d8:	fe 01       	movw	r30, r28
    17da:	01 91       	ld	r16, Z+
    17dc:	11 91       	ld	r17, Z+
    17de:	7f 01       	movw	r14, r30
    CONSTP2VAR(OsEE_TCB, AUTOMATIC, OS_APPL_DATA)
      p_tcb_term  = p_tdb_term->p_tcb;
    17e0:	d8 01       	movw	r26, r16
    17e2:	14 96       	adiw	r26, 0x04	; 4
    17e4:	cd 90       	ld	r12, X+
    17e6:	dc 90       	ld	r13, X
    17e8:	15 97       	sbiw	r26, 0x05	; 5

    /* Prepare the TDB from return value */
    (*pp_tdb_from) = p_tdb_term;
    17ea:	fa 01       	movw	r30, r20
    17ec:	11 83       	std	Z+1, r17	; 0x01
    17ee:	00 83       	st	Z, r16

    if (p_tcb_term->status == OSEE_TASK_RUNNING) {
    17f0:	d6 01       	movw	r26, r12
    17f2:	12 96       	adiw	r26, 0x02	; 2
    17f4:	8d 91       	ld	r24, X+
    17f6:	9c 91       	ld	r25, X
    17f8:	13 97       	sbiw	r26, 0x03	; 3
    17fa:	04 97       	sbiw	r24, 0x04	; 4
    17fc:	59 f5       	brne	.+86     	; 0x1854 <osEE_scheduler_task_terminated+0x98>
      /* Normal Termination */
      CONSTP2VAR(OsEE_SN, AUTOMATIC, OS_APPL_DATA)
        p_sn_term = osEE_scheduler_core_pop_running(p_cdb, &p_ccb->rq);
    17fe:	b7 01       	movw	r22, r14
    1800:	c5 01       	movw	r24, r10
    1802:	0e 94 5d 0d 	call	0x1aba	; 0x1aba <osEE_scheduler_core_pop_running>
    1806:	ac 01       	movw	r20, r24

      p_tdb_to = p_ccb->p_curr;
    1808:	88 81       	ld	r24, Y
    180a:	99 81       	ldd	r25, Y+1	; 0x01

      /* Handle if there was another activation of the same TASK already
       * as Head of RQ */
      if (p_tdb_term != p_tdb_to) {
    180c:	08 17       	cp	r16, r24
    180e:	19 07       	cpc	r17, r25
    1810:	a9 f0       	breq	.+42     	; 0x183c <osEE_scheduler_task_terminated+0x80>
  osEE_task_end
(
  CONSTP2VAR(OsEE_TDB, AUTOMATIC, OS_APPL_DATA) p_tdb
)
{
  CONSTP2VAR(OsEE_TCB, AUTOMATIC, OS_APPL_DATA) p_tcb = p_tdb->p_tcb;
    1812:	d8 01       	movw	r26, r16
    1814:	14 96       	adiw	r26, 0x04	; 4
    1816:	ed 91       	ld	r30, X+
    1818:	fc 91       	ld	r31, X
    181a:	15 97       	sbiw	r26, 0x05	; 5

  p_tcb->current_prio = p_tdb->ready_prio;
    181c:	1b 96       	adiw	r26, 0x0b	; 11
    181e:	2c 91       	ld	r18, X
    1820:	21 83       	std	Z+1, r18	; 0x01

  --p_tcb->current_num_of_act;
    1822:	20 81       	ld	r18, Z
    1824:	21 50       	subi	r18, 0x01	; 1
    1826:	20 83       	st	Z, r18

  if (p_tcb->current_num_of_act == 0U) {
    1828:	21 11       	cpse	r18, r1
    182a:	03 c0       	rjmp	.+6      	; 0x1832 <osEE_scheduler_task_terminated+0x76>
    p_tcb->status = OSEE_TASK_SUSPENDED;
    182c:	13 82       	std	Z+3, r1	; 0x03
    182e:	12 82       	std	Z+2, r1	; 0x02
    1830:	09 c0       	rjmp	.+18     	; 0x1844 <osEE_scheduler_task_terminated+0x88>
  } else {
    p_tcb->status = OSEE_TASK_READY;
    1832:	21 e0       	ldi	r18, 0x01	; 1
    1834:	30 e0       	ldi	r19, 0x00	; 0
    1836:	33 83       	std	Z+3, r19	; 0x03
    1838:	22 83       	std	Z+2, r18	; 0x02
    183a:	04 c0       	rjmp	.+8      	; 0x1844 <osEE_scheduler_task_terminated+0x88>
#if (defined(OSEE_HAS_PRETASKHOOK))
        /* If TDB_TERM is equal to TDB_TO, the following assure that
         * PreTaskHook will be called */
        p_ccb->p_last_tdb_hook = NULL;
#endif /* OSEE_HAS_PRETASKHOOK */
        --p_tcb_term->current_num_of_act;
    183c:	f6 01       	movw	r30, r12
    183e:	20 81       	ld	r18, Z
    1840:	21 50       	subi	r18, 0x01	; 1
    1842:	20 83       	st	Z, r18
(
  P2VAR(OsEE_SN *, AUTOMATIC, OS_APPL_DATA) pp_first,
  P2VAR(OsEE_SN  , AUTOMATIC, OS_APPL_DATA) p_to_free
)
{
  p_to_free->p_next = (*pp_first);
    1844:	2c 81       	ldd	r18, Y+4	; 0x04
    1846:	3d 81       	ldd	r19, Y+5	; 0x05
    1848:	da 01       	movw	r26, r20
    184a:	2d 93       	st	X+, r18
    184c:	3c 93       	st	X, r19
  (*pp_first)       = p_to_free;
    184e:	5d 83       	std	Y+5, r21	; 0x05
    1850:	4c 83       	std	Y+4, r20	; 0x04
    1852:	23 c0       	rjmp	.+70     	; 0x189a <osEE_scheduler_task_terminated+0xde>
      /* In Normal Termination => SN released */
      osEE_sn_release(&p_ccb->p_free_sn, p_sn_term);
    } else {
      /* Handle ChainTask */
      CONSTP2VAR(OsEE_SN, AUTOMATIC, OS_APPL_DATA)
        p_sn_term = p_ccb->p_stk_sn;
    1854:	6e 81       	ldd	r22, Y+6	; 0x06
    1856:	7f 81       	ldd	r23, Y+7	; 0x07

      /* Pop the current STK SN, if not IDLE TASK. This function MUST not be
       * called inside IDLE TASK. */
      p_ccb->p_stk_sn = p_sn_term->p_next;
    1858:	fb 01       	movw	r30, r22
    185a:	80 81       	ld	r24, Z
    185c:	91 81       	ldd	r25, Z+1	; 0x01
    185e:	9f 83       	std	Y+7, r25	; 0x07
    1860:	8e 83       	std	Y+6, r24	; 0x06
      /* Wait to see p_ccb->p_curr until you are completely sure to what set */

      /* I need to release internal resource for Chained TASK
       * (set ready prio instead of dispatch prio) to let RQ Tasks 'preempt'
       * the Chained. */
      p_tcb_term->current_prio = p_tdb_term->ready_prio;
    1862:	d8 01       	movw	r26, r16
    1864:	1b 96       	adiw	r26, 0x0b	; 11
    1866:	8c 91       	ld	r24, X
    1868:	f6 01       	movw	r30, r12
    186a:	81 83       	std	Z+1, r24	; 0x01
      p_tcb_term->status = OSEE_TASK_READY;
    186c:	81 e0       	ldi	r24, 0x01	; 1
    186e:	90 e0       	ldi	r25, 0x00	; 0
    1870:	93 83       	std	Z+3, r25	; 0x03
    1872:	82 83       	std	Z+2, r24	; 0x02
      if (p_tcb_term->current_num_of_act == 1U) {
        osEE_event_reset_mask(p_tcb_term);
      }
#endif /* OSEE_HAS_EVENTS */

      (void)osEE_scheduler_rq_insert(&p_ccb->rq, p_sn_term, p_tdb_term);
    1874:	a8 01       	movw	r20, r16
    1876:	c7 01       	movw	r24, r14
    1878:	0e 94 56 0d 	call	0x1aac	; 0x1aac <osEE_scheduler_rq_insert>

      {
        CONSTP2VAR(OsEE_preempt, AUTOMATIC, OS_APPL_DATA)
          p_prev = osEE_scheduler_core_rq_preempt_stk(p_cdb, &p_ccb->rq);
    187c:	b7 01       	movw	r22, r14
    187e:	c5 01       	movw	r24, r10
    1880:	0e 94 aa 0c 	call	0x1954	; 0x1954 <osEE_scheduler_core_rq_preempt_stk>

        if (p_prev == NULL) {
    1884:	89 2b       	or	r24, r25
    1886:	39 f4       	brne	.+14     	; 0x1896 <osEE_scheduler_task_terminated+0xda>
          /* Restore Stacked.
           * Not Needed to Check Idle TASK since just reinserted the chained
           * in RQ */
          p_tdb_to                = p_ccb->p_stk_sn->p_tdb;
    1888:	ee 81       	ldd	r30, Y+6	; 0x06
    188a:	ff 81       	ldd	r31, Y+7	; 0x07
    188c:	82 81       	ldd	r24, Z+2	; 0x02
    188e:	93 81       	ldd	r25, Z+3	; 0x03
          p_ccb->p_curr           = p_tdb_to;
    1890:	99 83       	std	Y+1, r25	; 0x01
    1892:	88 83       	st	Y, r24
    1894:	02 c0       	rjmp	.+4      	; 0x189a <osEE_scheduler_task_terminated+0xde>
        } else {
          p_tdb_to = p_ccb->p_curr;
    1896:	88 81       	ld	r24, Y
    1898:	99 81       	ldd	r25, Y+1	; 0x01
    }
  }
  osEE_unlock_core(p_cdb);

  return p_tdb_to;
}
    189a:	df 91       	pop	r29
    189c:	cf 91       	pop	r28
    189e:	1f 91       	pop	r17
    18a0:	0f 91       	pop	r16
    18a2:	ff 90       	pop	r15
    18a4:	ef 90       	pop	r14
    18a6:	df 90       	pop	r13
    18a8:	cf 90       	pop	r12
    18aa:	bf 90       	pop	r11
    18ac:	af 90       	pop	r10
    18ae:	08 95       	ret

000018b0 <__vector_default>:
#include "ee_avr8_irqstub.h"

/* Erika Interrupt Vector Definition */

/* DUMMY interrupt vector */
OSEE_AVR8_ISR_NOT_DEFINED(BADISR_vect)
    18b0:	f8 94       	cli
    18b2:	ff cf       	rjmp	.-2      	; 0x18b2 <__vector_default+0x2>

000018b4 <osEE_atmega_intvect>:

/* Interrupt Vector Table Recall. */
void osEE_atmega_intvect(void) {
  OSEE_AVR8_REQUEST_IRQ_ENTRY(BADISR_vect);
    18b4:	e0 eb       	ldi	r30, 0xB0	; 176
    18b6:	08 95       	ret

000018b8 <osEE_change_context_from_running>:
  osEE_change_context_from_running
(
  P2VAR(OsEE_TDB, AUTOMATIC, OS_APPL_CONST) p_from,
  P2VAR(OsEE_TDB, AUTOMATIC, OS_APPL_CONST) p_to
)
{
    18b8:	fb 01       	movw	r30, r22
  CONSTP2VAR(OsEE_TCB, AUTOMATIC, OS_APPL_DATA) p_to_tcb  = p_to->p_tcb;
    18ba:	a4 81       	ldd	r26, Z+4	; 0x04
    18bc:	b5 81       	ldd	r27, Z+5	; 0x05
  CONST(TaskStateType, AUTOMATIC)     status_prev_running = p_to_tcb->status;
    18be:	12 96       	adiw	r26, 0x02	; 2
    18c0:	2d 91       	ld	r18, X+
    18c2:	3c 91       	ld	r19, X
    18c4:	13 97       	sbiw	r26, 0x03	; 3

  p_to_tcb->status = OSEE_TASK_RUNNING;
    18c6:	44 e0       	ldi	r20, 0x04	; 4
    18c8:	50 e0       	ldi	r21, 0x00	; 0
    18ca:	13 96       	adiw	r26, 0x03	; 3
    18cc:	5c 93       	st	X, r21
    18ce:	4e 93       	st	-X, r20
    18d0:	12 97       	sbiw	r26, 0x02	; 2
    18d2:	dc 01       	movw	r26, r24
    18d4:	12 96       	adiw	r26, 0x02	; 2
    18d6:	4d 91       	ld	r20, X+
    18d8:	5c 91       	ld	r21, X
    18da:	13 97       	sbiw	r26, 0x03	; 3
    18dc:	62 81       	ldd	r22, Z+2	; 0x02
    18de:	73 81       	ldd	r23, Z+3	; 0x03

  if (status_prev_running == OSEE_TASK_READY_STACKED) {
    osEE_hal_save_ctx_and_restore_ctx(p_to, p_to->hdb.p_scb,
    18e0:	cf 01       	movw	r24, r30
  CONSTP2VAR(OsEE_TCB, AUTOMATIC, OS_APPL_DATA) p_to_tcb  = p_to->p_tcb;
  CONST(TaskStateType, AUTOMATIC)     status_prev_running = p_to_tcb->status;

  p_to_tcb->status = OSEE_TASK_RUNNING;

  if (status_prev_running == OSEE_TASK_READY_STACKED) {
    18e2:	22 30       	cpi	r18, 0x02	; 2
    18e4:	31 05       	cpc	r19, r1
    18e6:	11 f4       	brne	.+4      	; 0x18ec <osEE_change_context_from_running+0x34>
    osEE_hal_save_ctx_and_restore_ctx(p_to, p_to->hdb.p_scb,
    18e8:	0c 94 ae 00 	jmp	0x15c	; 0x15c <osEE_hal_save_ctx_and_restore_ctx>
      p_from->hdb.p_scb);
  } else {
    osEE_hal_save_ctx_and_ready2stacked(p_to, p_to->hdb.p_scb,
    18ec:	0c 94 f6 00 	jmp	0x1ec	; 0x1ec <osEE_hal_save_ctx_and_ready2stacked>

000018f0 <osEE_change_context_from_task_end>:
  osEE_change_context_from_task_end
(
  P2VAR(OsEE_TDB, AUTOMATIC, OS_APPL_CONST) p_from,
  P2VAR(OsEE_TDB, AUTOMATIC, OS_APPL_CONST) p_to
)
{
    18f0:	cb 01       	movw	r24, r22
  CONSTP2VAR(OsEE_TCB, AUTOMATIC, OS_APPL_DATA) p_to_tcb  = p_to->p_tcb;
    18f2:	db 01       	movw	r26, r22
    18f4:	14 96       	adiw	r26, 0x04	; 4
    18f6:	ed 91       	ld	r30, X+
    18f8:	fc 91       	ld	r31, X
    18fa:	15 97       	sbiw	r26, 0x05	; 5
  CONST(TaskStateType, AUTOMATIC)     status_prev_running = p_to_tcb->status;
    18fc:	22 81       	ldd	r18, Z+2	; 0x02
    18fe:	33 81       	ldd	r19, Z+3	; 0x03

  p_to_tcb->status = OSEE_TASK_RUNNING;
    1900:	44 e0       	ldi	r20, 0x04	; 4
    1902:	50 e0       	ldi	r21, 0x00	; 0
    1904:	53 83       	std	Z+3, r21	; 0x03
    1906:	42 83       	std	Z+2, r20	; 0x02
    1908:	12 96       	adiw	r26, 0x02	; 2
    190a:	6d 91       	ld	r22, X+
    190c:	7c 91       	ld	r23, X
    190e:	13 97       	sbiw	r26, 0x03	; 3

  if (status_prev_running == OSEE_TASK_READY_STACKED) {
    1910:	22 30       	cpi	r18, 0x02	; 2
    1912:	31 05       	cpc	r19, r1
    1914:	11 f4       	brne	.+4      	; 0x191a <osEE_change_context_from_task_end+0x2a>
    osEE_hal_restore_ctx(p_to, p_to->hdb.p_scb);
    1916:	0c 94 ce 00 	jmp	0x19c	; 0x19c <osEE_hal_restore_ctx>
  } else {
    osEE_hal_ready2stacked(p_to, p_to->hdb.p_scb);
    191a:	0c 94 ee 00 	jmp	0x1dc	; 0x1dc <osEE_hal_ready2stacked>

0000191e <osEE_idle_task_terminate>:
{
  P2VAR(OsEE_CTX, AUTOMATIC, OS_APPL_DATA)      p_ctx;

  CONSTP2VAR(OsEE_HDB, AUTOMATIC, OS_APPL_DATA) p_idle_hdb  = &p_idle_tdb->hdb;
  CONSTP2VAR(OsEE_SDB, AUTOMATIC, OS_APPL_DATA) p_sdb       = p_idle_hdb->p_sdb;
  CONSTP2VAR(OsEE_SCB, AUTOMATIC, OS_APPL_DATA) p_scb       = p_idle_hdb->p_scb;
    191e:	dc 01       	movw	r26, r24
    1920:	12 96       	adiw	r26, 0x02	; 2
    1922:	6d 91       	ld	r22, X+
    1924:	7c 91       	ld	r23, X
    1926:	13 97       	sbiw	r26, 0x03	; 3
  CONSTP2VAR(OsEE_CTX, AUTOMATIC, OS_APPL_DATA) p_bos       = p_sdb->p_bos;
    1928:	ed 91       	ld	r30, X+
    192a:	fc 91       	ld	r31, X
    192c:	40 81       	ld	r20, Z
    192e:	51 81       	ldd	r21, Z+1	; 0x01
  P2VAR(OsEE_CTX, AUTOMATIC, OS_APPL_DATA)      p_tos       = p_scb->p_tos;
    1930:	db 01       	movw	r26, r22
    1932:	ed 91       	ld	r30, X+
    1934:	fc 91       	ld	r31, X

  do {
    p_ctx = p_tos;
    p_tos = p_tos->p_ctx;
    1936:	22 89       	ldd	r18, Z+18	; 0x12
    1938:	33 89       	ldd	r19, Z+19	; 0x13
  } while ((p_tos != NULL) && (p_tos != p_bos));
    193a:	21 15       	cp	r18, r1
    193c:	31 05       	cpc	r19, r1
    193e:	29 f4       	brne	.+10     	; 0x194a <osEE_idle_task_terminate+0x2c>

  /* Unwind the stack until the last context*/
  p_scb->p_tos = p_ctx;
    1940:	db 01       	movw	r26, r22
    1942:	ed 93       	st	X+, r30
    1944:	fc 93       	st	X, r31

  osEE_hal_restore_ctx(p_idle_tdb, p_scb);
    1946:	0c 94 ce 00 	jmp	0x19c	; 0x19c <osEE_hal_restore_ctx>
  P2VAR(OsEE_CTX, AUTOMATIC, OS_APPL_DATA)      p_tos       = p_scb->p_tos;

  do {
    p_ctx = p_tos;
    p_tos = p_tos->p_ctx;
  } while ((p_tos != NULL) && (p_tos != p_bos));
    194a:	24 17       	cp	r18, r20
    194c:	35 07       	cpc	r19, r21
    194e:	c1 f3       	breq	.-16     	; 0x1940 <osEE_idle_task_terminate+0x22>
    1950:	f9 01       	movw	r30, r18
    1952:	f1 cf       	rjmp	.-30     	; 0x1936 <osEE_idle_task_terminate+0x18>

00001954 <osEE_scheduler_core_rq_preempt_stk>:
  osEE_scheduler_core_rq_preempt_stk
(
  P2VAR(OsEE_CDB, AUTOMATIC, OS_APPL_DATA)  p_cdb,
  P2VAR(OsEE_RQ,  AUTOMATIC, OS_APPL_DATA)  p_rq
)
{
    1954:	0f 93       	push	r16
    1956:	1f 93       	push	r17
    1958:	cf 93       	push	r28
    195a:	df 93       	push	r29
  CONSTP2VAR(OsEE_CCB, AUTOMATIC, OS_APPL_DATA) p_ccb = p_cdb->p_ccb;
    195c:	ec 01       	movw	r28, r24
    195e:	a8 81       	ld	r26, Y
    1960:	b9 81       	ldd	r27, Y+1	; 0x01
  CONSTP2VAR(OsEE_SN, AUTOMATIC, OS_APPL_DATA)  p_rq_sn  = (*p_rq);
    1962:	eb 01       	movw	r28, r22
    1964:	e8 81       	ld	r30, Y
    1966:	f9 81       	ldd	r31, Y+1	; 0x01
  P2VAR(OsEE_SN, AUTOMATIC, OS_APPL_DATA)       p_ret_sn = p_ccb->p_stk_sn;
    1968:	16 96       	adiw	r26, 0x06	; 6
    196a:	cd 91       	ld	r28, X+
    196c:	dc 91       	ld	r29, X
    196e:	17 97       	sbiw	r26, 0x07	; 7

  VAR(OsEE_bool, AUTOMATIC)                     is_rq_preemption = OSEE_FALSE;
  P2VAR(OsEE_TDB, AUTOMATIC, OS_APPL_DATA)      p_ret_tdb;

  if (p_ret_sn != NULL) {
    1970:	20 97       	sbiw	r28, 0x00	; 0
    1972:	b1 f0       	breq	.+44     	; 0x19a0 <osEE_scheduler_core_rq_preempt_stk+0x4c>
    p_ret_tdb = p_ret_sn->p_tdb;
    1974:	8a 81       	ldd	r24, Y+2	; 0x02
    1976:	9b 81       	ldd	r25, Y+3	; 0x03
    if (p_rq_sn != NULL) {
    1978:	30 97       	sbiw	r30, 0x00	; 0
    197a:	e1 f1       	breq	.+120    	; 0x19f4 <osEE_scheduler_core_rq_preempt_stk+0xa0>
      CONSTP2VAR(OsEE_TCB, AUTOMATIC, OS_APPL_DATA)
        p_ret_tcb = p_ret_tdb->p_tcb;
    197c:	ec 01       	movw	r28, r24
    197e:	0c 81       	ldd	r16, Y+4	; 0x04
    1980:	1d 81       	ldd	r17, Y+5	; 0x05
      if (p_ret_tcb->current_prio <
        p_rq_sn->p_tdb->p_tcb->current_prio)
    1982:	22 81       	ldd	r18, Z+2	; 0x02
    1984:	33 81       	ldd	r19, Z+3	; 0x03
    1986:	e9 01       	movw	r28, r18
    1988:	4c 81       	ldd	r20, Y+4	; 0x04
    198a:	5d 81       	ldd	r21, Y+5	; 0x05
  if (p_ret_sn != NULL) {
    p_ret_tdb = p_ret_sn->p_tdb;
    if (p_rq_sn != NULL) {
      CONSTP2VAR(OsEE_TCB, AUTOMATIC, OS_APPL_DATA)
        p_ret_tcb = p_ret_tdb->p_tcb;
      if (p_ret_tcb->current_prio <
    198c:	e8 01       	movw	r28, r16
    198e:	39 81       	ldd	r19, Y+1	; 0x01
    1990:	ea 01       	movw	r28, r20
    1992:	29 81       	ldd	r18, Y+1	; 0x01
    1994:	32 17       	cp	r19, r18
    1996:	70 f5       	brcc	.+92     	; 0x19f4 <osEE_scheduler_core_rq_preempt_stk+0xa0>
      {
        /* RQ preempt STK */
        /* Call PostTaskHook before switching active TASK */
        osEE_call_post_task_hook(p_ccb);

        p_ret_tcb->status = OSEE_TASK_READY_STACKED;
    1998:	22 e0       	ldi	r18, 0x02	; 2
    199a:	30 e0       	ldi	r19, 0x00	; 0
    199c:	e8 01       	movw	r28, r16
    199e:	0b c0       	rjmp	.+22     	; 0x19b6 <osEE_scheduler_core_rq_preempt_stk+0x62>
        is_rq_preemption  = OSEE_TRUE;
      }
    }
  } else if (p_rq_sn != NULL) {
    19a0:	30 97       	sbiw	r30, 0x00	; 0
    19a2:	41 f1       	breq	.+80     	; 0x19f4 <osEE_scheduler_core_rq_preempt_stk+0xa0>
    /* Don't use p_ccb->p_curr, is not reliable here,
     * It points to the terminated TASK, we are still evaluating
     * the next one. */
    /* Call PostTaskHook before switching active TASK */
    osEE_call_post_task_hook(p_ccb);
    p_ret_tdb                 = p_cdb->p_idle_task;
    19a4:	ec 01       	movw	r28, r24
    19a6:	8c 81       	ldd	r24, Y+4	; 0x04
    19a8:	9d 81       	ldd	r25, Y+5	; 0x05
    p_ret_tdb->p_tcb->status  = OSEE_TASK_READY_STACKED;
    19aa:	ec 01       	movw	r28, r24
    19ac:	4c 81       	ldd	r20, Y+4	; 0x04
    19ae:	5d 81       	ldd	r21, Y+5	; 0x05
    19b0:	22 e0       	ldi	r18, 0x02	; 2
    19b2:	30 e0       	ldi	r19, 0x00	; 0
    19b4:	ea 01       	movw	r28, r20
    19b6:	3b 83       	std	Y+3, r19	; 0x03
    19b8:	2a 83       	std	Y+2, r18	; 0x02
    is_rq_preemption          = OSEE_TRUE;
  }

  if (is_rq_preemption) {
    /* Extract from ready queue */
    (*p_rq)       = p_rq_sn->p_next;
    19ba:	20 81       	ld	r18, Z
    19bc:	31 81       	ldd	r19, Z+1	; 0x01
    19be:	eb 01       	movw	r28, r22
    19c0:	39 83       	std	Y+1, r19	; 0x01
    19c2:	28 83       	st	Y, r18
(
  P2VAR(OsEE_CCB, AUTOMATIC, OS_APPL_DATA) p_ccb,
  P2VAR(OsEE_SN, AUTOMATIC, OS_APPL_DATA)  p_rq_sn
)
{
  CONSTP2VAR(OsEE_TDB, AUTOMATIC, OS_APPL_DATA) p_tdb = p_rq_sn->p_tdb;
    19c4:	c2 81       	ldd	r28, Z+2	; 0x02
    19c6:	d3 81       	ldd	r29, Z+3	; 0x03
  CONSTP2VAR(OsEE_TCB, AUTOMATIC, OS_APPL_DATA) p_tcb = p_tdb->p_tcb;
    19c8:	4c 81       	ldd	r20, Y+4	; 0x04
    19ca:	5d 81       	ldd	r21, Y+5	; 0x05
  /* N.B. The Handling of the preempted SN as Stacked or re-inserted in RQ
   * is done by the calling function */
  p_rq_sn->p_next               = NULL;
  p_tcb->current_core_id        = osEE_get_curr_core_id();
#else
  p_rq_sn->p_next               = p_ccb->p_stk_sn;
    19cc:	16 96       	adiw	r26, 0x06	; 6
    19ce:	2d 91       	ld	r18, X+
    19d0:	3c 91       	ld	r19, X
    19d2:	17 97       	sbiw	r26, 0x07	; 7
    19d4:	31 83       	std	Z+1, r19	; 0x01
    19d6:	20 83       	st	Z, r18
#endif /* OSEE_ALLOW_TASK_MIGRATION */
  p_ccb->p_stk_sn               = p_rq_sn;
    19d8:	17 96       	adiw	r26, 0x07	; 7
    19da:	fc 93       	st	X, r31
    19dc:	ee 93       	st	-X, r30
    19de:	16 97       	sbiw	r26, 0x06	; 6
  p_ccb->p_curr                 = p_tdb;
    19e0:	cd 93       	st	X+, r28
    19e2:	dc 93       	st	X, r29

  /* Adjust actual priority with dispatch priority: if needed */
  {
    CONST(TaskPrio, AUTOMATIC)
      dispatch_prio = p_tdb->dispatch_prio;
    19e4:	2c 85       	ldd	r18, Y+12	; 0x0c
    if (p_tcb->current_prio < dispatch_prio) {
    19e6:	fa 01       	movw	r30, r20
    19e8:	31 81       	ldd	r19, Z+1	; 0x01
    19ea:	32 17       	cp	r19, r18
    19ec:	28 f4       	brcc	.+10     	; 0x19f8 <osEE_scheduler_core_rq_preempt_stk+0xa4>
      p_tcb->current_prio = dispatch_prio;
    19ee:	fa 01       	movw	r30, r20
    19f0:	21 83       	std	Z+1, r18	; 0x01
    19f2:	02 c0       	rjmp	.+4      	; 0x19f8 <osEE_scheduler_core_rq_preempt_stk+0xa4>
    (*p_rq)       = p_rq_sn->p_next;

    /* Set as current on top of STK */
    osEE_scheduler_stk_next(p_ccb, p_rq_sn);
  } else {
    p_ret_tdb = NULL;
    19f4:	80 e0       	ldi	r24, 0x00	; 0
    19f6:	90 e0       	ldi	r25, 0x00	; 0
#if (defined(OSEE_ALLOW_TASK_MIGRATION))
  return p_ret_sn;
#else
  return p_ret_tdb;
#endif /* OSEE_ALLOW_TASK_MIGRATION */
}
    19f8:	df 91       	pop	r29
    19fa:	cf 91       	pop	r28
    19fc:	1f 91       	pop	r17
    19fe:	0f 91       	pop	r16
    1a00:	08 95       	ret

00001a02 <osEE_sn_priority_insert>:
(
  P2VAR(OsEE_SN *, AUTOMATIC, OS_APPL_DATA)     pp_first,
  P2VAR(OsEE_SN  , AUTOMATIC, OS_APPL_DATA)     p_sn_new,
  CONST(OsEE_bool, AUTOMATIC)                   hnd_act
)
{
    1a02:	cf 92       	push	r12
    1a04:	df 92       	push	r13
    1a06:	ef 92       	push	r14
    1a08:	ff 92       	push	r15
    1a0a:	0f 93       	push	r16
    1a0c:	1f 93       	push	r17
    1a0e:	cf 93       	push	r28
    1a10:	df 93       	push	r29
  CONSTP2VAR(OsEE_TDB, AUTOMATIC, OS_APPL_DATA) p_tdb_new = p_sn_new->p_tdb;
    1a12:	eb 01       	movw	r28, r22
    1a14:	aa 81       	ldd	r26, Y+2	; 0x02
    1a16:	bb 81       	ldd	r27, Y+3	; 0x03
  CONSTP2VAR(OsEE_TCB, AUTOMATIC, OS_APPL_DATA) p_tcb_new = p_tdb_new->p_tcb;
    1a18:	14 96       	adiw	r26, 0x04	; 4
    1a1a:	ed 91       	ld	r30, X+
    1a1c:	fc 91       	ld	r31, X
    1a1e:	15 97       	sbiw	r26, 0x05	; 5
  CONST(TaskPrio, AUTOMATIC)                new_task_prio =
    1a20:	41 15       	cp	r20, r1
    1a22:	51 05       	cpc	r21, r1
    1a24:	41 f0       	breq	.+16     	; 0x1a36 <osEE_sn_priority_insert+0x34>
    ((hnd_act) && osEE_is_active_task(p_tcb_new))?
    1a26:	22 81       	ldd	r18, Z+2	; 0x02
    1a28:	33 81       	ldd	r19, Z+3	; 0x03
    1a2a:	22 30       	cpi	r18, 0x02	; 2
    1a2c:	31 05       	cpc	r19, r1
    1a2e:	18 f0       	brcs	.+6      	; 0x1a36 <osEE_sn_priority_insert+0x34>
  CONST(OsEE_bool, AUTOMATIC)                   hnd_act
)
{
  CONSTP2VAR(OsEE_TDB, AUTOMATIC, OS_APPL_DATA) p_tdb_new = p_sn_new->p_tdb;
  CONSTP2VAR(OsEE_TCB, AUTOMATIC, OS_APPL_DATA) p_tcb_new = p_tdb_new->p_tcb;
  CONST(TaskPrio, AUTOMATIC)                new_task_prio =
    1a30:	1b 96       	adiw	r26, 0x0b	; 11
    1a32:	2c 91       	ld	r18, X
    1a34:	01 c0       	rjmp	.+2      	; 0x1a38 <osEE_sn_priority_insert+0x36>
    1a36:	21 81       	ldd	r18, Z+1	; 0x01
    ((hnd_act) && osEE_is_active_task(p_tcb_new))?
      p_tdb_new->ready_prio:
      p_tcb_new->current_prio;
  P2VAR(OsEE_SN, AUTOMATIC, OS_APPL_DATA) p_prev          = NULL;
  P2VAR(OsEE_SN, AUTOMATIC, OS_APPL_DATA) p_curr          = (*pp_first);
    1a38:	dc 01       	movw	r26, r24
    1a3a:	ed 91       	ld	r30, X+
    1a3c:	fc 91       	ld	r31, X
  CONSTP2VAR(OsEE_TCB, AUTOMATIC, OS_APPL_DATA) p_tcb_new = p_tdb_new->p_tcb;
  CONST(TaskPrio, AUTOMATIC)                new_task_prio =
    ((hnd_act) && osEE_is_active_task(p_tcb_new))?
      p_tdb_new->ready_prio:
      p_tcb_new->current_prio;
  P2VAR(OsEE_SN, AUTOMATIC, OS_APPL_DATA) p_prev          = NULL;
    1a3e:	a0 e0       	ldi	r26, 0x00	; 0
    1a40:	b0 e0       	ldi	r27, 0x00	; 0
  P2VAR(OsEE_SN, AUTOMATIC, OS_APPL_DATA) p_curr          = (*pp_first);
  VAR(OsEE_bool, AUTOMATIC)               head_changed    = OSEE_FALSE;

  /* Traverse the queue until needed */
  while (p_curr != NULL) {
    1a42:	30 97       	sbiw	r30, 0x00	; 0
    1a44:	d9 f0       	breq	.+54     	; 0x1a7c <osEE_sn_priority_insert+0x7a>
    VAR(TaskPrio, AUTOMATIC)                      prio_to_check;
    CONSTP2VAR(OsEE_TDB, AUTOMATIC, OS_APPL_DATA) p_cur_tdb = p_curr->p_tdb;
    1a46:	02 81       	ldd	r16, Z+2	; 0x02
    1a48:	13 81       	ldd	r17, Z+3	; 0x03
    CONSTP2VAR(OsEE_TCB, AUTOMATIC, OS_APPL_DATA) p_cur_tcb = p_cur_tdb->p_tcb;
    1a4a:	e8 01       	movw	r28, r16
    1a4c:	cc 80       	ldd	r12, Y+4	; 0x04
    1a4e:	dd 80       	ldd	r13, Y+5	; 0x05

    if (hnd_act && osEE_is_active_task(p_cur_tcb)) {
    1a50:	41 15       	cp	r20, r1
    1a52:	51 05       	cpc	r21, r1
    1a54:	51 f0       	breq	.+20     	; 0x1a6a <osEE_sn_priority_insert+0x68>
    1a56:	e6 01       	movw	r28, r12
    1a58:	ea 80       	ldd	r14, Y+2	; 0x02
    1a5a:	fb 80       	ldd	r15, Y+3	; 0x03
    1a5c:	d2 e0       	ldi	r29, 0x02	; 2
    1a5e:	ed 16       	cp	r14, r29
    1a60:	f1 04       	cpc	r15, r1
    1a62:	18 f0       	brcs	.+6      	; 0x1a6a <osEE_sn_priority_insert+0x68>
      prio_to_check = p_cur_tdb->ready_prio;
    1a64:	e8 01       	movw	r28, r16
    1a66:	3b 85       	ldd	r19, Y+11	; 0x0b
    1a68:	02 c0       	rjmp	.+4      	; 0x1a6e <osEE_sn_priority_insert+0x6c>
    } else {
      prio_to_check = p_cur_tcb->current_prio;
    1a6a:	e6 01       	movw	r28, r12
    1a6c:	39 81       	ldd	r19, Y+1	; 0x01
    }

    if (new_task_prio <= prio_to_check)
    1a6e:	32 17       	cp	r19, r18
    1a70:	28 f0       	brcs	.+10     	; 0x1a7c <osEE_sn_priority_insert+0x7a>
    {
      p_prev = p_curr;
      p_curr = p_curr->p_next;
    1a72:	df 01       	movw	r26, r30
    1a74:	01 90       	ld	r0, Z+
    1a76:	f0 81       	ld	r31, Z
    1a78:	e0 2d       	mov	r30, r0
    1a7a:	e3 cf       	rjmp	.-58     	; 0x1a42 <osEE_sn_priority_insert+0x40>
    } else {
      break;
    }
  }

  if (p_prev != NULL) {
    1a7c:	10 97       	sbiw	r26, 0x00	; 0
    1a7e:	29 f0       	breq	.+10     	; 0x1a8a <osEE_sn_priority_insert+0x88>
    p_prev->p_next = p_sn_new;
    1a80:	6d 93       	st	X+, r22
    1a82:	7c 93       	st	X, r23
    ((hnd_act) && osEE_is_active_task(p_tcb_new))?
      p_tdb_new->ready_prio:
      p_tcb_new->current_prio;
  P2VAR(OsEE_SN, AUTOMATIC, OS_APPL_DATA) p_prev          = NULL;
  P2VAR(OsEE_SN, AUTOMATIC, OS_APPL_DATA) p_curr          = (*pp_first);
  VAR(OsEE_bool, AUTOMATIC)               head_changed    = OSEE_FALSE;
    1a84:	80 e0       	ldi	r24, 0x00	; 0
    1a86:	90 e0       	ldi	r25, 0x00	; 0
    1a88:	05 c0       	rjmp	.+10     	; 0x1a94 <osEE_sn_priority_insert+0x92>
  }

  if (p_prev != NULL) {
    p_prev->p_next = p_sn_new;
  } else {
    (*pp_first)   = p_sn_new;
    1a8a:	dc 01       	movw	r26, r24
    1a8c:	6d 93       	st	X+, r22
    1a8e:	7c 93       	st	X, r23
    head_changed  = OSEE_TRUE;
    1a90:	81 e0       	ldi	r24, 0x01	; 1
    1a92:	90 e0       	ldi	r25, 0x00	; 0
  }

  p_sn_new->p_next = p_curr;
    1a94:	eb 01       	movw	r28, r22
    1a96:	f9 83       	std	Y+1, r31	; 0x01
    1a98:	e8 83       	st	Y, r30

  return head_changed;
}
    1a9a:	df 91       	pop	r29
    1a9c:	cf 91       	pop	r28
    1a9e:	1f 91       	pop	r17
    1aa0:	0f 91       	pop	r16
    1aa2:	ff 90       	pop	r15
    1aa4:	ef 90       	pop	r14
    1aa6:	df 90       	pop	r13
    1aa8:	cf 90       	pop	r12
    1aaa:	08 95       	ret

00001aac <osEE_scheduler_rq_insert>:
  P2VAR(OsEE_RQ, AUTOMATIC, OS_APPL_DATA)       p_rq,
  P2VAR(OsEE_SN, AUTOMATIC, OS_APPL_DATA)       p_sn_new,
  CONSTP2VAR(OsEE_TDB, AUTOMATIC, OS_APPL_DATA) p_tdb_new
)
{
  p_sn_new->p_tdb = p_tdb_new;
    1aac:	fb 01       	movw	r30, r22
    1aae:	53 83       	std	Z+3, r21	; 0x03
    1ab0:	42 83       	std	Z+2, r20	; 0x02

#if (!defined(OSEE_SCHEDULER_GLOBAL))
  return osEE_sn_priority_insert(p_rq, p_sn_new, OSEE_TRUE);
    1ab2:	41 e0       	ldi	r20, 0x01	; 1
    1ab4:	50 e0       	ldi	r21, 0x00	; 0
    1ab6:	0c 94 01 0d 	jmp	0x1a02	; 0x1a02 <osEE_sn_priority_insert>

00001aba <osEE_scheduler_core_pop_running>:
  osEE_scheduler_core_pop_running
(
  P2VAR(OsEE_CDB, AUTOMATIC, OS_APPL_DATA)  p_cdb,
  P2VAR(OsEE_RQ,  AUTOMATIC, OS_APPL_DATA)  p_rq
)
{
    1aba:	ef 92       	push	r14
    1abc:	ff 92       	push	r15
    1abe:	0f 93       	push	r16
    1ac0:	1f 93       	push	r17
    1ac2:	cf 93       	push	r28
    1ac4:	df 93       	push	r29
    1ac6:	8c 01       	movw	r16, r24
  CONSTP2VAR(OsEE_CCB, AUTOMATIC, OS_APPL_DATA) p_ccb         = p_cdb->p_ccb;
    1ac8:	fc 01       	movw	r30, r24
    1aca:	c0 81       	ld	r28, Z
    1acc:	d1 81       	ldd	r29, Z+1	; 0x01
  CONSTP2VAR(OsEE_SN, AUTOMATIC, OS_APPL_DATA)  p_prev_stk_sn = p_ccb->p_stk_sn;
    1ace:	ee 80       	ldd	r14, Y+6	; 0x06
    1ad0:	ff 80       	ldd	r15, Y+7	; 0x07
  CONSTP2VAR(OsEE_SN, AUTOMATIC, OS_APPL_DATA)
    p_next_stk_sn = p_prev_stk_sn->p_next;

  /* Pop the current STK SN, if not IDLE TASK. This function MUST not be
   * called inside IDLE TASK. */
  p_ccb->p_stk_sn = p_next_stk_sn;
    1ad2:	f7 01       	movw	r30, r14
    1ad4:	80 81       	ld	r24, Z
    1ad6:	91 81       	ldd	r25, Z+1	; 0x01
    1ad8:	9f 83       	std	Y+7, r25	; 0x07
    1ada:	8e 83       	std	Y+6, r24	; 0x06
   * */

  {
    /* Handle if RQ preempt STK (It manipulate the core data structures) */
    CONSTP2VAR(OsEE_preempt, AUTOMATIC, OS_APPL_DATA)
      p_preempt = osEE_scheduler_core_rq_preempt_stk(p_cdb, p_rq);
    1adc:	c8 01       	movw	r24, r16
    1ade:	0e 94 aa 0c 	call	0x1954	; 0x1954 <osEE_scheduler_core_rq_preempt_stk>
    CONSTP2VAR(OsEE_SN, AUTOMATIC, OS_APPL_DATA)
      p_curr_stk_sn = p_ccb->p_stk_sn;
    1ae2:	ee 81       	ldd	r30, Y+6	; 0x06
    1ae4:	ff 81       	ldd	r31, Y+7	; 0x07

    /* If not, resume current STK first */
    if (p_preempt == NULL) {
    1ae6:	89 2b       	or	r24, r25
    1ae8:	51 f4       	brne	.+20     	; 0x1afe <osEE_scheduler_core_pop_running+0x44>
      if (p_ccb->p_curr->task_type <= OSEE_TASK_TYPE_EXTENDED) {
        osEE_call_post_task_hook(p_ccb);
      }
#endif /* OSEE_HAS_POSTTASKHOOK */

      if ( p_curr_stk_sn != NULL ) {
    1aea:	30 97       	sbiw	r30, 0x00	; 0
    1aec:	19 f0       	breq	.+6      	; 0x1af4 <osEE_scheduler_core_pop_running+0x3a>
        /* Resume STK TASK */
        p_tdb_stk = p_curr_stk_sn->p_tdb;
    1aee:	82 81       	ldd	r24, Z+2	; 0x02
    1af0:	93 81       	ldd	r25, Z+3	; 0x03
    1af2:	03 c0       	rjmp	.+6      	; 0x1afa <osEE_scheduler_core_pop_running+0x40>
      } else {
        /* Resume IDLE TASK */
        p_tdb_stk = p_cdb->p_idle_task;
    1af4:	f8 01       	movw	r30, r16
    1af6:	84 81       	ldd	r24, Z+4	; 0x04
    1af8:	95 81       	ldd	r25, Z+5	; 0x05
      }

      p_ccb->p_curr            = p_tdb_stk;
    1afa:	99 83       	std	Y+1, r25	; 0x01
    1afc:	88 83       	st	Y, r24
    }
#endif /* OSEE_ALLOW_TASK_MIGRATION */
  }

  return p_prev_stk_sn;
}
    1afe:	c7 01       	movw	r24, r14
    1b00:	df 91       	pop	r29
    1b02:	cf 91       	pop	r28
    1b04:	1f 91       	pop	r17
    1b06:	0f 91       	pop	r16
    1b08:	ff 90       	pop	r15
    1b0a:	ef 90       	pop	r14
    1b0c:	08 95       	ret

00001b0e <__udivmodsi4>:
    1b0e:	a1 e2       	ldi	r26, 0x21	; 33
    1b10:	1a 2e       	mov	r1, r26
    1b12:	aa 1b       	sub	r26, r26
    1b14:	bb 1b       	sub	r27, r27
    1b16:	fd 01       	movw	r30, r26
    1b18:	0d c0       	rjmp	.+26     	; 0x1b34 <__udivmodsi4_ep>

00001b1a <__udivmodsi4_loop>:
    1b1a:	aa 1f       	adc	r26, r26
    1b1c:	bb 1f       	adc	r27, r27
    1b1e:	ee 1f       	adc	r30, r30
    1b20:	ff 1f       	adc	r31, r31
    1b22:	a2 17       	cp	r26, r18
    1b24:	b3 07       	cpc	r27, r19
    1b26:	e4 07       	cpc	r30, r20
    1b28:	f5 07       	cpc	r31, r21
    1b2a:	20 f0       	brcs	.+8      	; 0x1b34 <__udivmodsi4_ep>
    1b2c:	a2 1b       	sub	r26, r18
    1b2e:	b3 0b       	sbc	r27, r19
    1b30:	e4 0b       	sbc	r30, r20
    1b32:	f5 0b       	sbc	r31, r21

00001b34 <__udivmodsi4_ep>:
    1b34:	66 1f       	adc	r22, r22
    1b36:	77 1f       	adc	r23, r23
    1b38:	88 1f       	adc	r24, r24
    1b3a:	99 1f       	adc	r25, r25
    1b3c:	1a 94       	dec	r1
    1b3e:	69 f7       	brne	.-38     	; 0x1b1a <__udivmodsi4_loop>
    1b40:	60 95       	com	r22
    1b42:	70 95       	com	r23
    1b44:	80 95       	com	r24
    1b46:	90 95       	com	r25
    1b48:	9b 01       	movw	r18, r22
    1b4a:	ac 01       	movw	r20, r24
    1b4c:	bd 01       	movw	r22, r26
    1b4e:	cf 01       	movw	r24, r30
    1b50:	08 95       	ret

00001b52 <__tablejump2__>:
    1b52:	ee 0f       	add	r30, r30
    1b54:	ff 1f       	adc	r31, r31
    1b56:	05 90       	lpm	r0, Z+
    1b58:	f4 91       	lpm	r31, Z
    1b5a:	e0 2d       	mov	r30, r0
    1b5c:	09 94       	ijmp

00001b5e <_exit>:
    1b5e:	f8 94       	cli

00001b60 <__stop_program>:
    1b60:	ff cf       	rjmp	.-2      	; 0x1b60 <__stop_program>
