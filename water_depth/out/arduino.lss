
arduino.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000230  00800100  00001ae6  00001b7a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001ae6  00000000  00000000  00000094  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000000c9  00800330  00800330  00001daa  2**0
                  ALLOC
  3 .comment      00000011  00000000  00000000  00001daa  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00001dbc  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000440  00000000  00000000  00001e00  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000c386  00000000  00000000  00002240  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00002578  00000000  00000000  0000e5c6  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00002b49  00000000  00000000  00010b3e  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000b6c  00000000  00000000  00013688  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00003128  00000000  00000000  000141f4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000048fe  00000000  00000000  0001731c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000003f8  00000000  00000000  0001bc1a  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 82 00 	jmp	0x104	; 0x104 <__ctors_end>
       4:	0c 94 aa 00 	jmp	0x154	; 0x154 <__bad_interrupt>
       8:	0c 94 aa 00 	jmp	0x154	; 0x154 <__bad_interrupt>
       c:	0c 94 aa 00 	jmp	0x154	; 0x154 <__bad_interrupt>
      10:	0c 94 aa 00 	jmp	0x154	; 0x154 <__bad_interrupt>
      14:	0c 94 aa 00 	jmp	0x154	; 0x154 <__bad_interrupt>
      18:	0c 94 aa 00 	jmp	0x154	; 0x154 <__bad_interrupt>
      1c:	0c 94 aa 00 	jmp	0x154	; 0x154 <__bad_interrupt>
      20:	0c 94 aa 00 	jmp	0x154	; 0x154 <__bad_interrupt>
      24:	0c 94 aa 00 	jmp	0x154	; 0x154 <__bad_interrupt>
      28:	0c 94 aa 00 	jmp	0x154	; 0x154 <__bad_interrupt>
      2c:	0c 94 aa 00 	jmp	0x154	; 0x154 <__bad_interrupt>
      30:	0c 94 aa 00 	jmp	0x154	; 0x154 <__bad_interrupt>
      34:	0c 94 aa 00 	jmp	0x154	; 0x154 <__bad_interrupt>
      38:	0c 94 aa 00 	jmp	0x154	; 0x154 <__bad_interrupt>
      3c:	0c 94 aa 00 	jmp	0x154	; 0x154 <__bad_interrupt>
      40:	0c 94 4c 06 	jmp	0xc98	; 0xc98 <__vector_16>
      44:	0c 94 aa 00 	jmp	0x154	; 0x154 <__bad_interrupt>
      48:	0c 94 29 09 	jmp	0x1252	; 0x1252 <__vector_18>
      4c:	0c 94 5b 09 	jmp	0x12b6	; 0x12b6 <__vector_19>
      50:	0c 94 aa 00 	jmp	0x154	; 0x154 <__bad_interrupt>
      54:	0c 94 aa 00 	jmp	0x154	; 0x154 <__bad_interrupt>
      58:	0c 94 aa 00 	jmp	0x154	; 0x154 <__bad_interrupt>
      5c:	0c 94 aa 00 	jmp	0x154	; 0x154 <__bad_interrupt>
      60:	0c 94 aa 00 	jmp	0x154	; 0x154 <__bad_interrupt>
      64:	0c 94 aa 00 	jmp	0x154	; 0x154 <__bad_interrupt>
      68:	e6 03       	fmuls	r22, r22
      6a:	7f 03       	fmul	r23, r23
      6c:	ea 03       	fmulsu	r22, r18
      6e:	82 03       	fmuls	r16, r18
      70:	85 03       	fmuls	r16, r21
      72:	88 03       	fmulsu	r16, r16
      74:	8c 03       	fmulsu	r16, r20
      76:	8f 03       	fmulsu	r16, r23
      78:	92 03       	fmuls	r17, r18
      7a:	95 03       	fmuls	r17, r21
      7c:	98 03       	fmulsu	r17, r16
      7e:	9b 03       	fmulsu	r17, r19
      80:	9e 03       	fmulsu	r17, r22
      82:	a1 03       	fmuls	r18, r17
      84:	a4 03       	fmuls	r18, r20
      86:	a8 03       	fmulsu	r18, r16
      88:	ab 03       	fmulsu	r18, r19
      8a:	ae 03       	fmulsu	r18, r22
      8c:	ee 03       	fmulsu	r22, r22
      8e:	bc 03       	fmulsu	r19, r20
      90:	bf 03       	fmulsu	r19, r23
      92:	e4 03       	fmuls	r22, r20
      94:	c2 03       	fmuls	r20, r18
      96:	e4 03       	fmuls	r22, r20
      98:	c6 03       	fmuls	r20, r22
      9a:	c9 03       	fmulsu	r20, r17
      9c:	cd 03       	fmulsu	r20, r21
      9e:	e4 03       	fmuls	r22, r20
      a0:	e4 03       	fmuls	r22, r20
      a2:	d0 03       	fmuls	r21, r16
      a4:	d4 03       	fmuls	r21, r20
      a6:	d7 03       	fmuls	r21, r23
      a8:	db 03       	fmulsu	r21, r19
      aa:	de 03       	fmulsu	r21, r22
      ac:	e4 03       	fmuls	r22, r20
      ae:	e1 03       	fmuls	r22, r17

000000b0 <__trampolines_end>:
      b0:	00 00       	nop
      b2:	00 08       	sbc	r0, r0
      b4:	00 02       	muls	r16, r16
      b6:	01 00       	.word	0x0001	; ????
      b8:	00 03       	mulsu	r16, r16
      ba:	04 07       	cpc	r16, r20
	...

000000c4 <digital_pin_to_bit_mask_PGM>:
      c4:	01 02 04 08 10 20 40 80 01 02 04 08 10 20 01 02     ..... @...... ..
      d4:	04 08 10 20                                         ... 

000000d8 <digital_pin_to_port_PGM>:
      d8:	04 04 04 04 04 04 04 04 02 02 02 02 02 02 03 03     ................
      e8:	03 03 03 03                                         ....

000000ec <port_to_output_PGM>:
      ec:	00 00 00 00 25 00 28 00 2b 00                       ....%.(.+.

000000f6 <port_to_mode_PGM>:
      f6:	00 00 00 00 24 00 27 00 2a 00                       ....$.'.*.

00000100 <__ctors_start>:
     100:	bd 01       	movw	r22, r26
     102:	8b 09       	sbc	r24, r11

00000104 <__ctors_end>:
     104:	11 24       	eor	r1, r1
     106:	1f be       	out	0x3f, r1	; 63
     108:	cf ef       	ldi	r28, 0xFF	; 255
     10a:	d8 e0       	ldi	r29, 0x08	; 8
     10c:	de bf       	out	0x3e, r29	; 62
     10e:	cd bf       	out	0x3d, r28	; 61

00000110 <__do_copy_data>:
     110:	13 e0       	ldi	r17, 0x03	; 3
     112:	a0 e0       	ldi	r26, 0x00	; 0
     114:	b1 e0       	ldi	r27, 0x01	; 1
     116:	e6 ee       	ldi	r30, 0xE6	; 230
     118:	fa e1       	ldi	r31, 0x1A	; 26
     11a:	02 c0       	rjmp	.+4      	; 0x120 <__do_copy_data+0x10>
     11c:	05 90       	lpm	r0, Z+
     11e:	0d 92       	st	X+, r0
     120:	a0 33       	cpi	r26, 0x30	; 48
     122:	b1 07       	cpc	r27, r17
     124:	d9 f7       	brne	.-10     	; 0x11c <__do_copy_data+0xc>

00000126 <__do_clear_bss>:
     126:	23 e0       	ldi	r18, 0x03	; 3
     128:	a0 e3       	ldi	r26, 0x30	; 48
     12a:	b3 e0       	ldi	r27, 0x03	; 3
     12c:	01 c0       	rjmp	.+2      	; 0x130 <.do_clear_bss_start>

0000012e <.do_clear_bss_loop>:
     12e:	1d 92       	st	X+, r1

00000130 <.do_clear_bss_start>:
     130:	a9 3f       	cpi	r26, 0xF9	; 249
     132:	b2 07       	cpc	r27, r18
     134:	e1 f7       	brne	.-8      	; 0x12e <.do_clear_bss_loop>

00000136 <__do_global_ctors>:
     136:	10 e0       	ldi	r17, 0x00	; 0
     138:	c2 e8       	ldi	r28, 0x82	; 130
     13a:	d0 e0       	ldi	r29, 0x00	; 0
     13c:	04 c0       	rjmp	.+8      	; 0x146 <__do_global_ctors+0x10>
     13e:	21 97       	sbiw	r28, 0x01	; 1
     140:	fe 01       	movw	r30, r28
     142:	0e 94 6b 0d 	call	0x1ad6	; 0x1ad6 <__tablejump2__>
     146:	c0 38       	cpi	r28, 0x80	; 128
     148:	d1 07       	cpc	r29, r17
     14a:	c9 f7       	brne	.-14     	; 0x13e <__do_global_ctors+0x8>
     14c:	0e 94 b3 01 	call	0x366	; 0x366 <main>
     150:	0c 94 71 0d 	jmp	0x1ae2	; 0x1ae2 <_exit>

00000154 <__bad_interrupt>:
     154:	0c 94 1a 0c 	jmp	0x1834	; 0x1834 <__vector_default>

00000158 <osEE_hal_save_ctx_and_restore_ctx>:
  .type osEE_hal_save_ctx_and_restore_ctx, @function
osEE_hal_save_ctx_and_restore_ctx:
  /*  r25:r24 parameter:  OsEE_TDB * p_to_tdb
      r23:r22 parameter:  OsEE_SCB * p_to_scb
      r21:r20 parameter:  OsEE_SCB * p_from_scb */
    osEE_hal_save_vcontext_m r21 r20
     158:	2f 92       	push	r2
     15a:	3f 92       	push	r3
     15c:	4f 92       	push	r4
     15e:	5f 92       	push	r5
     160:	6f 92       	push	r6
     162:	7f 92       	push	r7
     164:	8f 92       	push	r8
     166:	9f 92       	push	r9
     168:	af 92       	push	r10
     16a:	bf 92       	push	r11
     16c:	cf 92       	push	r12
     16e:	df 92       	push	r13
     170:	ef 92       	push	r14
     172:	ff 92       	push	r15
     174:	0f 93       	push	r16
     176:	1f 93       	push	r17
     178:	cf 93       	push	r28
     17a:	df 93       	push	r29
     17c:	e4 2f       	mov	r30, r20
     17e:	f5 2f       	mov	r31, r21
     180:	41 90       	ld	r4, Z+
     182:	50 80       	ld	r5, Z
     184:	4f 92       	push	r4
     186:	5f 92       	push	r5
     188:	e4 2f       	mov	r30, r20
     18a:	f5 2f       	mov	r31, r21
     18c:	4d b6       	in	r4, 0x3d	; 61
     18e:	5e b6       	in	r5, 0x3e	; 62
     190:	41 92       	st	Z+, r4
     192:	50 82       	st	Z, r5

/* Unconditional brach to restore context */
    jmp osEE_hal_restore_ctx
     194:	0c 94 cc 00 	jmp	0x198	; 0x198 <osEE_hal_restore_ctx>

00000198 <osEE_hal_restore_ctx>:
  .globl osEE_hal_restore_ctx
  .type osEE_hal_restore_ctx, @function
osEE_hal_restore_ctx:
  /*  r25:r24 parameter:  OsEE_TDB * p_to_tdb
      r23:r22 parameter:  OsEE_SCB * p_to_scb */
    osEE_hal_restore_vcontext_m r23 r22
     198:	e6 2f       	mov	r30, r22
     19a:	f7 2f       	mov	r31, r23
     19c:	41 90       	ld	r4, Z+
     19e:	50 80       	ld	r5, Z
     1a0:	4d be       	out	0x3d, r4	; 61
     1a2:	5e be       	out	0x3e, r5	; 62
     1a4:	5f 90       	pop	r5
     1a6:	4f 90       	pop	r4
     1a8:	e6 2f       	mov	r30, r22
     1aa:	f7 2f       	mov	r31, r23
     1ac:	41 92       	st	Z+, r4
     1ae:	50 82       	st	Z, r5
     1b0:	df 91       	pop	r29
     1b2:	cf 91       	pop	r28
     1b4:	1f 91       	pop	r17
     1b6:	0f 91       	pop	r16
     1b8:	ff 90       	pop	r15
     1ba:	ef 90       	pop	r14
     1bc:	df 90       	pop	r13
     1be:	cf 90       	pop	r12
     1c0:	bf 90       	pop	r11
     1c2:	af 90       	pop	r10
     1c4:	9f 90       	pop	r9
     1c6:	8f 90       	pop	r8
     1c8:	7f 90       	pop	r7
     1ca:	6f 90       	pop	r6
     1cc:	5f 90       	pop	r5
     1ce:	4f 90       	pop	r4
     1d0:	3f 90       	pop	r3
     1d2:	2f 90       	pop	r2
    jmp osEE_scheduler_task_wrapper_restore
     1d4:	0c 94 06 0b 	jmp	0x160c	; 0x160c <osEE_scheduler_task_wrapper_restore>

000001d8 <osEE_hal_ready2stacked>:
  .type   osEE_hal_ready2stacked, @function
osEE_hal_ready2stacked:
  /*  r25:r24 parameter:  OsEE_TDB * p_to_tdb
      r23:r22 parameter:  OsEE_SCB * p_to_scb
      r21:r20 local       p_to_scb->p_tos */
    mov r30, r22
     1d8:	e6 2f       	mov	r30, r22
    mov r31, r23
     1da:	f7 2f       	mov	r31, r23
    ld  r20, z+
     1dc:	41 91       	ld	r20, Z+
    ld  r21, z
     1de:	50 81       	ld	r21, Z
/* sp = 21:20 */
    out 0x3D, r20
     1e0:	4d bf       	out	0x3d, r20	; 61
    out 0x3E, r21
     1e2:	5e bf       	out	0x3e, r21	; 62

    jmp osEE_scheduler_task_wrapper_run
     1e4:	0c 94 07 0b 	jmp	0x160e	; 0x160e <osEE_scheduler_task_wrapper_run>

000001e8 <osEE_hal_save_ctx_and_ready2stacked>:
  .type osEE_hal_save_ctx_and_ready2stacked, @function
osEE_hal_save_ctx_and_ready2stacked:
  /*  r25:r24 parameter:  OsEE_TDB * p_to_tdb
      r23:r22 parameter:  OsEE_SCB * p_to_scb
      r21:r20 parameter:  OsEE_SCB * p_from_scb */
    osEE_hal_save_vcontext_m r21 r20
     1e8:	2f 92       	push	r2
     1ea:	3f 92       	push	r3
     1ec:	4f 92       	push	r4
     1ee:	5f 92       	push	r5
     1f0:	6f 92       	push	r6
     1f2:	7f 92       	push	r7
     1f4:	8f 92       	push	r8
     1f6:	9f 92       	push	r9
     1f8:	af 92       	push	r10
     1fa:	bf 92       	push	r11
     1fc:	cf 92       	push	r12
     1fe:	df 92       	push	r13
     200:	ef 92       	push	r14
     202:	ff 92       	push	r15
     204:	0f 93       	push	r16
     206:	1f 93       	push	r17
     208:	cf 93       	push	r28
     20a:	df 93       	push	r29
     20c:	e4 2f       	mov	r30, r20
     20e:	f5 2f       	mov	r31, r21
     210:	41 90       	ld	r4, Z+
     212:	50 80       	ld	r5, Z
     214:	4f 92       	push	r4
     216:	5f 92       	push	r5
     218:	e4 2f       	mov	r30, r20
     21a:	f5 2f       	mov	r31, r21
     21c:	4d b6       	in	r4, 0x3d	; 61
     21e:	5e b6       	in	r5, 0x3e	; 62
     220:	41 92       	st	Z+, r4
     222:	50 82       	st	Z, r5
    jmp osEE_hal_ready2stacked
     224:	0c 94 ec 00 	jmp	0x1d8	; 0x1d8 <osEE_hal_ready2stacked>

00000228 <osEE_hal_terminate_ctx>:
  .type osEE_hal_terminate_ctx, @function
osEE_hal_terminate_ctx:
  /*  r25:r24 parameter:  OsEE_SCB * p_term_scb
      r23:r22 parameter:  kernel_cb
      r21:r20 local       p_term_scb->p_tos */
    mov r30, r24
     228:	e8 2f       	mov	r30, r24
    mov r31, r25
     22a:	f9 2f       	mov	r31, r25
    ld  r20, z+
     22c:	41 91       	ld	r20, Z+
    ld  r21, z
     22e:	50 81       	ld	r21, Z

/* Unwind SP */
    out 0x3D, r20 /* r20 -> spl */
     230:	4d bf       	out	0x3d, r20	; 61
    out 0x3E, r21 /* r21 -> sph */
     232:	5e bf       	out	0x3e, r21	; 62

/*  Jump to kern_callback (that schedule) */
    mov r30, r22
     234:	e6 2f       	mov	r30, r22
    mov r31, r23
     236:	f7 2f       	mov	r31, r23

    ijmp
     238:	09 94       	ijmp
	...

0000023c <_ZN8SPIClass5beginEv>:
     23c:	cf 93       	push	r28
     23e:	cf b7       	in	r28, 0x3f	; 63
     240:	f8 94       	cli
     242:	80 91 33 03 	lds	r24, 0x0333	; 0x800333 <_ZN8SPIClass11initializedE>
     246:	81 11       	cpse	r24, r1
     248:	27 c0       	rjmp	.+78     	; 0x298 <_ZN8SPIClass5beginEv+0x5c>
     24a:	e2 ee       	ldi	r30, 0xE2	; 226
     24c:	f0 e0       	ldi	r31, 0x00	; 0
     24e:	84 91       	lpm	r24, Z
     250:	ee ec       	ldi	r30, 0xCE	; 206
     252:	f0 e0       	ldi	r31, 0x00	; 0
     254:	94 91       	lpm	r25, Z
     256:	e8 2f       	mov	r30, r24
     258:	f0 e0       	ldi	r31, 0x00	; 0
     25a:	ee 0f       	add	r30, r30
     25c:	ff 1f       	adc	r31, r31
     25e:	ea 50       	subi	r30, 0x0A	; 10
     260:	ff 4f       	sbci	r31, 0xFF	; 255
     262:	a5 91       	lpm	r26, Z+
     264:	b4 91       	lpm	r27, Z
     266:	ec 91       	ld	r30, X
     268:	e9 23       	and	r30, r25
     26a:	21 f4       	brne	.+8      	; 0x274 <_ZN8SPIClass5beginEv+0x38>
     26c:	61 e0       	ldi	r22, 0x01	; 1
     26e:	8a e0       	ldi	r24, 0x0A	; 10
     270:	0e 94 a2 07 	call	0xf44	; 0xf44 <digitalWrite>
     274:	61 e0       	ldi	r22, 0x01	; 1
     276:	8a e0       	ldi	r24, 0x0A	; 10
     278:	0e 94 66 07 	call	0xecc	; 0xecc <pinMode>
     27c:	8c b5       	in	r24, 0x2c	; 44
     27e:	80 61       	ori	r24, 0x10	; 16
     280:	8c bd       	out	0x2c, r24	; 44
     282:	8c b5       	in	r24, 0x2c	; 44
     284:	80 64       	ori	r24, 0x40	; 64
     286:	8c bd       	out	0x2c, r24	; 44
     288:	61 e0       	ldi	r22, 0x01	; 1
     28a:	8d e0       	ldi	r24, 0x0D	; 13
     28c:	0e 94 66 07 	call	0xecc	; 0xecc <pinMode>
     290:	61 e0       	ldi	r22, 0x01	; 1
     292:	8b e0       	ldi	r24, 0x0B	; 11
     294:	0e 94 66 07 	call	0xecc	; 0xecc <pinMode>
     298:	80 91 33 03 	lds	r24, 0x0333	; 0x800333 <_ZN8SPIClass11initializedE>
     29c:	8f 5f       	subi	r24, 0xFF	; 255
     29e:	80 93 33 03 	sts	0x0333, r24	; 0x800333 <_ZN8SPIClass11initializedE>
     2a2:	cf bf       	out	0x3f, r28	; 63
     2a4:	cf 91       	pop	r28
     2a6:	08 95       	ret

000002a8 <loop>:
     2a8:	80 e0       	ldi	r24, 0x00	; 0
     2aa:	0e 94 b7 0a 	call	0x156e	; 0x156e <ActivateTask>
     2ae:	80 91 41 03 	lds	r24, 0x0341	; 0x800341 <stk_wrong>
     2b2:	81 11       	cpse	r24, r1
     2b4:	1e c0       	rjmp	.+60     	; 0x2f2 <loop+0x4a>
     2b6:	80 91 3f 03 	lds	r24, 0x033F	; 0x80033f <old_sp>
     2ba:	90 91 40 03 	lds	r25, 0x0340	; 0x800340 <old_sp+0x1>
     2be:	89 2b       	or	r24, r25
     2c0:	39 f4       	brne	.+14     	; 0x2d0 <loop+0x28>
     2c2:	8d b7       	in	r24, 0x3d	; 61
     2c4:	9e b7       	in	r25, 0x3e	; 62
     2c6:	90 93 40 03 	sts	0x0340, r25	; 0x800340 <old_sp+0x1>
     2ca:	80 93 3f 03 	sts	0x033F, r24	; 0x80033f <old_sp>
     2ce:	08 95       	ret
     2d0:	20 91 3f 03 	lds	r18, 0x033F	; 0x80033f <old_sp>
     2d4:	30 91 40 03 	lds	r19, 0x0340	; 0x800340 <old_sp+0x1>
     2d8:	8d b7       	in	r24, 0x3d	; 61
     2da:	9e b7       	in	r25, 0x3e	; 62
     2dc:	28 17       	cp	r18, r24
     2de:	39 07       	cpc	r19, r25
     2e0:	41 f0       	breq	.+16     	; 0x2f2 <loop+0x4a>
     2e2:	81 e0       	ldi	r24, 0x01	; 1
     2e4:	80 93 41 03 	sts	0x0341, r24	; 0x800341 <stk_wrong>
     2e8:	61 e0       	ldi	r22, 0x01	; 1
     2ea:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
     2ee:	0c 94 a2 07 	jmp	0xf44	; 0xf44 <digitalWrite>
     2f2:	08 95       	ret

000002f4 <setup>:
     2f4:	26 e0       	ldi	r18, 0x06	; 6
     2f6:	40 e0       	ldi	r20, 0x00	; 0
     2f8:	52 ec       	ldi	r21, 0xC2	; 194
     2fa:	61 e0       	ldi	r22, 0x01	; 1
     2fc:	70 e0       	ldi	r23, 0x00	; 0
     2fe:	8b e5       	ldi	r24, 0x5B	; 91
     300:	93 e0       	ldi	r25, 0x03	; 3
     302:	0e 94 c4 08 	call	0x1188	; 0x1188 <_ZN14HardwareSerial5beginEmh>
     306:	41 e0       	ldi	r20, 0x01	; 1
     308:	60 e1       	ldi	r22, 0x10	; 16
     30a:	85 e3       	ldi	r24, 0x35	; 53
     30c:	93 e0       	ldi	r25, 0x03	; 3
     30e:	0e 94 a5 05 	call	0xb4a	; 0xb4a <_ZN7MCP_CAN5beginEhh>
     312:	88 23       	and	r24, r24
     314:	99 f0       	breq	.+38     	; 0x33c <setup+0x48>
     316:	6d e1       	ldi	r22, 0x1D	; 29
     318:	71 e0       	ldi	r23, 0x01	; 1
     31a:	8b e5       	ldi	r24, 0x5B	; 91
     31c:	93 e0       	ldi	r25, 0x03	; 3
     31e:	0e 94 fe 09 	call	0x13fc	; 0x13fc <_ZN5Print7printlnEPKc>
     322:	66 e3       	ldi	r22, 0x36	; 54
     324:	71 e0       	ldi	r23, 0x01	; 1
     326:	8b e5       	ldi	r24, 0x5B	; 91
     328:	93 e0       	ldi	r25, 0x03	; 3
     32a:	0e 94 fe 09 	call	0x13fc	; 0x13fc <_ZN5Print7printlnEPKc>
     32e:	64 e6       	ldi	r22, 0x64	; 100
     330:	70 e0       	ldi	r23, 0x00	; 0
     332:	80 e0       	ldi	r24, 0x00	; 0
     334:	90 e0       	ldi	r25, 0x00	; 0
     336:	0e 94 bb 06 	call	0xd76	; 0xd76 <delay>
     33a:	e5 cf       	rjmp	.-54     	; 0x306 <setup+0x12>
     33c:	61 e5       	ldi	r22, 0x51	; 81
     33e:	71 e0       	ldi	r23, 0x01	; 1
     340:	8b e5       	ldi	r24, 0x5B	; 91
     342:	93 e0       	ldi	r25, 0x03	; 3
     344:	0e 94 fe 09 	call	0x13fc	; 0x13fc <_ZN5Print7printlnEPKc>
     348:	69 e6       	ldi	r22, 0x69	; 105
     34a:	71 e0       	ldi	r23, 0x01	; 1
     34c:	8b e5       	ldi	r24, 0x5B	; 91
     34e:	93 e0       	ldi	r25, 0x03	; 3
     350:	0c 94 fe 09 	jmp	0x13fc	; 0x13fc <_ZN5Print7printlnEPKc>

00000354 <idle_hook>:
     354:	0e 94 54 01 	call	0x2a8	; 0x2a8 <loop>
     358:	8c e2       	ldi	r24, 0x2C	; 44
     35a:	98 e0       	ldi	r25, 0x08	; 8
     35c:	89 2b       	or	r24, r25
     35e:	11 f0       	breq	.+4      	; 0x364 <idle_hook+0x10>
     360:	0c 94 2c 08 	jmp	0x1058	; 0x1058 <_Z14serialEventRunv>
     364:	08 95       	ret

00000366 <main>:
     366:	0e 94 02 07 	call	0xe04	; 0xe04 <init>
     36a:	0e 94 7a 01 	call	0x2f4	; 0x2f4 <setup>
     36e:	80 e0       	ldi	r24, 0x00	; 0
     370:	0e 94 7e 0a 	call	0x14fc	; 0x14fc <StartOS>
     374:	80 e0       	ldi	r24, 0x00	; 0
     376:	90 e0       	ldi	r25, 0x00	; 0
     378:	08 95       	ret

0000037a <_GLOBAL__sub_I_led>:
     37a:	6a e0       	ldi	r22, 0x0A	; 10
     37c:	85 e3       	ldi	r24, 0x35	; 53
     37e:	93 e0       	ldi	r25, 0x03	; 3
     380:	0c 94 9d 05 	jmp	0xb3a	; 0xb3a <_ZN7MCP_CANC1Eh>

00000384 <FuncTaskL1>:
     384:	cf 92       	push	r12
     386:	ef 92       	push	r14
     388:	ff 92       	push	r15
     38a:	0f 93       	push	r16
     38c:	cf 93       	push	r28
     38e:	df 93       	push	r29
     390:	8e e0       	ldi	r24, 0x0E	; 14
     392:	0e 94 d2 07 	call	0xfa4	; 0xfa4 <analogRead>
     396:	84 3f       	cpi	r24, 0xF4	; 244
     398:	21 e0       	ldi	r18, 0x01	; 1
     39a:	92 07       	cpc	r25, r18
     39c:	24 f0       	brlt	.+8      	; 0x3a6 <FuncTaskL1+0x22>
     39e:	bc 01       	movw	r22, r24
     3a0:	64 5f       	subi	r22, 0xF4	; 244
     3a2:	71 40       	sbci	r23, 0x01	; 1
     3a4:	02 c0       	rjmp	.+4      	; 0x3aa <FuncTaskL1+0x26>
     3a6:	60 e0       	ldi	r22, 0x00	; 0
     3a8:	70 e0       	ldi	r23, 0x00	; 0
     3aa:	cb 01       	movw	r24, r22
     3ac:	99 0f       	add	r25, r25
     3ae:	88 0b       	sbc	r24, r24
     3b0:	98 2f       	mov	r25, r24
     3b2:	80 93 42 03 	sts	0x0342, r24	; 0x800342 <stmp>
     3b6:	cb 01       	movw	r24, r22
     3b8:	99 0f       	add	r25, r25
     3ba:	88 0b       	sbc	r24, r24
     3bc:	98 2f       	mov	r25, r24
     3be:	80 93 43 03 	sts	0x0343, r24	; 0x800343 <stmp+0x1>
     3c2:	cb 01       	movw	r24, r22
     3c4:	99 0f       	add	r25, r25
     3c6:	88 0b       	sbc	r24, r24
     3c8:	98 2f       	mov	r25, r24
     3ca:	80 93 44 03 	sts	0x0344, r24	; 0x800344 <stmp+0x2>
     3ce:	cb 01       	movw	r24, r22
     3d0:	99 0f       	add	r25, r25
     3d2:	88 0b       	sbc	r24, r24
     3d4:	98 2f       	mov	r25, r24
     3d6:	80 93 45 03 	sts	0x0345, r24	; 0x800345 <stmp+0x3>
     3da:	99 0f       	add	r25, r25
     3dc:	88 0b       	sbc	r24, r24
     3de:	98 2f       	mov	r25, r24
     3e0:	80 93 46 03 	sts	0x0346, r24	; 0x800346 <stmp+0x4>
     3e4:	99 0f       	add	r25, r25
     3e6:	88 0b       	sbc	r24, r24
     3e8:	98 2f       	mov	r25, r24
     3ea:	80 93 47 03 	sts	0x0347, r24	; 0x800347 <stmp+0x5>
     3ee:	70 93 48 03 	sts	0x0348, r23	; 0x800348 <stmp+0x6>
     3f2:	60 93 49 03 	sts	0x0349, r22	; 0x800349 <stmp+0x7>
     3f6:	4a e0       	ldi	r20, 0x0A	; 10
     3f8:	50 e0       	ldi	r21, 0x00	; 0
     3fa:	8b e5       	ldi	r24, 0x5B	; 91
     3fc:	93 e0       	ldi	r25, 0x03	; 3
     3fe:	0e 94 66 0a 	call	0x14cc	; 0x14cc <_ZN5Print7printlnEhi>
     402:	48 e0       	ldi	r20, 0x08	; 8
     404:	50 e0       	ldi	r21, 0x00	; 0
     406:	62 e4       	ldi	r22, 0x42	; 66
     408:	73 e0       	ldi	r23, 0x03	; 3
     40a:	8b e5       	ldi	r24, 0x5B	; 91
     40c:	93 e0       	ldi	r25, 0x03	; 3
     40e:	0e 94 b8 09 	call	0x1370	; 0x1370 <_ZN5Print5writeEPKhj>
     412:	41 e0       	ldi	r20, 0x01	; 1
     414:	50 e0       	ldi	r21, 0x00	; 0
     416:	6e ee       	ldi	r22, 0xEE	; 238
     418:	71 e0       	ldi	r23, 0x01	; 1
     41a:	8b e5       	ldi	r24, 0x5B	; 91
     41c:	93 e0       	ldi	r25, 0x03	; 3
     41e:	0e 94 b8 09 	call	0x1370	; 0x1370 <_ZN5Print5writeEPKhj>
     422:	8b e5       	ldi	r24, 0x5B	; 91
     424:	93 e0       	ldi	r25, 0x03	; 3
     426:	0e 94 09 08 	call	0x1012	; 0x1012 <_ZN14HardwareSerial4readEv>
     42a:	89 36       	cpi	r24, 0x69	; 105
     42c:	91 05       	cpc	r25, r1
     42e:	61 f4       	brne	.+24     	; 0x448 <__LOCK_REGION_LENGTH__+0x48>
     430:	c2 e4       	ldi	r28, 0x42	; 66
     432:	d3 e0       	ldi	r29, 0x03	; 3
     434:	8b e5       	ldi	r24, 0x5B	; 91
     436:	93 e0       	ldi	r25, 0x03	; 3
     438:	0e 94 09 08 	call	0x1012	; 0x1012 <_ZN14HardwareSerial4readEv>
     43c:	89 93       	st	Y+, r24
     43e:	83 e0       	ldi	r24, 0x03	; 3
     440:	ca 34       	cpi	r28, 0x4A	; 74
     442:	d8 07       	cpc	r29, r24
     444:	b9 f7       	brne	.-18     	; 0x434 <__LOCK_REGION_LENGTH__+0x34>
     446:	ed cf       	rjmp	.-38     	; 0x422 <__LOCK_REGION_LENGTH__+0x22>
     448:	cc 24       	eor	r12, r12
     44a:	c3 94       	inc	r12
     44c:	82 e4       	ldi	r24, 0x42	; 66
     44e:	e8 2e       	mov	r14, r24
     450:	83 e0       	ldi	r24, 0x03	; 3
     452:	f8 2e       	mov	r15, r24
     454:	08 e0       	ldi	r16, 0x08	; 8
     456:	20 e0       	ldi	r18, 0x00	; 0
     458:	42 e0       	ldi	r20, 0x02	; 2
     45a:	50 e0       	ldi	r21, 0x00	; 0
     45c:	60 e0       	ldi	r22, 0x00	; 0
     45e:	70 e0       	ldi	r23, 0x00	; 0
     460:	85 e3       	ldi	r24, 0x35	; 53
     462:	93 e0       	ldi	r25, 0x03	; 3
     464:	0e 94 39 06 	call	0xc72	; 0xc72 <_ZN7MCP_CAN10sendMsgBufEmhhPKhb>
     468:	68 ee       	ldi	r22, 0xE8	; 232
     46a:	73 e0       	ldi	r23, 0x03	; 3
     46c:	80 e0       	ldi	r24, 0x00	; 0
     46e:	90 e0       	ldi	r25, 0x00	; 0
     470:	0e 94 bb 06 	call	0xd76	; 0xd76 <delay>
     474:	80 91 4a 03 	lds	r24, 0x034A	; 0x80034a <TaskL1_count>
     478:	90 91 4b 03 	lds	r25, 0x034B	; 0x80034b <TaskL1_count+0x1>
     47c:	01 96       	adiw	r24, 0x01	; 1
     47e:	90 93 4b 03 	sts	0x034B, r25	; 0x80034b <TaskL1_count+0x1>
     482:	80 93 4a 03 	sts	0x034A, r24	; 0x80034a <TaskL1_count>
     486:	df 91       	pop	r29
     488:	cf 91       	pop	r28
     48a:	0f 91       	pop	r16
     48c:	ff 90       	pop	r15
     48e:	ef 90       	pop	r14
     490:	cf 90       	pop	r12
     492:	0c 94 df 0a 	jmp	0x15be	; 0x15be <TerminateTask>

00000496 <_ZN8SPIClass16beginTransactionE11SPISettings>:
     496:	20 91 32 03 	lds	r18, 0x0332	; 0x800332 <_ZN8SPIClass13interruptModeE>
     49a:	22 23       	and	r18, r18
     49c:	99 f0       	breq	.+38     	; 0x4c4 <_ZN8SPIClass16beginTransactionE11SPISettings+0x2e>
     49e:	4f b7       	in	r20, 0x3f	; 63
     4a0:	f8 94       	cli
     4a2:	20 91 32 03 	lds	r18, 0x0332	; 0x800332 <_ZN8SPIClass13interruptModeE>
     4a6:	21 30       	cpi	r18, 0x01	; 1
     4a8:	59 f4       	brne	.+22     	; 0x4c0 <_ZN8SPIClass16beginTransactionE11SPISettings+0x2a>
     4aa:	2d b3       	in	r18, 0x1d	; 29
     4ac:	20 93 30 03 	sts	0x0330, r18	; 0x800330 <__data_end>
     4b0:	3d b3       	in	r19, 0x1d	; 29
     4b2:	20 91 31 03 	lds	r18, 0x0331	; 0x800331 <_ZN8SPIClass13interruptMaskE>
     4b6:	20 95       	com	r18
     4b8:	23 23       	and	r18, r19
     4ba:	2d bb       	out	0x1d, r18	; 29
     4bc:	4f bf       	out	0x3f, r20	; 63
     4be:	02 c0       	rjmp	.+4      	; 0x4c4 <_ZN8SPIClass16beginTransactionE11SPISettings+0x2e>
     4c0:	40 93 30 03 	sts	0x0330, r20	; 0x800330 <__data_end>
     4c4:	8c bd       	out	0x2c, r24	; 44
     4c6:	9d bd       	out	0x2d, r25	; 45
     4c8:	08 95       	ret

000004ca <_ZN8SPIClass8transferEh>:
     4ca:	8e bd       	out	0x2e, r24	; 46
     4cc:	00 00       	nop
     4ce:	0d b4       	in	r0, 0x2d	; 45
     4d0:	07 fe       	sbrs	r0, 7
     4d2:	fd cf       	rjmp	.-6      	; 0x4ce <_ZN8SPIClass8transferEh+0x4>
     4d4:	8e b5       	in	r24, 0x2e	; 46
     4d6:	08 95       	ret

000004d8 <_ZN8SPIClass14endTransactionEv>:
     4d8:	80 91 32 03 	lds	r24, 0x0332	; 0x800332 <_ZN8SPIClass13interruptModeE>
     4dc:	88 23       	and	r24, r24
     4de:	61 f0       	breq	.+24     	; 0x4f8 <_ZN8SPIClass14endTransactionEv+0x20>
     4e0:	9f b7       	in	r25, 0x3f	; 63
     4e2:	f8 94       	cli
     4e4:	20 91 32 03 	lds	r18, 0x0332	; 0x800332 <_ZN8SPIClass13interruptModeE>
     4e8:	80 91 30 03 	lds	r24, 0x0330	; 0x800330 <__data_end>
     4ec:	21 30       	cpi	r18, 0x01	; 1
     4ee:	19 f4       	brne	.+6      	; 0x4f6 <_ZN8SPIClass14endTransactionEv+0x1e>
     4f0:	8d bb       	out	0x1d, r24	; 29
     4f2:	9f bf       	out	0x3f, r25	; 63
     4f4:	08 95       	ret
     4f6:	8f bf       	out	0x3f, r24	; 63
     4f8:	08 95       	ret

000004fa <_Z11txSidhToRTSh>:
     4fa:	81 34       	cpi	r24, 0x41	; 65
     4fc:	31 f0       	breq	.+12     	; 0x50a <_Z11txSidhToRTSh+0x10>
     4fe:	81 35       	cpi	r24, 0x51	; 81
     500:	31 f0       	breq	.+12     	; 0x50e <_Z11txSidhToRTSh+0x14>
     502:	81 33       	cpi	r24, 0x31	; 49
     504:	31 f0       	breq	.+12     	; 0x512 <_Z11txSidhToRTSh+0x18>
     506:	80 e0       	ldi	r24, 0x00	; 0
     508:	08 95       	ret
     50a:	82 e8       	ldi	r24, 0x82	; 130
     50c:	08 95       	ret
     50e:	84 e8       	ldi	r24, 0x84	; 132
     510:	08 95       	ret
     512:	81 e8       	ldi	r24, 0x81	; 129
     514:	08 95       	ret

00000516 <_Z14txSidhToTxLoadh>:
     516:	81 34       	cpi	r24, 0x41	; 65
     518:	31 f0       	breq	.+12     	; 0x526 <_Z14txSidhToTxLoadh+0x10>
     51a:	81 35       	cpi	r24, 0x51	; 81
     51c:	31 f0       	breq	.+12     	; 0x52a <_Z14txSidhToTxLoadh+0x14>
     51e:	81 33       	cpi	r24, 0x31	; 49
     520:	31 f0       	breq	.+12     	; 0x52e <_Z14txSidhToTxLoadh+0x18>
     522:	80 e0       	ldi	r24, 0x00	; 0
     524:	08 95       	ret
     526:	82 e4       	ldi	r24, 0x42	; 66
     528:	08 95       	ret
     52a:	84 e4       	ldi	r24, 0x44	; 68
     52c:	08 95       	ret
     52e:	80 e4       	ldi	r24, 0x40	; 64
     530:	08 95       	ret

00000532 <_ZN7MCP_CAN13mcp2515_resetEv>:
     532:	cf 93       	push	r28
     534:	df 93       	push	r29
     536:	ec 01       	movw	r28, r24
     538:	80 e5       	ldi	r24, 0x50	; 80
     53a:	91 e0       	ldi	r25, 0x01	; 1
     53c:	0e 94 4b 02 	call	0x496	; 0x496 <_ZN8SPIClass16beginTransactionE11SPISettings>
     540:	60 e0       	ldi	r22, 0x00	; 0
     542:	8e 81       	ldd	r24, Y+6	; 0x06
     544:	0e 94 a2 07 	call	0xf44	; 0xf44 <digitalWrite>
     548:	80 ec       	ldi	r24, 0xC0	; 192
     54a:	0e 94 65 02 	call	0x4ca	; 0x4ca <_ZN8SPIClass8transferEh>
     54e:	61 e0       	ldi	r22, 0x01	; 1
     550:	8e 81       	ldd	r24, Y+6	; 0x06
     552:	0e 94 a2 07 	call	0xf44	; 0xf44 <digitalWrite>
     556:	0e 94 6c 02 	call	0x4d8	; 0x4d8 <_ZN8SPIClass14endTransactionEv>
     55a:	6a e0       	ldi	r22, 0x0A	; 10
     55c:	70 e0       	ldi	r23, 0x00	; 0
     55e:	80 e0       	ldi	r24, 0x00	; 0
     560:	90 e0       	ldi	r25, 0x00	; 0
     562:	df 91       	pop	r29
     564:	cf 91       	pop	r28
     566:	0c 94 bb 06 	jmp	0xd76	; 0xd76 <delay>

0000056a <_ZN7MCP_CAN20mcp2515_readRegisterEh>:
     56a:	1f 93       	push	r17
     56c:	cf 93       	push	r28
     56e:	df 93       	push	r29
     570:	ec 01       	movw	r28, r24
     572:	16 2f       	mov	r17, r22
     574:	80 e5       	ldi	r24, 0x50	; 80
     576:	91 e0       	ldi	r25, 0x01	; 1
     578:	0e 94 4b 02 	call	0x496	; 0x496 <_ZN8SPIClass16beginTransactionE11SPISettings>
     57c:	60 e0       	ldi	r22, 0x00	; 0
     57e:	8e 81       	ldd	r24, Y+6	; 0x06
     580:	0e 94 a2 07 	call	0xf44	; 0xf44 <digitalWrite>
     584:	83 e0       	ldi	r24, 0x03	; 3
     586:	0e 94 65 02 	call	0x4ca	; 0x4ca <_ZN8SPIClass8transferEh>
     58a:	81 2f       	mov	r24, r17
     58c:	0e 94 65 02 	call	0x4ca	; 0x4ca <_ZN8SPIClass8transferEh>
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	0e 94 65 02 	call	0x4ca	; 0x4ca <_ZN8SPIClass8transferEh>
     596:	18 2f       	mov	r17, r24
     598:	61 e0       	ldi	r22, 0x01	; 1
     59a:	8e 81       	ldd	r24, Y+6	; 0x06
     59c:	0e 94 a2 07 	call	0xf44	; 0xf44 <digitalWrite>
     5a0:	0e 94 6c 02 	call	0x4d8	; 0x4d8 <_ZN8SPIClass14endTransactionEv>
     5a4:	81 2f       	mov	r24, r17
     5a6:	df 91       	pop	r29
     5a8:	cf 91       	pop	r28
     5aa:	1f 91       	pop	r17
     5ac:	08 95       	ret

000005ae <_ZN7MCP_CAN19mcp2515_setRegisterEhh>:
     5ae:	ef 92       	push	r14
     5b0:	ff 92       	push	r15
     5b2:	1f 93       	push	r17
     5b4:	cf 93       	push	r28
     5b6:	df 93       	push	r29
     5b8:	1f 92       	push	r1
     5ba:	cd b7       	in	r28, 0x3d	; 61
     5bc:	de b7       	in	r29, 0x3e	; 62
     5be:	7c 01       	movw	r14, r24
     5c0:	16 2f       	mov	r17, r22
     5c2:	80 e5       	ldi	r24, 0x50	; 80
     5c4:	91 e0       	ldi	r25, 0x01	; 1
     5c6:	49 83       	std	Y+1, r20	; 0x01
     5c8:	0e 94 4b 02 	call	0x496	; 0x496 <_ZN8SPIClass16beginTransactionE11SPISettings>
     5cc:	60 e0       	ldi	r22, 0x00	; 0
     5ce:	f7 01       	movw	r30, r14
     5d0:	86 81       	ldd	r24, Z+6	; 0x06
     5d2:	0e 94 a2 07 	call	0xf44	; 0xf44 <digitalWrite>
     5d6:	82 e0       	ldi	r24, 0x02	; 2
     5d8:	0e 94 65 02 	call	0x4ca	; 0x4ca <_ZN8SPIClass8transferEh>
     5dc:	81 2f       	mov	r24, r17
     5de:	0e 94 65 02 	call	0x4ca	; 0x4ca <_ZN8SPIClass8transferEh>
     5e2:	49 81       	ldd	r20, Y+1	; 0x01
     5e4:	84 2f       	mov	r24, r20
     5e6:	0e 94 65 02 	call	0x4ca	; 0x4ca <_ZN8SPIClass8transferEh>
     5ea:	61 e0       	ldi	r22, 0x01	; 1
     5ec:	f7 01       	movw	r30, r14
     5ee:	86 81       	ldd	r24, Z+6	; 0x06
     5f0:	0e 94 a2 07 	call	0xf44	; 0xf44 <digitalWrite>
     5f4:	0f 90       	pop	r0
     5f6:	df 91       	pop	r29
     5f8:	cf 91       	pop	r28
     5fa:	1f 91       	pop	r17
     5fc:	ff 90       	pop	r15
     5fe:	ef 90       	pop	r14
     600:	0c 94 6c 02 	jmp	0x4d8	; 0x4d8 <_ZN8SPIClass14endTransactionEv>

00000604 <_ZN7MCP_CAN22mcp2515_modifyRegisterEhhh>:
     604:	ef 92       	push	r14
     606:	ff 92       	push	r15
     608:	1f 93       	push	r17
     60a:	cf 93       	push	r28
     60c:	df 93       	push	r29
     60e:	00 d0       	rcall	.+0      	; 0x610 <_ZN7MCP_CAN22mcp2515_modifyRegisterEhhh+0xc>
     610:	cd b7       	in	r28, 0x3d	; 61
     612:	de b7       	in	r29, 0x3e	; 62
     614:	7c 01       	movw	r14, r24
     616:	16 2f       	mov	r17, r22
     618:	80 e5       	ldi	r24, 0x50	; 80
     61a:	91 e0       	ldi	r25, 0x01	; 1
     61c:	2a 83       	std	Y+2, r18	; 0x02
     61e:	49 83       	std	Y+1, r20	; 0x01
     620:	0e 94 4b 02 	call	0x496	; 0x496 <_ZN8SPIClass16beginTransactionE11SPISettings>
     624:	60 e0       	ldi	r22, 0x00	; 0
     626:	f7 01       	movw	r30, r14
     628:	86 81       	ldd	r24, Z+6	; 0x06
     62a:	0e 94 a2 07 	call	0xf44	; 0xf44 <digitalWrite>
     62e:	85 e0       	ldi	r24, 0x05	; 5
     630:	0e 94 65 02 	call	0x4ca	; 0x4ca <_ZN8SPIClass8transferEh>
     634:	81 2f       	mov	r24, r17
     636:	0e 94 65 02 	call	0x4ca	; 0x4ca <_ZN8SPIClass8transferEh>
     63a:	49 81       	ldd	r20, Y+1	; 0x01
     63c:	84 2f       	mov	r24, r20
     63e:	0e 94 65 02 	call	0x4ca	; 0x4ca <_ZN8SPIClass8transferEh>
     642:	2a 81       	ldd	r18, Y+2	; 0x02
     644:	82 2f       	mov	r24, r18
     646:	0e 94 65 02 	call	0x4ca	; 0x4ca <_ZN8SPIClass8transferEh>
     64a:	61 e0       	ldi	r22, 0x01	; 1
     64c:	f7 01       	movw	r30, r14
     64e:	86 81       	ldd	r24, Z+6	; 0x06
     650:	0e 94 a2 07 	call	0xf44	; 0xf44 <digitalWrite>
     654:	0f 90       	pop	r0
     656:	0f 90       	pop	r0
     658:	df 91       	pop	r29
     65a:	cf 91       	pop	r28
     65c:	1f 91       	pop	r17
     65e:	ff 90       	pop	r15
     660:	ef 90       	pop	r14
     662:	0c 94 6c 02 	jmp	0x4d8	; 0x4d8 <_ZN8SPIClass14endTransactionEv>

00000666 <_ZN7MCP_CAN18mcp2515_readStatusEv>:
     666:	1f 93       	push	r17
     668:	cf 93       	push	r28
     66a:	df 93       	push	r29
     66c:	ec 01       	movw	r28, r24
     66e:	80 e5       	ldi	r24, 0x50	; 80
     670:	91 e0       	ldi	r25, 0x01	; 1
     672:	0e 94 4b 02 	call	0x496	; 0x496 <_ZN8SPIClass16beginTransactionE11SPISettings>
     676:	60 e0       	ldi	r22, 0x00	; 0
     678:	8e 81       	ldd	r24, Y+6	; 0x06
     67a:	0e 94 a2 07 	call	0xf44	; 0xf44 <digitalWrite>
     67e:	80 ea       	ldi	r24, 0xA0	; 160
     680:	0e 94 65 02 	call	0x4ca	; 0x4ca <_ZN8SPIClass8transferEh>
     684:	80 e0       	ldi	r24, 0x00	; 0
     686:	0e 94 65 02 	call	0x4ca	; 0x4ca <_ZN8SPIClass8transferEh>
     68a:	18 2f       	mov	r17, r24
     68c:	61 e0       	ldi	r22, 0x01	; 1
     68e:	8e 81       	ldd	r24, Y+6	; 0x06
     690:	0e 94 a2 07 	call	0xf44	; 0xf44 <digitalWrite>
     694:	0e 94 6c 02 	call	0x4d8	; 0x4d8 <_ZN8SPIClass14endTransactionEv>
     698:	81 2f       	mov	r24, r17
     69a:	df 91       	pop	r29
     69c:	cf 91       	pop	r28
     69e:	1f 91       	pop	r17
     6a0:	08 95       	ret

000006a2 <_ZN7MCP_CAN23mcp2515_setCANCTRL_ModeEh>:
     6a2:	0f 93       	push	r16
     6a4:	1f 93       	push	r17
     6a6:	cf 93       	push	r28
     6a8:	8c 01       	movw	r16, r24
     6aa:	c6 2f       	mov	r28, r22
     6ac:	26 2f       	mov	r18, r22
     6ae:	40 ee       	ldi	r20, 0xE0	; 224
     6b0:	6f e0       	ldi	r22, 0x0F	; 15
     6b2:	0e 94 02 03 	call	0x604	; 0x604 <_ZN7MCP_CAN22mcp2515_modifyRegisterEhhh>
     6b6:	6f e0       	ldi	r22, 0x0F	; 15
     6b8:	c8 01       	movw	r24, r16
     6ba:	0e 94 b5 02 	call	0x56a	; 0x56a <_ZN7MCP_CAN20mcp2515_readRegisterEh>
     6be:	98 2f       	mov	r25, r24
     6c0:	90 7e       	andi	r25, 0xE0	; 224
     6c2:	81 e0       	ldi	r24, 0x01	; 1
     6c4:	9c 13       	cpse	r25, r28
     6c6:	01 c0       	rjmp	.+2      	; 0x6ca <_ZN7MCP_CAN23mcp2515_setCANCTRL_ModeEh+0x28>
     6c8:	80 e0       	ldi	r24, 0x00	; 0
     6ca:	cf 91       	pop	r28
     6cc:	1f 91       	pop	r17
     6ce:	0f 91       	pop	r16
     6d0:	08 95       	ret

000006d2 <_ZN7MCP_CAN18mcp2515_configRateEhh>:
     6d2:	0f 93       	push	r16
     6d4:	1f 93       	push	r17
     6d6:	cf 93       	push	r28
     6d8:	df 93       	push	r29
     6da:	41 30       	cpi	r20, 0x01	; 1
     6dc:	21 f0       	breq	.+8      	; 0x6e6 <_ZN7MCP_CAN18mcp2515_configRateEhh+0x14>
     6de:	42 30       	cpi	r20, 0x02	; 2
     6e0:	09 f4       	brne	.+2      	; 0x6e4 <_ZN7MCP_CAN18mcp2515_configRateEhh+0x12>
     6e2:	3f c0       	rjmp	.+126    	; 0x762 <_ZN7MCP_CAN18mcp2515_configRateEhh+0x90>
     6e4:	71 c0       	rjmp	.+226    	; 0x7c8 <_ZN7MCP_CAN18mcp2515_configRateEhh+0xf6>
     6e6:	46 2f       	mov	r20, r22
     6e8:	50 e0       	ldi	r21, 0x00	; 0
     6ea:	fa 01       	movw	r30, r20
     6ec:	31 97       	sbiw	r30, 0x01	; 1
     6ee:	e2 31       	cpi	r30, 0x12	; 18
     6f0:	f1 05       	cpc	r31, r1
     6f2:	08 f0       	brcs	.+2      	; 0x6f6 <_ZN7MCP_CAN18mcp2515_configRateEhh+0x24>
     6f4:	69 c0       	rjmp	.+210    	; 0x7c8 <_ZN7MCP_CAN18mcp2515_configRateEhh+0xf6>
     6f6:	ec 5c       	subi	r30, 0xCC	; 204
     6f8:	ff 4f       	sbci	r31, 0xFF	; 255
     6fa:	0c 94 6b 0d 	jmp	0x1ad6	; 0x1ad6 <__tablejump2__>
     6fe:	c7 e8       	ldi	r28, 0x87	; 135
     700:	df ef       	ldi	r29, 0xFF	; 255
     702:	6e c0       	rjmp	.+220    	; 0x7e0 <_ZN7MCP_CAN18mcp2515_configRateEhh+0x10e>
     704:	c7 e0       	ldi	r28, 0x07	; 7
     706:	da eb       	ldi	r29, 0xBA	; 186
     708:	67 c0       	rjmp	.+206    	; 0x7d8 <_ZN7MCP_CAN18mcp2515_configRateEhh+0x106>
     70a:	c5 e8       	ldi	r28, 0x85	; 133
     70c:	d1 ef       	ldi	r29, 0xF1	; 241
     70e:	64 c0       	rjmp	.+200    	; 0x7d8 <_ZN7MCP_CAN18mcp2515_configRateEhh+0x106>
     710:	c7 e0       	ldi	r28, 0x07	; 7
     712:	de eb       	ldi	r29, 0xBE	; 190
     714:	49 e0       	ldi	r20, 0x09	; 9
     716:	65 c0       	rjmp	.+202    	; 0x7e2 <_ZN7MCP_CAN18mcp2515_configRateEhh+0x110>
     718:	c7 e8       	ldi	r28, 0x87	; 135
     71a:	df ef       	ldi	r29, 0xFF	; 255
     71c:	35 c0       	rjmp	.+106    	; 0x788 <_ZN7MCP_CAN18mcp2515_configRateEhh+0xb6>
     71e:	c7 e8       	ldi	r28, 0x87	; 135
     720:	da ef       	ldi	r29, 0xFA	; 250
     722:	32 c0       	rjmp	.+100    	; 0x788 <_ZN7MCP_CAN18mcp2515_configRateEhh+0xb6>
     724:	c7 e8       	ldi	r28, 0x87	; 135
     726:	df ef       	ldi	r29, 0xFF	; 255
     728:	36 c0       	rjmp	.+108    	; 0x796 <_ZN7MCP_CAN18mcp2515_configRateEhh+0xc4>
     72a:	c7 e0       	ldi	r28, 0x07	; 7
     72c:	de eb       	ldi	r29, 0xBE	; 190
     72e:	33 c0       	rjmp	.+102    	; 0x796 <_ZN7MCP_CAN18mcp2515_configRateEhh+0xc4>
     730:	c7 e0       	ldi	r28, 0x07	; 7
     732:	dd ea       	ldi	r29, 0xAD	; 173
     734:	30 c0       	rjmp	.+96     	; 0x796 <_ZN7MCP_CAN18mcp2515_configRateEhh+0xc4>
     736:	c7 e8       	ldi	r28, 0x87	; 135
     738:	da ef       	ldi	r29, 0xFA	; 250
     73a:	2d c0       	rjmp	.+90     	; 0x796 <_ZN7MCP_CAN18mcp2515_configRateEhh+0xc4>
     73c:	c6 e8       	ldi	r28, 0x86	; 134
     73e:	d0 ef       	ldi	r29, 0xF0	; 240
     740:	2a c0       	rjmp	.+84     	; 0x796 <_ZN7MCP_CAN18mcp2515_configRateEhh+0xc4>
     742:	c7 e8       	ldi	r28, 0x87	; 135
     744:	da ef       	ldi	r29, 0xFA	; 250
     746:	2e c0       	rjmp	.+92     	; 0x7a4 <_ZN7MCP_CAN18mcp2515_configRateEhh+0xd2>
     748:	c5 e8       	ldi	r28, 0x85	; 133
     74a:	d1 ef       	ldi	r29, 0xF1	; 241
     74c:	41 e4       	ldi	r20, 0x41	; 65
     74e:	49 c0       	rjmp	.+146    	; 0x7e2 <_ZN7MCP_CAN18mcp2515_configRateEhh+0x110>
     750:	c6 e8       	ldi	r28, 0x86	; 134
     752:	d0 ef       	ldi	r29, 0xF0	; 240
     754:	2e c0       	rjmp	.+92     	; 0x7b2 <_ZN7MCP_CAN18mcp2515_configRateEhh+0xe0>
     756:	c4 e0       	ldi	r28, 0x04	; 4
     758:	d0 ea       	ldi	r29, 0xA0	; 160
     75a:	2b c0       	rjmp	.+86     	; 0x7b2 <_ZN7MCP_CAN18mcp2515_configRateEhh+0xe0>
     75c:	c2 e8       	ldi	r28, 0x82	; 130
     75e:	d0 ed       	ldi	r29, 0xD0	; 208
     760:	28 c0       	rjmp	.+80     	; 0x7b2 <_ZN7MCP_CAN18mcp2515_configRateEhh+0xe0>
     762:	46 2f       	mov	r20, r22
     764:	50 e0       	ldi	r21, 0x00	; 0
     766:	fa 01       	movw	r30, r20
     768:	31 97       	sbiw	r30, 0x01	; 1
     76a:	e2 31       	cpi	r30, 0x12	; 18
     76c:	f1 05       	cpc	r31, r1
     76e:	60 f5       	brcc	.+88     	; 0x7c8 <_ZN7MCP_CAN18mcp2515_configRateEhh+0xf6>
     770:	ea 5b       	subi	r30, 0xBA	; 186
     772:	ff 4f       	sbci	r31, 0xFF	; 255
     774:	0c 94 6b 0d 	jmp	0x1ad6	; 0x1ad6 <__tablejump2__>
     778:	c7 e0       	ldi	r28, 0x07	; 7
     77a:	df eb       	ldi	r29, 0xBF	; 191
     77c:	2d c0       	rjmp	.+90     	; 0x7d8 <_ZN7MCP_CAN18mcp2515_configRateEhh+0x106>
     77e:	c7 e0       	ldi	r28, 0x07	; 7
     780:	df eb       	ldi	r29, 0xBF	; 191
     782:	02 c0       	rjmp	.+4      	; 0x788 <_ZN7MCP_CAN18mcp2515_configRateEhh+0xb6>
     784:	c4 e0       	ldi	r28, 0x04	; 4
     786:	d4 ea       	ldi	r29, 0xA4	; 164
     788:	47 e0       	ldi	r20, 0x07	; 7
     78a:	2b c0       	rjmp	.+86     	; 0x7e2 <_ZN7MCP_CAN18mcp2515_configRateEhh+0x110>
     78c:	c7 e0       	ldi	r28, 0x07	; 7
     78e:	df eb       	ldi	r29, 0xBF	; 191
     790:	02 c0       	rjmp	.+4      	; 0x796 <_ZN7MCP_CAN18mcp2515_configRateEhh+0xc4>
     792:	c6 e0       	ldi	r28, 0x06	; 6
     794:	d4 eb       	ldi	r29, 0xB4	; 180
     796:	43 e0       	ldi	r20, 0x03	; 3
     798:	24 c0       	rjmp	.+72     	; 0x7e2 <_ZN7MCP_CAN18mcp2515_configRateEhh+0x110>
     79a:	c7 e0       	ldi	r28, 0x07	; 7
     79c:	df eb       	ldi	r29, 0xBF	; 191
     79e:	02 c0       	rjmp	.+4      	; 0x7a4 <_ZN7MCP_CAN18mcp2515_configRateEhh+0xd2>
     7a0:	c6 e0       	ldi	r28, 0x06	; 6
     7a2:	d4 eb       	ldi	r29, 0xB4	; 180
     7a4:	41 e0       	ldi	r20, 0x01	; 1
     7a6:	1d c0       	rjmp	.+58     	; 0x7e2 <_ZN7MCP_CAN18mcp2515_configRateEhh+0x110>
     7a8:	c5 e0       	ldi	r28, 0x05	; 5
     7aa:	d1 eb       	ldi	r29, 0xB1	; 177
     7ac:	fb cf       	rjmp	.-10     	; 0x7a4 <_ZN7MCP_CAN18mcp2515_configRateEhh+0xd2>
     7ae:	c6 e0       	ldi	r28, 0x06	; 6
     7b0:	d4 eb       	ldi	r29, 0xB4	; 180
     7b2:	40 e0       	ldi	r20, 0x00	; 0
     7b4:	16 c0       	rjmp	.+44     	; 0x7e2 <_ZN7MCP_CAN18mcp2515_configRateEhh+0x110>
     7b6:	c5 e0       	ldi	r28, 0x05	; 5
     7b8:	d1 eb       	ldi	r29, 0xB1	; 177
     7ba:	fb cf       	rjmp	.-10     	; 0x7b2 <_ZN7MCP_CAN18mcp2515_configRateEhh+0xe0>
     7bc:	c2 e0       	ldi	r28, 0x02	; 2
     7be:	d0 e9       	ldi	r29, 0x90	; 144
     7c0:	f8 cf       	rjmp	.-16     	; 0x7b2 <_ZN7MCP_CAN18mcp2515_configRateEhh+0xe0>
     7c2:	c0 e0       	ldi	r28, 0x00	; 0
     7c4:	d0 e8       	ldi	r29, 0x80	; 128
     7c6:	f5 cf       	rjmp	.-22     	; 0x7b2 <_ZN7MCP_CAN18mcp2515_configRateEhh+0xe0>
     7c8:	81 e0       	ldi	r24, 0x01	; 1
     7ca:	1a c0       	rjmp	.+52     	; 0x800 <_ZN7MCP_CAN18mcp2515_configRateEhh+0x12e>
     7cc:	c7 e8       	ldi	r28, 0x87	; 135
     7ce:	df ef       	ldi	r29, 0xFF	; 255
     7d0:	4f e3       	ldi	r20, 0x3F	; 63
     7d2:	07 c0       	rjmp	.+14     	; 0x7e2 <_ZN7MCP_CAN18mcp2515_configRateEhh+0x110>
     7d4:	c7 e8       	ldi	r28, 0x87	; 135
     7d6:	df ef       	ldi	r29, 0xFF	; 255
     7d8:	4f e0       	ldi	r20, 0x0F	; 15
     7da:	03 c0       	rjmp	.+6      	; 0x7e2 <_ZN7MCP_CAN18mcp2515_configRateEhh+0x110>
     7dc:	c7 e0       	ldi	r28, 0x07	; 7
     7de:	df eb       	ldi	r29, 0xBF	; 191
     7e0:	4f e1       	ldi	r20, 0x1F	; 31
     7e2:	8c 01       	movw	r16, r24
     7e4:	6a e2       	ldi	r22, 0x2A	; 42
     7e6:	0e 94 d7 02 	call	0x5ae	; 0x5ae <_ZN7MCP_CAN19mcp2515_setRegisterEhh>
     7ea:	4d 2f       	mov	r20, r29
     7ec:	69 e2       	ldi	r22, 0x29	; 41
     7ee:	c8 01       	movw	r24, r16
     7f0:	0e 94 d7 02 	call	0x5ae	; 0x5ae <_ZN7MCP_CAN19mcp2515_setRegisterEhh>
     7f4:	4c 2f       	mov	r20, r28
     7f6:	68 e2       	ldi	r22, 0x28	; 40
     7f8:	c8 01       	movw	r24, r16
     7fa:	0e 94 d7 02 	call	0x5ae	; 0x5ae <_ZN7MCP_CAN19mcp2515_setRegisterEhh>
     7fe:	80 e0       	ldi	r24, 0x00	; 0
     800:	df 91       	pop	r29
     802:	cf 91       	pop	r28
     804:	1f 91       	pop	r17
     806:	0f 91       	pop	r16
     808:	08 95       	ret

0000080a <_ZN7MCP_CAN22mcp2515_initCANBuffersEv>:
     80a:	0f 93       	push	r16
     80c:	1f 93       	push	r17
     80e:	cf 93       	push	r28
     810:	8c 01       	movw	r16, r24
     812:	c0 e3       	ldi	r28, 0x30	; 48
     814:	40 e0       	ldi	r20, 0x00	; 0
     816:	6c 2f       	mov	r22, r28
     818:	c8 01       	movw	r24, r16
     81a:	0e 94 d7 02 	call	0x5ae	; 0x5ae <_ZN7MCP_CAN19mcp2515_setRegisterEhh>
     81e:	60 e1       	ldi	r22, 0x10	; 16
     820:	6c 0f       	add	r22, r28
     822:	40 e0       	ldi	r20, 0x00	; 0
     824:	c8 01       	movw	r24, r16
     826:	0e 94 d7 02 	call	0x5ae	; 0x5ae <_ZN7MCP_CAN19mcp2515_setRegisterEhh>
     82a:	60 e2       	ldi	r22, 0x20	; 32
     82c:	6c 0f       	add	r22, r28
     82e:	40 e0       	ldi	r20, 0x00	; 0
     830:	c8 01       	movw	r24, r16
     832:	0e 94 d7 02 	call	0x5ae	; 0x5ae <_ZN7MCP_CAN19mcp2515_setRegisterEhh>
     836:	cf 5f       	subi	r28, 0xFF	; 255
     838:	ce 33       	cpi	r28, 0x3E	; 62
     83a:	61 f7       	brne	.-40     	; 0x814 <_ZN7MCP_CAN22mcp2515_initCANBuffersEv+0xa>
     83c:	40 e0       	ldi	r20, 0x00	; 0
     83e:	60 e6       	ldi	r22, 0x60	; 96
     840:	c8 01       	movw	r24, r16
     842:	0e 94 d7 02 	call	0x5ae	; 0x5ae <_ZN7MCP_CAN19mcp2515_setRegisterEhh>
     846:	40 e0       	ldi	r20, 0x00	; 0
     848:	60 e7       	ldi	r22, 0x70	; 112
     84a:	c8 01       	movw	r24, r16
     84c:	cf 91       	pop	r28
     84e:	1f 91       	pop	r17
     850:	0f 91       	pop	r16
     852:	0c 94 d7 02 	jmp	0x5ae	; 0x5ae <_ZN7MCP_CAN19mcp2515_setRegisterEhh>

00000856 <_ZN7MCP_CAN12mcp2515_initEhh>:
     856:	ef 92       	push	r14
     858:	ff 92       	push	r15
     85a:	0f 93       	push	r16
     85c:	1f 93       	push	r17
     85e:	cf 93       	push	r28
     860:	df 93       	push	r29
     862:	1f 92       	push	r1
     864:	cd b7       	in	r28, 0x3d	; 61
     866:	de b7       	in	r29, 0x3e	; 62
     868:	7c 01       	movw	r14, r24
     86a:	06 2f       	mov	r16, r22
     86c:	49 83       	std	Y+1, r20	; 0x01
     86e:	0e 94 99 02 	call	0x532	; 0x532 <_ZN7MCP_CAN13mcp2515_resetEv>
     872:	60 e8       	ldi	r22, 0x80	; 128
     874:	c7 01       	movw	r24, r14
     876:	0e 94 51 03 	call	0x6a2	; 0x6a2 <_ZN7MCP_CAN23mcp2515_setCANCTRL_ModeEh>
     87a:	18 2f       	mov	r17, r24
     87c:	49 81       	ldd	r20, Y+1	; 0x01
     87e:	88 23       	and	r24, r24
     880:	19 f0       	breq	.+6      	; 0x888 <_ZN7MCP_CAN12mcp2515_initEhh+0x32>
     882:	68 eb       	ldi	r22, 0xB8	; 184
     884:	71 e0       	ldi	r23, 0x01	; 1
     886:	37 c0       	rjmp	.+110    	; 0x8f6 <_ZN7MCP_CAN12mcp2515_initEhh+0xa0>
     888:	62 ed       	ldi	r22, 0xD2	; 210
     88a:	71 e0       	ldi	r23, 0x01	; 1
     88c:	8b e5       	ldi	r24, 0x5B	; 91
     88e:	93 e0       	ldi	r25, 0x03	; 3
     890:	49 83       	std	Y+1, r20	; 0x01
     892:	0e 94 f8 09 	call	0x13f0	; 0x13f0 <_ZN5Print5printEPKc>
     896:	49 81       	ldd	r20, Y+1	; 0x01
     898:	60 2f       	mov	r22, r16
     89a:	c7 01       	movw	r24, r14
     89c:	0e 94 69 03 	call	0x6d2	; 0x6d2 <_ZN7MCP_CAN18mcp2515_configRateEhh>
     8a0:	88 23       	and	r24, r24
     8a2:	19 f0       	breq	.+6      	; 0x8aa <_ZN7MCP_CAN12mcp2515_initEhh+0x54>
     8a4:	60 ef       	ldi	r22, 0xF0	; 240
     8a6:	71 e0       	ldi	r23, 0x01	; 1
     8a8:	26 c0       	rjmp	.+76     	; 0x8f6 <_ZN7MCP_CAN12mcp2515_initEhh+0xa0>
     8aa:	62 e0       	ldi	r22, 0x02	; 2
     8ac:	72 e0       	ldi	r23, 0x02	; 2
     8ae:	8b e5       	ldi	r24, 0x5B	; 91
     8b0:	93 e0       	ldi	r25, 0x03	; 3
     8b2:	0e 94 f8 09 	call	0x13f0	; 0x13f0 <_ZN5Print5printEPKc>
     8b6:	c7 01       	movw	r24, r14
     8b8:	0e 94 05 04 	call	0x80a	; 0x80a <_ZN7MCP_CAN22mcp2515_initCANBuffersEv>
     8bc:	43 e0       	ldi	r20, 0x03	; 3
     8be:	6b e2       	ldi	r22, 0x2B	; 43
     8c0:	c7 01       	movw	r24, r14
     8c2:	0e 94 d7 02 	call	0x5ae	; 0x5ae <_ZN7MCP_CAN19mcp2515_setRegisterEhh>
     8c6:	24 e0       	ldi	r18, 0x04	; 4
     8c8:	44 e6       	ldi	r20, 0x64	; 100
     8ca:	60 e6       	ldi	r22, 0x60	; 96
     8cc:	c7 01       	movw	r24, r14
     8ce:	0e 94 02 03 	call	0x604	; 0x604 <_ZN7MCP_CAN22mcp2515_modifyRegisterEhhh>
     8d2:	20 e0       	ldi	r18, 0x00	; 0
     8d4:	40 e6       	ldi	r20, 0x60	; 96
     8d6:	60 e7       	ldi	r22, 0x70	; 112
     8d8:	c7 01       	movw	r24, r14
     8da:	0e 94 02 03 	call	0x604	; 0x604 <_ZN7MCP_CAN22mcp2515_modifyRegisterEhhh>
     8de:	60 e0       	ldi	r22, 0x00	; 0
     8e0:	c7 01       	movw	r24, r14
     8e2:	0e 94 51 03 	call	0x6a2	; 0x6a2 <_ZN7MCP_CAN23mcp2515_setCANCTRL_ModeEh>
     8e6:	18 2f       	mov	r17, r24
     8e8:	88 23       	and	r24, r24
     8ea:	19 f0       	breq	.+6      	; 0x8f2 <_ZN7MCP_CAN12mcp2515_initEhh+0x9c>
     8ec:	67 e1       	ldi	r22, 0x17	; 23
     8ee:	72 e0       	ldi	r23, 0x02	; 2
     8f0:	02 c0       	rjmp	.+4      	; 0x8f6 <_ZN7MCP_CAN12mcp2515_initEhh+0xa0>
     8f2:	62 e3       	ldi	r22, 0x32	; 50
     8f4:	72 e0       	ldi	r23, 0x02	; 2
     8f6:	8b e5       	ldi	r24, 0x5B	; 91
     8f8:	93 e0       	ldi	r25, 0x03	; 3
     8fa:	0e 94 f8 09 	call	0x13f0	; 0x13f0 <_ZN5Print5printEPKc>
     8fe:	81 2f       	mov	r24, r17
     900:	0f 90       	pop	r0
     902:	df 91       	pop	r29
     904:	cf 91       	pop	r28
     906:	1f 91       	pop	r17
     908:	0f 91       	pop	r16
     90a:	ff 90       	pop	r15
     90c:	ef 90       	pop	r14
     90e:	08 95       	ret

00000910 <_Z17mcp2515_id_to_bufhmPh>:
     910:	f9 01       	movw	r30, r18
     912:	81 30       	cpi	r24, 0x01	; 1
     914:	b1 f4       	brne	.+44     	; 0x942 <_Z17mcp2515_id_to_bufhmPh+0x32>
     916:	43 83       	std	Z+3, r20	; 0x03
     918:	52 83       	std	Z+2, r21	; 0x02
     91a:	ab 01       	movw	r20, r22
     91c:	66 27       	eor	r22, r22
     91e:	77 27       	eor	r23, r23
     920:	94 2f       	mov	r25, r20
     922:	9c 71       	andi	r25, 0x1C	; 28
     924:	84 2f       	mov	r24, r20
     926:	83 70       	andi	r24, 0x03	; 3
     928:	28 e0       	ldi	r18, 0x08	; 8
     92a:	92 9f       	mul	r25, r18
     92c:	80 0d       	add	r24, r0
     92e:	11 24       	eor	r1, r1
     930:	88 60       	ori	r24, 0x08	; 8
     932:	81 83       	std	Z+1, r24	; 0x01
     934:	65 e0       	ldi	r22, 0x05	; 5
     936:	56 95       	lsr	r21
     938:	47 95       	ror	r20
     93a:	6a 95       	dec	r22
     93c:	e1 f7       	brne	.-8      	; 0x936 <_Z17mcp2515_id_to_bufhmPh+0x26>
     93e:	40 83       	st	Z, r20
     940:	08 95       	ret
     942:	ca 01       	movw	r24, r20
     944:	23 e0       	ldi	r18, 0x03	; 3
     946:	96 95       	lsr	r25
     948:	87 95       	ror	r24
     94a:	2a 95       	dec	r18
     94c:	e1 f7       	brne	.-8      	; 0x946 <_Z17mcp2515_id_to_bufhmPh+0x36>
     94e:	80 83       	st	Z, r24
     950:	42 95       	swap	r20
     952:	44 0f       	add	r20, r20
     954:	40 7e       	andi	r20, 0xE0	; 224
     956:	41 83       	std	Z+1, r20	; 0x01
     958:	13 82       	std	Z+3, r1	; 0x03
     95a:	12 82       	std	Z+2, r1	; 0x02
     95c:	08 95       	ret

0000095e <_ZN7MCP_CAN22mcp2515_start_transmitEh>:
     95e:	1f 93       	push	r17
     960:	cf 93       	push	r28
     962:	df 93       	push	r29
     964:	ec 01       	movw	r28, r24
     966:	16 2f       	mov	r17, r22
     968:	80 e5       	ldi	r24, 0x50	; 80
     96a:	91 e0       	ldi	r25, 0x01	; 1
     96c:	0e 94 4b 02 	call	0x496	; 0x496 <_ZN8SPIClass16beginTransactionE11SPISettings>
     970:	60 e0       	ldi	r22, 0x00	; 0
     972:	8e 81       	ldd	r24, Y+6	; 0x06
     974:	0e 94 a2 07 	call	0xf44	; 0xf44 <digitalWrite>
     978:	81 2f       	mov	r24, r17
     97a:	0e 94 7d 02 	call	0x4fa	; 0x4fa <_Z11txSidhToRTSh>
     97e:	0e 94 65 02 	call	0x4ca	; 0x4ca <_ZN8SPIClass8transferEh>
     982:	61 e0       	ldi	r22, 0x01	; 1
     984:	8e 81       	ldd	r24, Y+6	; 0x06
     986:	0e 94 a2 07 	call	0xf44	; 0xf44 <digitalWrite>
     98a:	df 91       	pop	r29
     98c:	cf 91       	pop	r28
     98e:	1f 91       	pop	r17
     990:	0c 94 6c 02 	jmp	0x4d8	; 0x4d8 <_ZN8SPIClass14endTransactionEv>

00000994 <_ZN7MCP_CAN20mcp2515_write_canMsgEhmhhhPVKh>:
     994:	8f 92       	push	r8
     996:	9f 92       	push	r9
     998:	af 92       	push	r10
     99a:	bf 92       	push	r11
     99c:	cf 92       	push	r12
     99e:	df 92       	push	r13
     9a0:	ef 92       	push	r14
     9a2:	ff 92       	push	r15
     9a4:	0f 93       	push	r16
     9a6:	1f 93       	push	r17
     9a8:	cf 93       	push	r28
     9aa:	df 93       	push	r29
     9ac:	cd b7       	in	r28, 0x3d	; 61
     9ae:	de b7       	in	r29, 0x3e	; 62
     9b0:	28 97       	sbiw	r28, 0x08	; 8
     9b2:	0f b6       	in	r0, 0x3f	; 63
     9b4:	f8 94       	cli
     9b6:	de bf       	out	0x3e, r29	; 62
     9b8:	0f be       	out	0x3f, r0	; 63
     9ba:	cd bf       	out	0x3d, r28	; 61
     9bc:	4c 01       	movw	r8, r24
     9be:	d6 2e       	mov	r13, r22
     9c0:	ba 01       	movw	r22, r20
     9c2:	a9 01       	movw	r20, r18
     9c4:	8d 2d       	mov	r24, r13
     9c6:	4d 83       	std	Y+5, r20	; 0x05
     9c8:	5e 83       	std	Y+6, r21	; 0x06
     9ca:	6f 83       	std	Y+7, r22	; 0x07
     9cc:	78 87       	std	Y+8, r23	; 0x08
     9ce:	0e 94 8b 02 	call	0x516	; 0x516 <_Z14txSidhToTxLoadh>
     9d2:	18 2f       	mov	r17, r24
     9d4:	4d 81       	ldd	r20, Y+5	; 0x05
     9d6:	5e 81       	ldd	r21, Y+6	; 0x06
     9d8:	6f 81       	ldd	r22, Y+7	; 0x07
     9da:	78 85       	ldd	r23, Y+8	; 0x08
     9dc:	e1 10       	cpse	r14, r1
     9de:	02 c0       	rjmp	.+4      	; 0x9e4 <_ZN7MCP_CAN20mcp2515_write_canMsgEhmhhhPVKh+0x50>
     9e0:	f1 2c       	mov	r15, r1
     9e2:	02 c0       	rjmp	.+4      	; 0x9e8 <_ZN7MCP_CAN20mcp2515_write_canMsgEhmhhhPVKh+0x54>
     9e4:	90 e4       	ldi	r25, 0x40	; 64
     9e6:	f9 2e       	mov	r15, r25
     9e8:	9e 01       	movw	r18, r28
     9ea:	2f 5f       	subi	r18, 0xFF	; 255
     9ec:	3f 4f       	sbci	r19, 0xFF	; 255
     9ee:	80 2f       	mov	r24, r16
     9f0:	0e 94 88 04 	call	0x910	; 0x910 <_Z17mcp2515_id_to_bufhmPh>
     9f4:	80 e5       	ldi	r24, 0x50	; 80
     9f6:	91 e0       	ldi	r25, 0x01	; 1
     9f8:	0e 94 4b 02 	call	0x496	; 0x496 <_ZN8SPIClass16beginTransactionE11SPISettings>
     9fc:	60 e0       	ldi	r22, 0x00	; 0
     9fe:	f4 01       	movw	r30, r8
     a00:	86 81       	ldd	r24, Z+6	; 0x06
     a02:	0e 94 a2 07 	call	0xf44	; 0xf44 <digitalWrite>
     a06:	81 2f       	mov	r24, r17
     a08:	0e 94 65 02 	call	0x4ca	; 0x4ca <_ZN8SPIClass8transferEh>
     a0c:	8e 01       	movw	r16, r28
     a0e:	0f 5f       	subi	r16, 0xFF	; 255
     a10:	1f 4f       	sbci	r17, 0xFF	; 255
     a12:	84 e0       	ldi	r24, 0x04	; 4
     a14:	e8 2e       	mov	r14, r24
     a16:	e0 0e       	add	r14, r16
     a18:	f8 01       	movw	r30, r16
     a1a:	81 91       	ld	r24, Z+
     a1c:	8f 01       	movw	r16, r30
     a1e:	0e 94 65 02 	call	0x4ca	; 0x4ca <_ZN8SPIClass8transferEh>
     a22:	e0 12       	cpse	r14, r16
     a24:	f9 cf       	rjmp	.-14     	; 0xa18 <_ZN7MCP_CAN20mcp2515_write_canMsgEhmhhhPVKh+0x84>
     a26:	8f 2d       	mov	r24, r15
     a28:	8c 29       	or	r24, r12
     a2a:	0e 94 65 02 	call	0x4ca	; 0x4ca <_ZN8SPIClass8transferEh>
     a2e:	75 01       	movw	r14, r10
     a30:	10 e0       	ldi	r17, 0x00	; 0
     a32:	1c 15       	cp	r17, r12
     a34:	49 f0       	breq	.+18     	; 0xa48 <_ZN7MCP_CAN20mcp2515_write_canMsgEhmhhhPVKh+0xb4>
     a36:	18 30       	cpi	r17, 0x08	; 8
     a38:	39 f0       	breq	.+14     	; 0xa48 <_ZN7MCP_CAN20mcp2515_write_canMsgEhmhhhPVKh+0xb4>
     a3a:	f7 01       	movw	r30, r14
     a3c:	81 91       	ld	r24, Z+
     a3e:	7f 01       	movw	r14, r30
     a40:	0e 94 65 02 	call	0x4ca	; 0x4ca <_ZN8SPIClass8transferEh>
     a44:	1f 5f       	subi	r17, 0xFF	; 255
     a46:	f5 cf       	rjmp	.-22     	; 0xa32 <_ZN7MCP_CAN20mcp2515_write_canMsgEhmhhhPVKh+0x9e>
     a48:	61 e0       	ldi	r22, 0x01	; 1
     a4a:	f4 01       	movw	r30, r8
     a4c:	86 81       	ldd	r24, Z+6	; 0x06
     a4e:	0e 94 a2 07 	call	0xf44	; 0xf44 <digitalWrite>
     a52:	0e 94 6c 02 	call	0x4d8	; 0x4d8 <_ZN8SPIClass14endTransactionEv>
     a56:	6d 2d       	mov	r22, r13
     a58:	c4 01       	movw	r24, r8
     a5a:	0e 94 af 04 	call	0x95e	; 0x95e <_ZN7MCP_CAN22mcp2515_start_transmitEh>
     a5e:	28 96       	adiw	r28, 0x08	; 8
     a60:	0f b6       	in	r0, 0x3f	; 63
     a62:	f8 94       	cli
     a64:	de bf       	out	0x3e, r29	; 62
     a66:	0f be       	out	0x3f, r0	; 63
     a68:	cd bf       	out	0x3d, r28	; 61
     a6a:	df 91       	pop	r29
     a6c:	cf 91       	pop	r28
     a6e:	1f 91       	pop	r17
     a70:	0f 91       	pop	r16
     a72:	ff 90       	pop	r15
     a74:	ef 90       	pop	r14
     a76:	df 90       	pop	r13
     a78:	cf 90       	pop	r12
     a7a:	bf 90       	pop	r11
     a7c:	af 90       	pop	r10
     a7e:	9f 90       	pop	r9
     a80:	8f 90       	pop	r8
     a82:	08 95       	ret

00000a84 <_ZN7MCP_CAN24mcp2515_getNextFreeTXBufEPh>:
     a84:	ef 92       	push	r14
     a86:	ff 92       	push	r15
     a88:	0f 93       	push	r16
     a8a:	1f 93       	push	r17
     a8c:	cf 93       	push	r28
     a8e:	8c 01       	movw	r16, r24
     a90:	7b 01       	movw	r14, r22
     a92:	0e 94 33 03 	call	0x666	; 0x666 <_ZN7MCP_CAN18mcp2515_readStatusEv>
     a96:	84 75       	andi	r24, 0x54	; 84
     a98:	f7 01       	movw	r30, r14
     a9a:	10 82       	st	Z, r1
     a9c:	84 35       	cpi	r24, 0x54	; 84
     a9e:	91 f1       	breq	.+100    	; 0xb04 <_ZN7MCP_CAN24mcp2515_getNextFreeTXBufEPh+0x80>
     aa0:	f8 01       	movw	r30, r16
     aa2:	91 85       	ldd	r25, Z+9	; 0x09
     aa4:	23 e0       	ldi	r18, 0x03	; 3
     aa6:	30 e0       	ldi	r19, 0x00	; 0
     aa8:	29 1b       	sub	r18, r25
     aaa:	31 09       	sbc	r19, r1
     aac:	69 e0       	ldi	r22, 0x09	; 9
     aae:	73 e0       	ldi	r23, 0x03	; 3
     ab0:	fb 01       	movw	r30, r22
     ab2:	9e 2f       	mov	r25, r30
     ab4:	96 1b       	sub	r25, r22
     ab6:	49 2f       	mov	r20, r25
     ab8:	50 e0       	ldi	r21, 0x00	; 0
     aba:	42 17       	cp	r20, r18
     abc:	53 07       	cpc	r21, r19
     abe:	14 f5       	brge	.+68     	; 0xb04 <_ZN7MCP_CAN24mcp2515_getNextFreeTXBufEPh+0x80>
     ac0:	93 30       	cpi	r25, 0x03	; 3
     ac2:	10 f4       	brcc	.+4      	; 0xac8 <_ZN7MCP_CAN24mcp2515_getNextFreeTXBufEPh+0x44>
     ac4:	c0 81       	ld	r28, Z
     ac6:	01 c0       	rjmp	.+2      	; 0xaca <_ZN7MCP_CAN24mcp2515_getNextFreeTXBufEPh+0x46>
     ac8:	cf ef       	ldi	r28, 0xFF	; 255
     aca:	c8 23       	and	r28, r24
     acc:	31 96       	adiw	r30, 0x01	; 1
     ace:	c1 11       	cpse	r28, r1
     ad0:	f0 cf       	rjmp	.-32     	; 0xab2 <_ZN7MCP_CAN24mcp2515_getNextFreeTXBufEPh+0x2e>
     ad2:	93 30       	cpi	r25, 0x03	; 3
     ad4:	28 f4       	brcc	.+10     	; 0xae0 <_ZN7MCP_CAN24mcp2515_getNextFreeTXBufEPh+0x5c>
     ad6:	fa 01       	movw	r30, r20
     ad8:	e1 5f       	subi	r30, 0xF1	; 241
     ada:	fc 4f       	sbci	r31, 0xFC	; 252
     adc:	20 81       	ld	r18, Z
     ade:	01 c0       	rjmp	.+2      	; 0xae2 <_ZN7MCP_CAN24mcp2515_getNextFreeTXBufEPh+0x5e>
     ae0:	20 e5       	ldi	r18, 0x50	; 80
     ae2:	2f 5f       	subi	r18, 0xFF	; 255
     ae4:	f7 01       	movw	r30, r14
     ae6:	20 83       	st	Z, r18
     ae8:	93 30       	cpi	r25, 0x03	; 3
     aea:	28 f4       	brcc	.+10     	; 0xaf6 <_ZN7MCP_CAN24mcp2515_getNextFreeTXBufEPh+0x72>
     aec:	fa 01       	movw	r30, r20
     aee:	e4 5f       	subi	r30, 0xF4	; 244
     af0:	fc 4f       	sbci	r31, 0xFC	; 252
     af2:	40 81       	ld	r20, Z
     af4:	01 c0       	rjmp	.+2      	; 0xaf8 <_ZN7MCP_CAN24mcp2515_getNextFreeTXBufEPh+0x74>
     af6:	40 e0       	ldi	r20, 0x00	; 0
     af8:	20 e0       	ldi	r18, 0x00	; 0
     afa:	6c e2       	ldi	r22, 0x2C	; 44
     afc:	c8 01       	movw	r24, r16
     afe:	0e 94 02 03 	call	0x604	; 0x604 <_ZN7MCP_CAN22mcp2515_modifyRegisterEhhh>
     b02:	01 c0       	rjmp	.+2      	; 0xb06 <_ZN7MCP_CAN24mcp2515_getNextFreeTXBufEPh+0x82>
     b04:	c2 e0       	ldi	r28, 0x02	; 2
     b06:	8c 2f       	mov	r24, r28
     b08:	cf 91       	pop	r28
     b0a:	1f 91       	pop	r17
     b0c:	0f 91       	pop	r16
     b0e:	ff 90       	pop	r15
     b10:	ef 90       	pop	r14
     b12:	08 95       	ret

00000b14 <_ZN7MCP_CAN7init_CSEh>:
     b14:	cf 93       	push	r28
     b16:	df 93       	push	r29
     b18:	ec 01       	movw	r28, r24
     b1a:	66 23       	and	r22, r22
     b1c:	59 f0       	breq	.+22     	; 0xb34 <_ZN7MCP_CAN7init_CSEh+0x20>
     b1e:	86 2f       	mov	r24, r22
     b20:	6e 83       	std	Y+6, r22	; 0x06
     b22:	61 e0       	ldi	r22, 0x01	; 1
     b24:	0e 94 66 07 	call	0xecc	; 0xecc <pinMode>
     b28:	61 e0       	ldi	r22, 0x01	; 1
     b2a:	8e 81       	ldd	r24, Y+6	; 0x06
     b2c:	df 91       	pop	r29
     b2e:	cf 91       	pop	r28
     b30:	0c 94 a2 07 	jmp	0xf44	; 0xf44 <digitalWrite>
     b34:	df 91       	pop	r29
     b36:	cf 91       	pop	r28
     b38:	08 95       	ret

00000b3a <_ZN7MCP_CANC1Eh>:
     b3a:	fc 01       	movw	r30, r24
     b3c:	11 86       	std	Z+9, r1	; 0x09
     b3e:	24 e3       	ldi	r18, 0x34	; 52
     b40:	33 e0       	ldi	r19, 0x03	; 3
     b42:	30 87       	std	Z+8, r19	; 0x08
     b44:	27 83       	std	Z+7, r18	; 0x07
     b46:	0c 94 8a 05 	jmp	0xb14	; 0xb14 <_ZN7MCP_CAN7init_CSEh>

00000b4a <_ZN7MCP_CAN5beginEhh>:
     b4a:	cf 93       	push	r28
     b4c:	df 93       	push	r29
     b4e:	00 d0       	rcall	.+0      	; 0xb50 <_ZN7MCP_CAN5beginEhh+0x6>
     b50:	00 d0       	rcall	.+0      	; 0xb52 <_ZN7MCP_CAN5beginEhh+0x8>
     b52:	cd b7       	in	r28, 0x3d	; 61
     b54:	de b7       	in	r29, 0x3e	; 62
     b56:	4c 83       	std	Y+4, r20	; 0x04
     b58:	6b 83       	std	Y+3, r22	; 0x03
     b5a:	89 83       	std	Y+1, r24	; 0x01
     b5c:	9a 83       	std	Y+2, r25	; 0x02
     b5e:	0e 94 1e 01 	call	0x23c	; 0x23c <_ZN8SPIClass5beginEv>
     b62:	4c 81       	ldd	r20, Y+4	; 0x04
     b64:	6b 81       	ldd	r22, Y+3	; 0x03
     b66:	89 81       	ldd	r24, Y+1	; 0x01
     b68:	9a 81       	ldd	r25, Y+2	; 0x02
     b6a:	0e 94 2b 04 	call	0x856	; 0x856 <_ZN7MCP_CAN12mcp2515_initEhh>
     b6e:	91 e0       	ldi	r25, 0x01	; 1
     b70:	81 11       	cpse	r24, r1
     b72:	01 c0       	rjmp	.+2      	; 0xb76 <_ZN7MCP_CAN5beginEhh+0x2c>
     b74:	90 e0       	ldi	r25, 0x00	; 0
     b76:	89 2f       	mov	r24, r25
     b78:	0f 90       	pop	r0
     b7a:	0f 90       	pop	r0
     b7c:	0f 90       	pop	r0
     b7e:	0f 90       	pop	r0
     b80:	df 91       	pop	r29
     b82:	cf 91       	pop	r28
     b84:	08 95       	ret

00000b86 <_ZN7MCP_CAN7sendMsgEmhhhPKhb>:
     b86:	2f 92       	push	r2
     b88:	3f 92       	push	r3
     b8a:	4f 92       	push	r4
     b8c:	5f 92       	push	r5
     b8e:	6f 92       	push	r6
     b90:	7f 92       	push	r7
     b92:	8f 92       	push	r8
     b94:	9f 92       	push	r9
     b96:	af 92       	push	r10
     b98:	bf 92       	push	r11
     b9a:	cf 92       	push	r12
     b9c:	df 92       	push	r13
     b9e:	ef 92       	push	r14
     ba0:	ff 92       	push	r15
     ba2:	0f 93       	push	r16
     ba4:	1f 93       	push	r17
     ba6:	cf 93       	push	r28
     ba8:	df 93       	push	r29
     baa:	1f 92       	push	r1
     bac:	cd b7       	in	r28, 0x3d	; 61
     bae:	de b7       	in	r29, 0x3e	; 62
     bb0:	4c 01       	movw	r8, r24
     bb2:	1a 01       	movw	r2, r20
     bb4:	2b 01       	movw	r4, r22
     bb6:	12 2f       	mov	r17, r18
     bb8:	fa 2c       	mov	r15, r10
     bba:	fc 01       	movw	r30, r24
     bbc:	41 83       	std	Z+1, r20	; 0x01
     bbe:	52 83       	std	Z+2, r21	; 0x02
     bc0:	63 83       	std	Z+3, r22	; 0x03
     bc2:	74 83       	std	Z+4, r23	; 0x04
     bc4:	20 83       	st	Z, r18
     bc6:	05 83       	std	Z+5, r16	; 0x05
     bc8:	61 2c       	mov	r6, r1
     bca:	71 2c       	mov	r7, r1
     bcc:	be 01       	movw	r22, r28
     bce:	6f 5f       	subi	r22, 0xFF	; 255
     bd0:	7f 4f       	sbci	r23, 0xFF	; 255
     bd2:	c4 01       	movw	r24, r8
     bd4:	0e 94 42 05 	call	0xa84	; 0xa84 <_ZN7MCP_CAN24mcp2515_getNextFreeTXBufEPh>
     bd8:	ff ef       	ldi	r31, 0xFF	; 255
     bda:	6f 1a       	sub	r6, r31
     bdc:	7f 0a       	sbc	r7, r31
     bde:	82 30       	cpi	r24, 0x02	; 2
     be0:	49 f4       	brne	.+18     	; 0xbf4 <_ZN7MCP_CAN7sendMsgEmhhhPKhb+0x6e>
     be2:	82 e3       	ldi	r24, 0x32	; 50
     be4:	68 16       	cp	r6, r24
     be6:	71 04       	cpc	r7, r1
     be8:	69 f1       	breq	.+90     	; 0xc44 <_ZN7MCP_CAN7sendMsgEmhhhPKhb+0xbe>
     bea:	8a e0       	ldi	r24, 0x0A	; 10
     bec:	90 e0       	ldi	r25, 0x00	; 0
     bee:	0e 94 f7 06 	call	0xdee	; 0xdee <delayMicroseconds>
     bf2:	ec cf       	rjmp	.-40     	; 0xbcc <_ZN7MCP_CAN7sendMsgEmhhhPKhb+0x46>
     bf4:	92 e3       	ldi	r25, 0x32	; 50
     bf6:	69 16       	cp	r6, r25
     bf8:	71 04       	cpc	r7, r1
     bfa:	21 f1       	breq	.+72     	; 0xc44 <_ZN7MCP_CAN7sendMsgEmhhhPKhb+0xbe>
     bfc:	56 01       	movw	r10, r12
     bfe:	ce 2c       	mov	r12, r14
     c00:	e0 2e       	mov	r14, r16
     c02:	01 2f       	mov	r16, r17
     c04:	a2 01       	movw	r20, r4
     c06:	91 01       	movw	r18, r2
     c08:	69 81       	ldd	r22, Y+1	; 0x01
     c0a:	c4 01       	movw	r24, r8
     c0c:	0e 94 ca 04 	call	0x994	; 0x994 <_ZN7MCP_CAN20mcp2515_write_canMsgEhmhhhPVKh>
     c10:	ff 20       	and	r15, r15
     c12:	b1 f0       	breq	.+44     	; 0xc40 <_ZN7MCP_CAN7sendMsgEmhhhPKhb+0xba>
     c14:	00 e0       	ldi	r16, 0x00	; 0
     c16:	10 e0       	ldi	r17, 0x00	; 0
     c18:	0f 5f       	subi	r16, 0xFF	; 255
     c1a:	1f 4f       	sbci	r17, 0xFF	; 255
     c1c:	69 81       	ldd	r22, Y+1	; 0x01
     c1e:	61 50       	subi	r22, 0x01	; 1
     c20:	c4 01       	movw	r24, r8
     c22:	0e 94 b5 02 	call	0x56a	; 0x56a <_ZN7MCP_CAN20mcp2515_readRegisterEh>
     c26:	83 ff       	sbrs	r24, 3
     c28:	08 c0       	rjmp	.+16     	; 0xc3a <_ZN7MCP_CAN7sendMsgEmhhhPKhb+0xb4>
     c2a:	02 33       	cpi	r16, 0x32	; 50
     c2c:	11 05       	cpc	r17, r1
     c2e:	61 f0       	breq	.+24     	; 0xc48 <_ZN7MCP_CAN7sendMsgEmhhhPKhb+0xc2>
     c30:	8a e0       	ldi	r24, 0x0A	; 10
     c32:	90 e0       	ldi	r25, 0x00	; 0
     c34:	0e 94 f7 06 	call	0xdee	; 0xdee <delayMicroseconds>
     c38:	ef cf       	rjmp	.-34     	; 0xc18 <_ZN7MCP_CAN7sendMsgEmhhhPKhb+0x92>
     c3a:	02 33       	cpi	r16, 0x32	; 50
     c3c:	11 05       	cpc	r17, r1
     c3e:	21 f0       	breq	.+8      	; 0xc48 <_ZN7MCP_CAN7sendMsgEmhhhPKhb+0xc2>
     c40:	80 e0       	ldi	r24, 0x00	; 0
     c42:	03 c0       	rjmp	.+6      	; 0xc4a <_ZN7MCP_CAN7sendMsgEmhhhPKhb+0xc4>
     c44:	86 e0       	ldi	r24, 0x06	; 6
     c46:	01 c0       	rjmp	.+2      	; 0xc4a <_ZN7MCP_CAN7sendMsgEmhhhPKhb+0xc4>
     c48:	87 e0       	ldi	r24, 0x07	; 7
     c4a:	0f 90       	pop	r0
     c4c:	df 91       	pop	r29
     c4e:	cf 91       	pop	r28
     c50:	1f 91       	pop	r17
     c52:	0f 91       	pop	r16
     c54:	ff 90       	pop	r15
     c56:	ef 90       	pop	r14
     c58:	df 90       	pop	r13
     c5a:	cf 90       	pop	r12
     c5c:	bf 90       	pop	r11
     c5e:	af 90       	pop	r10
     c60:	9f 90       	pop	r9
     c62:	8f 90       	pop	r8
     c64:	7f 90       	pop	r7
     c66:	6f 90       	pop	r6
     c68:	5f 90       	pop	r5
     c6a:	4f 90       	pop	r4
     c6c:	3f 90       	pop	r3
     c6e:	2f 90       	pop	r2
     c70:	08 95       	ret

00000c72 <_ZN7MCP_CAN10sendMsgBufEmhhPKhb>:
     c72:	af 92       	push	r10
     c74:	cf 92       	push	r12
     c76:	df 92       	push	r13
     c78:	ef 92       	push	r14
     c7a:	ff 92       	push	r15
     c7c:	0f 93       	push	r16
     c7e:	ac 2c       	mov	r10, r12
     c80:	67 01       	movw	r12, r14
     c82:	e0 2e       	mov	r14, r16
     c84:	00 e0       	ldi	r16, 0x00	; 0
     c86:	0e 94 c3 05 	call	0xb86	; 0xb86 <_ZN7MCP_CAN7sendMsgEmhhhPKhb>
     c8a:	0f 91       	pop	r16
     c8c:	ff 90       	pop	r15
     c8e:	ef 90       	pop	r14
     c90:	df 90       	pop	r13
     c92:	cf 90       	pop	r12
     c94:	af 90       	pop	r10
     c96:	08 95       	ret

00000c98 <__vector_16>:
	cli();
	m = timer0_millis;
	SREG = oldSREG;

	return m;
}
     c98:	1f 92       	push	r1
     c9a:	0f 92       	push	r0
     c9c:	0f b6       	in	r0, 0x3f	; 63
     c9e:	0f 92       	push	r0
     ca0:	11 24       	eor	r1, r1
     ca2:	2f 93       	push	r18
     ca4:	3f 93       	push	r19
     ca6:	8f 93       	push	r24
     ca8:	9f 93       	push	r25
     caa:	af 93       	push	r26
     cac:	bf 93       	push	r27
     cae:	80 91 53 03 	lds	r24, 0x0353	; 0x800353 <timer0_millis>
     cb2:	90 91 54 03 	lds	r25, 0x0354	; 0x800354 <timer0_millis+0x1>
     cb6:	a0 91 55 03 	lds	r26, 0x0355	; 0x800355 <timer0_millis+0x2>
     cba:	b0 91 56 03 	lds	r27, 0x0356	; 0x800356 <timer0_millis+0x3>
     cbe:	30 91 52 03 	lds	r19, 0x0352	; 0x800352 <timer0_fract>
     cc2:	23 e0       	ldi	r18, 0x03	; 3
     cc4:	23 0f       	add	r18, r19
     cc6:	2d 37       	cpi	r18, 0x7D	; 125
     cc8:	20 f4       	brcc	.+8      	; 0xcd2 <__vector_16+0x3a>
     cca:	01 96       	adiw	r24, 0x01	; 1
     ccc:	a1 1d       	adc	r26, r1
     cce:	b1 1d       	adc	r27, r1
     cd0:	05 c0       	rjmp	.+10     	; 0xcdc <__vector_16+0x44>
     cd2:	26 e8       	ldi	r18, 0x86	; 134
     cd4:	23 0f       	add	r18, r19
     cd6:	02 96       	adiw	r24, 0x02	; 2
     cd8:	a1 1d       	adc	r26, r1
     cda:	b1 1d       	adc	r27, r1
     cdc:	20 93 52 03 	sts	0x0352, r18	; 0x800352 <timer0_fract>
     ce0:	80 93 53 03 	sts	0x0353, r24	; 0x800353 <timer0_millis>
     ce4:	90 93 54 03 	sts	0x0354, r25	; 0x800354 <timer0_millis+0x1>
     ce8:	a0 93 55 03 	sts	0x0355, r26	; 0x800355 <timer0_millis+0x2>
     cec:	b0 93 56 03 	sts	0x0356, r27	; 0x800356 <timer0_millis+0x3>
     cf0:	80 91 57 03 	lds	r24, 0x0357	; 0x800357 <timer0_overflow_count>
     cf4:	90 91 58 03 	lds	r25, 0x0358	; 0x800358 <timer0_overflow_count+0x1>
     cf8:	a0 91 59 03 	lds	r26, 0x0359	; 0x800359 <timer0_overflow_count+0x2>
     cfc:	b0 91 5a 03 	lds	r27, 0x035A	; 0x80035a <timer0_overflow_count+0x3>
     d00:	01 96       	adiw	r24, 0x01	; 1
     d02:	a1 1d       	adc	r26, r1
     d04:	b1 1d       	adc	r27, r1
     d06:	80 93 57 03 	sts	0x0357, r24	; 0x800357 <timer0_overflow_count>
     d0a:	90 93 58 03 	sts	0x0358, r25	; 0x800358 <timer0_overflow_count+0x1>
     d0e:	a0 93 59 03 	sts	0x0359, r26	; 0x800359 <timer0_overflow_count+0x2>
     d12:	b0 93 5a 03 	sts	0x035A, r27	; 0x80035a <timer0_overflow_count+0x3>
     d16:	bf 91       	pop	r27
     d18:	af 91       	pop	r26
     d1a:	9f 91       	pop	r25
     d1c:	8f 91       	pop	r24
     d1e:	3f 91       	pop	r19
     d20:	2f 91       	pop	r18
     d22:	0f 90       	pop	r0
     d24:	0f be       	out	0x3f, r0	; 63
     d26:	0f 90       	pop	r0
     d28:	1f 90       	pop	r1
     d2a:	18 95       	reti

00000d2c <micros>:

unsigned long micros() {
	unsigned long m;
	uint8_t oldSREG = SREG, t;
     d2c:	3f b7       	in	r19, 0x3f	; 63
	
	cli();
     d2e:	f8 94       	cli
	m = timer0_overflow_count;
     d30:	80 91 57 03 	lds	r24, 0x0357	; 0x800357 <timer0_overflow_count>
     d34:	90 91 58 03 	lds	r25, 0x0358	; 0x800358 <timer0_overflow_count+0x1>
     d38:	a0 91 59 03 	lds	r26, 0x0359	; 0x800359 <timer0_overflow_count+0x2>
     d3c:	b0 91 5a 03 	lds	r27, 0x035A	; 0x80035a <timer0_overflow_count+0x3>
#if defined(TCNT0)
	t = TCNT0;
     d40:	26 b5       	in	r18, 0x26	; 38
#else
	#error TIMER 0 not defined
#endif

#ifdef TIFR0
	if ((TIFR0 & _BV(TOV0)) && (t < 255))
     d42:	a8 9b       	sbis	0x15, 0	; 21
     d44:	05 c0       	rjmp	.+10     	; 0xd50 <micros+0x24>
     d46:	2f 3f       	cpi	r18, 0xFF	; 255
     d48:	19 f0       	breq	.+6      	; 0xd50 <micros+0x24>
		m++;
     d4a:	01 96       	adiw	r24, 0x01	; 1
     d4c:	a1 1d       	adc	r26, r1
     d4e:	b1 1d       	adc	r27, r1
#else
	if ((TIFR & _BV(TOV0)) && (t < 255))
		m++;
#endif

	SREG = oldSREG;
     d50:	3f bf       	out	0x3f, r19	; 63
	
	return ((m << 8) + t) * (64 / clockCyclesPerMicrosecond());
     d52:	ba 2f       	mov	r27, r26
     d54:	a9 2f       	mov	r26, r25
     d56:	98 2f       	mov	r25, r24
     d58:	88 27       	eor	r24, r24
     d5a:	82 0f       	add	r24, r18
     d5c:	91 1d       	adc	r25, r1
     d5e:	a1 1d       	adc	r26, r1
     d60:	b1 1d       	adc	r27, r1
     d62:	bc 01       	movw	r22, r24
     d64:	cd 01       	movw	r24, r26
     d66:	42 e0       	ldi	r20, 0x02	; 2
     d68:	66 0f       	add	r22, r22
     d6a:	77 1f       	adc	r23, r23
     d6c:	88 1f       	adc	r24, r24
     d6e:	99 1f       	adc	r25, r25
     d70:	4a 95       	dec	r20
     d72:	d1 f7       	brne	.-12     	; 0xd68 <micros+0x3c>
}
     d74:	08 95       	ret

00000d76 <delay>:

void delay(unsigned long ms)
{
     d76:	8f 92       	push	r8
     d78:	9f 92       	push	r9
     d7a:	af 92       	push	r10
     d7c:	bf 92       	push	r11
     d7e:	cf 92       	push	r12
     d80:	df 92       	push	r13
     d82:	ef 92       	push	r14
     d84:	ff 92       	push	r15
     d86:	6b 01       	movw	r12, r22
     d88:	7c 01       	movw	r14, r24
	uint32_t start = micros();
     d8a:	0e 94 96 06 	call	0xd2c	; 0xd2c <micros>
     d8e:	4b 01       	movw	r8, r22
     d90:	5c 01       	movw	r10, r24

	while (ms > 0) {
     d92:	c1 14       	cp	r12, r1
     d94:	d1 04       	cpc	r13, r1
     d96:	e1 04       	cpc	r14, r1
     d98:	f1 04       	cpc	r15, r1
     d9a:	01 f1       	breq	.+64     	; 0xddc <delay+0x66>
		yield();
     d9c:	0e 94 7d 0a 	call	0x14fa	; 0x14fa <yield>
		while ( ms > 0 && (micros() - start) >= 1000) {
     da0:	0e 94 96 06 	call	0xd2c	; 0xd2c <micros>
     da4:	dc 01       	movw	r26, r24
     da6:	cb 01       	movw	r24, r22
     da8:	88 19       	sub	r24, r8
     daa:	99 09       	sbc	r25, r9
     dac:	aa 09       	sbc	r26, r10
     dae:	bb 09       	sbc	r27, r11
     db0:	88 3e       	cpi	r24, 0xE8	; 232
     db2:	93 40       	sbci	r25, 0x03	; 3
     db4:	a1 05       	cpc	r26, r1
     db6:	b1 05       	cpc	r27, r1
     db8:	60 f3       	brcs	.-40     	; 0xd92 <delay+0x1c>
			ms--;
     dba:	21 e0       	ldi	r18, 0x01	; 1
     dbc:	c2 1a       	sub	r12, r18
     dbe:	d1 08       	sbc	r13, r1
     dc0:	e1 08       	sbc	r14, r1
     dc2:	f1 08       	sbc	r15, r1
			start += 1000;
     dc4:	88 ee       	ldi	r24, 0xE8	; 232
     dc6:	88 0e       	add	r8, r24
     dc8:	83 e0       	ldi	r24, 0x03	; 3
     dca:	98 1e       	adc	r9, r24
     dcc:	a1 1c       	adc	r10, r1
     dce:	b1 1c       	adc	r11, r1
{
	uint32_t start = micros();

	while (ms > 0) {
		yield();
		while ( ms > 0 && (micros() - start) >= 1000) {
     dd0:	c1 14       	cp	r12, r1
     dd2:	d1 04       	cpc	r13, r1
     dd4:	e1 04       	cpc	r14, r1
     dd6:	f1 04       	cpc	r15, r1
     dd8:	19 f7       	brne	.-58     	; 0xda0 <delay+0x2a>
     dda:	db cf       	rjmp	.-74     	; 0xd92 <delay+0x1c>
			ms--;
			start += 1000;
		}
	}
}
     ddc:	ff 90       	pop	r15
     dde:	ef 90       	pop	r14
     de0:	df 90       	pop	r13
     de2:	cf 90       	pop	r12
     de4:	bf 90       	pop	r11
     de6:	af 90       	pop	r10
     de8:	9f 90       	pop	r9
     dea:	8f 90       	pop	r8
     dec:	08 95       	ret

00000dee <delayMicroseconds>:
#elif F_CPU >= 16000000L
	// for the 16 MHz clock on most Arduino boards

	// for a one-microsecond delay, simply return.  the overhead
	// of the function call takes 14 (16) cycles, which is 1us
	if (us <= 1) return; //  = 3 cycles, (4 when true)
     dee:	82 30       	cpi	r24, 0x02	; 2
     df0:	91 05       	cpc	r25, r1
     df2:	38 f0       	brcs	.+14     	; 0xe02 <delayMicroseconds+0x14>

	// the following loop takes 1/4 of a microsecond (4 cycles)
	// per iteration, so execute it four times for each microsecond of
	// delay requested.
	us <<= 2; // x4 us, = 4 cycles
     df4:	88 0f       	add	r24, r24
     df6:	99 1f       	adc	r25, r25
     df8:	88 0f       	add	r24, r24
     dfa:	99 1f       	adc	r25, r25

	// account for the time taken in the preceeding commands.
	// we just burned 19 (21) cycles above, remove 5, (5*4=20)
	// us is at least 8 so we can substract 5
	us -= 5; // = 2 cycles,
     dfc:	05 97       	sbiw	r24, 0x05	; 5
	

#endif

	// busy wait
	__asm__ __volatile__ (
     dfe:	01 97       	sbiw	r24, 0x01	; 1
     e00:	f1 f7       	brne	.-4      	; 0xdfe <delayMicroseconds+0x10>
     e02:	08 95       	ret

00000e04 <init>:

void init()
{
	// this needs to be called before setup() or some functions won't
	// work there
	sei();
     e04:	78 94       	sei
	
	// on the ATmega168, timer 0 is also used for fast hardware pwm
	// (using phase-correct PWM would mean that timer 0 overflowed half as often
	// resulting in different millis() behavior on the ATmega8 and ATmega168)
#if defined(TCCR0A) && defined(WGM01)
	sbi(TCCR0A, WGM01);
     e06:	84 b5       	in	r24, 0x24	; 36
     e08:	82 60       	ori	r24, 0x02	; 2
     e0a:	84 bd       	out	0x24, r24	; 36
	sbi(TCCR0A, WGM00);
     e0c:	84 b5       	in	r24, 0x24	; 36
     e0e:	81 60       	ori	r24, 0x01	; 1
     e10:	84 bd       	out	0x24, r24	; 36
	// this combination is for the standard atmega8
	sbi(TCCR0, CS01);
	sbi(TCCR0, CS00);
#elif defined(TCCR0B) && defined(CS01) && defined(CS00)
	// this combination is for the standard 168/328/1280/2560
	sbi(TCCR0B, CS01);
     e12:	85 b5       	in	r24, 0x25	; 37
     e14:	82 60       	ori	r24, 0x02	; 2
     e16:	85 bd       	out	0x25, r24	; 37
	sbi(TCCR0B, CS00);
     e18:	85 b5       	in	r24, 0x25	; 37
     e1a:	81 60       	ori	r24, 0x01	; 1
     e1c:	85 bd       	out	0x25, r24	; 37

	// enable timer 0 overflow interrupt
#if defined(TIMSK) && defined(TOIE0)
	sbi(TIMSK, TOIE0);
#elif defined(TIMSK0) && defined(TOIE0)
	sbi(TIMSK0, TOIE0);
     e1e:	ee e6       	ldi	r30, 0x6E	; 110
     e20:	f0 e0       	ldi	r31, 0x00	; 0
     e22:	80 81       	ld	r24, Z
     e24:	81 60       	ori	r24, 0x01	; 1
     e26:	80 83       	st	Z, r24
	// this is better for motors as it ensures an even waveform
	// note, however, that fast pwm mode can achieve a frequency of up
	// 8 MHz (with a 16 MHz clock) at 50% duty cycle

#if defined(TCCR1B) && defined(CS11) && defined(CS10)
	TCCR1B = 0;
     e28:	e1 e8       	ldi	r30, 0x81	; 129
     e2a:	f0 e0       	ldi	r31, 0x00	; 0
     e2c:	10 82       	st	Z, r1

	// set timer 1 prescale factor to 64
	sbi(TCCR1B, CS11);
     e2e:	80 81       	ld	r24, Z
     e30:	82 60       	ori	r24, 0x02	; 2
     e32:	80 83       	st	Z, r24
#if F_CPU >= 8000000L
	sbi(TCCR1B, CS10);
     e34:	80 81       	ld	r24, Z
     e36:	81 60       	ori	r24, 0x01	; 1
     e38:	80 83       	st	Z, r24
	sbi(TCCR1, CS10);
#endif
#endif
	// put timer 1 in 8-bit phase correct pwm mode
#if defined(TCCR1A) && defined(WGM10)
	sbi(TCCR1A, WGM10);
     e3a:	e0 e8       	ldi	r30, 0x80	; 128
     e3c:	f0 e0       	ldi	r31, 0x00	; 0
     e3e:	80 81       	ld	r24, Z
     e40:	81 60       	ori	r24, 0x01	; 1
     e42:	80 83       	st	Z, r24

	// set timer 2 prescale factor to 64
#if defined(TCCR2) && defined(CS22)
	sbi(TCCR2, CS22);
#elif defined(TCCR2B) && defined(CS22)
	sbi(TCCR2B, CS22);
     e44:	e1 eb       	ldi	r30, 0xB1	; 177
     e46:	f0 e0       	ldi	r31, 0x00	; 0
     e48:	80 81       	ld	r24, Z
     e4a:	84 60       	ori	r24, 0x04	; 4
     e4c:	80 83       	st	Z, r24

	// configure timer 2 for phase correct pwm (8-bit)
#if defined(TCCR2) && defined(WGM20)
	sbi(TCCR2, WGM20);
#elif defined(TCCR2A) && defined(WGM20)
	sbi(TCCR2A, WGM20);
     e4e:	e0 eb       	ldi	r30, 0xB0	; 176
     e50:	f0 e0       	ldi	r31, 0x00	; 0
     e52:	80 81       	ld	r24, Z
     e54:	81 60       	ori	r24, 0x01	; 1
     e56:	80 83       	st	Z, r24
#endif

#if defined(ADCSRA)
	// set a2d prescaler so we are inside the desired 50-200 KHz range.
	#if F_CPU >= 16000000 // 16 MHz / 128 = 125 KHz
		sbi(ADCSRA, ADPS2);
     e58:	ea e7       	ldi	r30, 0x7A	; 122
     e5a:	f0 e0       	ldi	r31, 0x00	; 0
     e5c:	80 81       	ld	r24, Z
     e5e:	84 60       	ori	r24, 0x04	; 4
     e60:	80 83       	st	Z, r24
		sbi(ADCSRA, ADPS1);
     e62:	80 81       	ld	r24, Z
     e64:	82 60       	ori	r24, 0x02	; 2
     e66:	80 83       	st	Z, r24
		sbi(ADCSRA, ADPS0);
     e68:	80 81       	ld	r24, Z
     e6a:	81 60       	ori	r24, 0x01	; 1
     e6c:	80 83       	st	Z, r24
		cbi(ADCSRA, ADPS2);
		cbi(ADCSRA, ADPS1);
		sbi(ADCSRA, ADPS0);
	#endif
	// enable a2d conversions
	sbi(ADCSRA, ADEN);
     e6e:	80 81       	ld	r24, Z
     e70:	80 68       	ori	r24, 0x80	; 128
     e72:	80 83       	st	Z, r24
	// here so they can be used as normal digital i/o; they will be
	// reconnected in Serial.begin()
#if defined(UCSRB)
	UCSRB = 0;
#elif defined(UCSR0B)
	UCSR0B = 0;
     e74:	10 92 c1 00 	sts	0x00C1, r1	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
     e78:	08 95       	ret

00000e7a <turnOffPWM>:
//
//static inline void turnOffPWM(uint8_t timer) __attribute__ ((always_inline));
//static inline void turnOffPWM(uint8_t timer)
static void turnOffPWM(uint8_t timer)
{
	switch (timer)
     e7a:	83 30       	cpi	r24, 0x03	; 3
     e7c:	81 f0       	breq	.+32     	; 0xe9e <turnOffPWM+0x24>
     e7e:	28 f4       	brcc	.+10     	; 0xe8a <turnOffPWM+0x10>
     e80:	81 30       	cpi	r24, 0x01	; 1
     e82:	99 f0       	breq	.+38     	; 0xeaa <turnOffPWM+0x30>
     e84:	82 30       	cpi	r24, 0x02	; 2
     e86:	a1 f0       	breq	.+40     	; 0xeb0 <turnOffPWM+0x36>
     e88:	08 95       	ret
     e8a:	87 30       	cpi	r24, 0x07	; 7
     e8c:	a9 f0       	breq	.+42     	; 0xeb8 <turnOffPWM+0x3e>
     e8e:	88 30       	cpi	r24, 0x08	; 8
     e90:	b9 f0       	breq	.+46     	; 0xec0 <turnOffPWM+0x46>
     e92:	84 30       	cpi	r24, 0x04	; 4
     e94:	d1 f4       	brne	.+52     	; 0xeca <turnOffPWM+0x50>
	{
		#if defined(TCCR1A) && defined(COM1A1)
		case TIMER1A:   cbi(TCCR1A, COM1A1);    break;
		#endif
		#if defined(TCCR1A) && defined(COM1B1)
		case TIMER1B:   cbi(TCCR1A, COM1B1);    break;
     e96:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
     e9a:	8f 7d       	andi	r24, 0xDF	; 223
     e9c:	03 c0       	rjmp	.+6      	; 0xea4 <turnOffPWM+0x2a>
static void turnOffPWM(uint8_t timer)
{
	switch (timer)
	{
		#if defined(TCCR1A) && defined(COM1A1)
		case TIMER1A:   cbi(TCCR1A, COM1A1);    break;
     e9e:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
     ea2:	8f 77       	andi	r24, 0x7F	; 127
		#endif
		#if defined(TCCR1A) && defined(COM1B1)
		case TIMER1B:   cbi(TCCR1A, COM1B1);    break;
     ea4:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
     ea8:	08 95       	ret
		#if defined(TCCR2) && defined(COM21)
		case  TIMER2:   cbi(TCCR2, COM21);      break;
		#endif
		
		#if defined(TCCR0A) && defined(COM0A1)
		case  TIMER0A:  cbi(TCCR0A, COM0A1);    break;
     eaa:	84 b5       	in	r24, 0x24	; 36
     eac:	8f 77       	andi	r24, 0x7F	; 127
     eae:	02 c0       	rjmp	.+4      	; 0xeb4 <turnOffPWM+0x3a>
		#endif
		
		#if defined(TCCR0A) && defined(COM0B1)
		case  TIMER0B:  cbi(TCCR0A, COM0B1);    break;
     eb0:	84 b5       	in	r24, 0x24	; 36
     eb2:	8f 7d       	andi	r24, 0xDF	; 223
     eb4:	84 bd       	out	0x24, r24	; 36
     eb6:	08 95       	ret
		#endif
		#if defined(TCCR2A) && defined(COM2A1)
		case  TIMER2A:  cbi(TCCR2A, COM2A1);    break;
     eb8:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7e00b0>
     ebc:	8f 77       	andi	r24, 0x7F	; 127
     ebe:	03 c0       	rjmp	.+6      	; 0xec6 <turnOffPWM+0x4c>
		#endif
		#if defined(TCCR2A) && defined(COM2B1)
		case  TIMER2B:  cbi(TCCR2A, COM2B1);    break;
     ec0:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7e00b0>
     ec4:	8f 7d       	andi	r24, 0xDF	; 223
     ec6:	80 93 b0 00 	sts	0x00B0, r24	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7e00b0>
     eca:	08 95       	ret

00000ecc <pinMode>:
#define ARDUINO_MAIN
#include "wiring_private.h"
#include "pins_arduino.h"

void pinMode(uint8_t pin, uint8_t mode)
{
     ecc:	cf 93       	push	r28
     ece:	df 93       	push	r29
	uint8_t bit = digitalPinToBitMask(pin);
     ed0:	90 e0       	ldi	r25, 0x00	; 0
     ed2:	fc 01       	movw	r30, r24
     ed4:	ec 53       	subi	r30, 0x3C	; 60
     ed6:	ff 4f       	sbci	r31, 0xFF	; 255
     ed8:	24 91       	lpm	r18, Z
	uint8_t port = digitalPinToPort(pin);
     eda:	fc 01       	movw	r30, r24
     edc:	e8 52       	subi	r30, 0x28	; 40
     ede:	ff 4f       	sbci	r31, 0xFF	; 255
     ee0:	84 91       	lpm	r24, Z
	volatile uint8_t *reg, *out;

	if (port == NOT_A_PIN) return;
     ee2:	88 23       	and	r24, r24
     ee4:	61 f1       	breq	.+88     	; 0xf3e <pinMode+0x72>

	// JWS: can I let the optimizer do this?
	reg = portModeRegister(port);
     ee6:	90 e0       	ldi	r25, 0x00	; 0
     ee8:	88 0f       	add	r24, r24
     eea:	99 1f       	adc	r25, r25
     eec:	fc 01       	movw	r30, r24
     eee:	ea 50       	subi	r30, 0x0A	; 10
     ef0:	ff 4f       	sbci	r31, 0xFF	; 255
     ef2:	c5 91       	lpm	r28, Z+
     ef4:	d4 91       	lpm	r29, Z
	out = portOutputRegister(port);
     ef6:	fc 01       	movw	r30, r24
     ef8:	e4 51       	subi	r30, 0x14	; 20
     efa:	ff 4f       	sbci	r31, 0xFF	; 255
     efc:	a5 91       	lpm	r26, Z+
     efe:	b4 91       	lpm	r27, Z

	if (mode == INPUT) { 
     f00:	61 11       	cpse	r22, r1
     f02:	09 c0       	rjmp	.+18     	; 0xf16 <pinMode+0x4a>
		uint8_t oldSREG = SREG;
     f04:	9f b7       	in	r25, 0x3f	; 63
                cli();
     f06:	f8 94       	cli
		*reg &= ~bit;
     f08:	88 81       	ld	r24, Y
     f0a:	20 95       	com	r18
     f0c:	82 23       	and	r24, r18
     f0e:	88 83       	st	Y, r24
		*out &= ~bit;
     f10:	ec 91       	ld	r30, X
     f12:	2e 23       	and	r18, r30
     f14:	0b c0       	rjmp	.+22     	; 0xf2c <pinMode+0x60>
		SREG = oldSREG;
	} else if (mode == INPUT_PULLUP) {
     f16:	62 30       	cpi	r22, 0x02	; 2
     f18:	61 f4       	brne	.+24     	; 0xf32 <pinMode+0x66>
		uint8_t oldSREG = SREG;
     f1a:	9f b7       	in	r25, 0x3f	; 63
                cli();
     f1c:	f8 94       	cli
		*reg &= ~bit;
     f1e:	38 81       	ld	r19, Y
     f20:	82 2f       	mov	r24, r18
     f22:	80 95       	com	r24
     f24:	83 23       	and	r24, r19
     f26:	88 83       	st	Y, r24
		*out |= bit;
     f28:	ec 91       	ld	r30, X
     f2a:	2e 2b       	or	r18, r30
     f2c:	2c 93       	st	X, r18
		SREG = oldSREG;
     f2e:	9f bf       	out	0x3f, r25	; 63
     f30:	06 c0       	rjmp	.+12     	; 0xf3e <pinMode+0x72>
	} else {
		uint8_t oldSREG = SREG;
     f32:	8f b7       	in	r24, 0x3f	; 63
                cli();
     f34:	f8 94       	cli
		*reg |= bit;
     f36:	e8 81       	ld	r30, Y
     f38:	2e 2b       	or	r18, r30
     f3a:	28 83       	st	Y, r18
		SREG = oldSREG;
     f3c:	8f bf       	out	0x3f, r24	; 63
	}
}
     f3e:	df 91       	pop	r29
     f40:	cf 91       	pop	r28
     f42:	08 95       	ret

00000f44 <digitalWrite>:
		#endif
	}
}

void digitalWrite(uint8_t pin, uint8_t val)
{
     f44:	1f 93       	push	r17
     f46:	cf 93       	push	r28
     f48:	df 93       	push	r29
	uint8_t timer = digitalPinToTimer(pin);
     f4a:	28 2f       	mov	r18, r24
     f4c:	30 e0       	ldi	r19, 0x00	; 0
     f4e:	f9 01       	movw	r30, r18
     f50:	e0 55       	subi	r30, 0x50	; 80
     f52:	ff 4f       	sbci	r31, 0xFF	; 255
     f54:	84 91       	lpm	r24, Z
	uint8_t bit = digitalPinToBitMask(pin);
     f56:	f9 01       	movw	r30, r18
     f58:	ec 53       	subi	r30, 0x3C	; 60
     f5a:	ff 4f       	sbci	r31, 0xFF	; 255
     f5c:	d4 91       	lpm	r29, Z
	uint8_t port = digitalPinToPort(pin);
     f5e:	f9 01       	movw	r30, r18
     f60:	e8 52       	subi	r30, 0x28	; 40
     f62:	ff 4f       	sbci	r31, 0xFF	; 255
     f64:	c4 91       	lpm	r28, Z
	volatile uint8_t *out;

	if (port == NOT_A_PIN) return;
     f66:	cc 23       	and	r28, r28
     f68:	c9 f0       	breq	.+50     	; 0xf9c <digitalWrite+0x58>
     f6a:	16 2f       	mov	r17, r22

	// If the pin that support PWM output, we need to turn it off
	// before doing a digital write.
	if (timer != NOT_ON_TIMER) turnOffPWM(timer);
     f6c:	81 11       	cpse	r24, r1
     f6e:	0e 94 3d 07 	call	0xe7a	; 0xe7a <turnOffPWM>

	out = portOutputRegister(port);
     f72:	ec 2f       	mov	r30, r28
     f74:	f0 e0       	ldi	r31, 0x00	; 0
     f76:	ee 0f       	add	r30, r30
     f78:	ff 1f       	adc	r31, r31
     f7a:	e4 51       	subi	r30, 0x14	; 20
     f7c:	ff 4f       	sbci	r31, 0xFF	; 255
     f7e:	a5 91       	lpm	r26, Z+
     f80:	b4 91       	lpm	r27, Z

	uint8_t oldSREG = SREG;
     f82:	8f b7       	in	r24, 0x3f	; 63
	cli();
     f84:	f8 94       	cli

	if (val == LOW) {
     f86:	11 11       	cpse	r17, r1
     f88:	05 c0       	rjmp	.+10     	; 0xf94 <digitalWrite+0x50>
		*out &= ~bit;
     f8a:	9c 91       	ld	r25, X
     f8c:	ed 2f       	mov	r30, r29
     f8e:	e0 95       	com	r30
     f90:	e9 23       	and	r30, r25
     f92:	02 c0       	rjmp	.+4      	; 0xf98 <digitalWrite+0x54>
	} else {
		*out |= bit;
     f94:	ec 91       	ld	r30, X
     f96:	ed 2b       	or	r30, r29
     f98:	ec 93       	st	X, r30
	}

	SREG = oldSREG;
     f9a:	8f bf       	out	0x3f, r24	; 63
}
     f9c:	df 91       	pop	r29
     f9e:	cf 91       	pop	r28
     fa0:	1f 91       	pop	r17
     fa2:	08 95       	ret

00000fa4 <analogRead>:
#elif defined(__AVR_ATmega32U4__)
	if (pin >= 18) pin -= 18; // allow for channel or pin numbers
#elif defined(__AVR_ATmega1284__) || defined(__AVR_ATmega1284P__) || defined(__AVR_ATmega644__) || defined(__AVR_ATmega644A__) || defined(__AVR_ATmega644P__) || defined(__AVR_ATmega644PA__)
	if (pin >= 24) pin -= 24; // allow for channel or pin numbers
#else
	if (pin >= 14) pin -= 14; // allow for channel or pin numbers
     fa4:	8e 30       	cpi	r24, 0x0E	; 14
     fa6:	08 f0       	brcs	.+2      	; 0xfaa <analogRead+0x6>
     fa8:	8e 50       	subi	r24, 0x0E	; 14
	// to 0 (the default).
#if defined(ADMUX)
#if defined(__AVR_ATtiny25__) || defined(__AVR_ATtiny45__) || defined(__AVR_ATtiny85__)
	ADMUX = (analog_reference << 4) | (pin & 0x07);
#else
	ADMUX = (analog_reference << 6) | (pin & 0x07);
     faa:	87 70       	andi	r24, 0x07	; 7
     fac:	20 91 1c 01 	lds	r18, 0x011C	; 0x80011c <analog_reference>
     fb0:	90 e4       	ldi	r25, 0x40	; 64
     fb2:	29 9f       	mul	r18, r25
     fb4:	90 01       	movw	r18, r0
     fb6:	11 24       	eor	r1, r1
     fb8:	82 2b       	or	r24, r18
     fba:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x7e007c>
	// without a delay, we seem to read from the wrong channel
	//delay(1);

#if defined(ADCSRA) && defined(ADCL)
	// start the conversion
	sbi(ADCSRA, ADSC);
     fbe:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
     fc2:	80 64       	ori	r24, 0x40	; 64
     fc4:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>

	// ADSC is cleared when the conversion finishes
	while (bit_is_set(ADCSRA, ADSC));
     fc8:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
     fcc:	86 fd       	sbrc	r24, 6
     fce:	fc cf       	rjmp	.-8      	; 0xfc8 <analogRead+0x24>

	// we have to read ADCL first; doing so locks both ADCL
	// and ADCH until ADCH is read.  reading ADCL second would
	// cause the results of each conversion to be discarded,
	// as ADCL and ADCH would be locked when it completed.
	low  = ADCL;
     fd0:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7e0078>
	high = ADCH;
     fd4:	20 91 79 00 	lds	r18, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7e0079>
	low  = 0;
	high = 0;
#endif

	// combine the two bytes
	return (high << 8) | low;
     fd8:	90 e0       	ldi	r25, 0x00	; 0
}
     fda:	92 2b       	or	r25, r18
     fdc:	08 95       	ret

00000fde <_ZN14HardwareSerial9availableEv>:
  // clear any received data
  _rx_buffer_head = _rx_buffer_tail;
}

int HardwareSerial::available(void)
{
     fde:	fc 01       	movw	r30, r24
  return ((unsigned int)(SERIAL_RX_BUFFER_SIZE + _rx_buffer_head - _rx_buffer_tail)) % SERIAL_RX_BUFFER_SIZE;
     fe0:	91 8d       	ldd	r25, Z+25	; 0x19
     fe2:	22 8d       	ldd	r18, Z+26	; 0x1a
     fe4:	89 2f       	mov	r24, r25
     fe6:	90 e0       	ldi	r25, 0x00	; 0
     fe8:	80 5c       	subi	r24, 0xC0	; 192
     fea:	9f 4f       	sbci	r25, 0xFF	; 255
     fec:	82 1b       	sub	r24, r18
     fee:	91 09       	sbc	r25, r1
}
     ff0:	8f 73       	andi	r24, 0x3F	; 63
     ff2:	99 27       	eor	r25, r25
     ff4:	08 95       	ret

00000ff6 <_ZN14HardwareSerial4peekEv>:

int HardwareSerial::peek(void)
{
     ff6:	fc 01       	movw	r30, r24
  if (_rx_buffer_head == _rx_buffer_tail) {
     ff8:	91 8d       	ldd	r25, Z+25	; 0x19
     ffa:	82 8d       	ldd	r24, Z+26	; 0x1a
     ffc:	98 17       	cp	r25, r24
     ffe:	31 f0       	breq	.+12     	; 0x100c <_ZN14HardwareSerial4peekEv+0x16>
    return -1;
  } else {
    return _rx_buffer[_rx_buffer_tail];
    1000:	82 8d       	ldd	r24, Z+26	; 0x1a
    1002:	e8 0f       	add	r30, r24
    1004:	f1 1d       	adc	r31, r1
    1006:	85 8d       	ldd	r24, Z+29	; 0x1d
    1008:	90 e0       	ldi	r25, 0x00	; 0
    100a:	08 95       	ret
}

int HardwareSerial::peek(void)
{
  if (_rx_buffer_head == _rx_buffer_tail) {
    return -1;
    100c:	8f ef       	ldi	r24, 0xFF	; 255
    100e:	9f ef       	ldi	r25, 0xFF	; 255
  } else {
    return _rx_buffer[_rx_buffer_tail];
  }
}
    1010:	08 95       	ret

00001012 <_ZN14HardwareSerial4readEv>:

int HardwareSerial::read(void)
{
    1012:	fc 01       	movw	r30, r24
  // if the head isn't ahead of the tail, we don't have any characters
  if (_rx_buffer_head == _rx_buffer_tail) {
    1014:	91 8d       	ldd	r25, Z+25	; 0x19
    1016:	82 8d       	ldd	r24, Z+26	; 0x1a
    1018:	98 17       	cp	r25, r24
    101a:	61 f0       	breq	.+24     	; 0x1034 <_ZN14HardwareSerial4readEv+0x22>
    return -1;
  } else {
    unsigned char c = _rx_buffer[_rx_buffer_tail];
    101c:	82 8d       	ldd	r24, Z+26	; 0x1a
    101e:	df 01       	movw	r26, r30
    1020:	a8 0f       	add	r26, r24
    1022:	b1 1d       	adc	r27, r1
    1024:	5d 96       	adiw	r26, 0x1d	; 29
    1026:	8c 91       	ld	r24, X
    _rx_buffer_tail = (rx_buffer_index_t)(_rx_buffer_tail + 1) % SERIAL_RX_BUFFER_SIZE;
    1028:	92 8d       	ldd	r25, Z+26	; 0x1a
    102a:	9f 5f       	subi	r25, 0xFF	; 255
    102c:	9f 73       	andi	r25, 0x3F	; 63
    102e:	92 8f       	std	Z+26, r25	; 0x1a
    return c;
    1030:	90 e0       	ldi	r25, 0x00	; 0
    1032:	08 95       	ret

int HardwareSerial::read(void)
{
  // if the head isn't ahead of the tail, we don't have any characters
  if (_rx_buffer_head == _rx_buffer_tail) {
    return -1;
    1034:	8f ef       	ldi	r24, 0xFF	; 255
    1036:	9f ef       	ldi	r25, 0xFF	; 255
  } else {
    unsigned char c = _rx_buffer[_rx_buffer_tail];
    _rx_buffer_tail = (rx_buffer_index_t)(_rx_buffer_tail + 1) % SERIAL_RX_BUFFER_SIZE;
    return c;
  }
}
    1038:	08 95       	ret

0000103a <_ZN14HardwareSerial17availableForWriteEv>:
{
#if (SERIAL_TX_BUFFER_SIZE>256)
  uint8_t oldSREG = SREG;
  cli();
#endif
  tx_buffer_index_t head = _tx_buffer_head;
    103a:	fc 01       	movw	r30, r24
    103c:	53 8d       	ldd	r21, Z+27	; 0x1b
  tx_buffer_index_t tail = _tx_buffer_tail;
    103e:	44 8d       	ldd	r20, Z+28	; 0x1c
    1040:	25 2f       	mov	r18, r21
    1042:	30 e0       	ldi	r19, 0x00	; 0
    1044:	84 2f       	mov	r24, r20
    1046:	90 e0       	ldi	r25, 0x00	; 0
#if (SERIAL_TX_BUFFER_SIZE>256)
  SREG = oldSREG;
#endif
  if (head >= tail) return SERIAL_TX_BUFFER_SIZE - 1 - head + tail;
    1048:	82 1b       	sub	r24, r18
    104a:	93 0b       	sbc	r25, r19
    104c:	54 17       	cp	r21, r20
    104e:	10 f0       	brcs	.+4      	; 0x1054 <_ZN14HardwareSerial17availableForWriteEv+0x1a>
    1050:	cf 96       	adiw	r24, 0x3f	; 63
    1052:	08 95       	ret
  return tail - head - 1;
    1054:	01 97       	sbiw	r24, 0x01	; 1
}
    1056:	08 95       	ret

00001058 <_Z14serialEventRunv>:
#endif

void serialEventRun(void)
{
#if defined(HAVE_HWSERIAL0)
  if (Serial0_available && serialEvent && Serial0_available()) serialEvent();
    1058:	81 e8       	ldi	r24, 0x81	; 129
    105a:	99 e0       	ldi	r25, 0x09	; 9
    105c:	89 2b       	or	r24, r25
    105e:	49 f0       	breq	.+18     	; 0x1072 <_Z14serialEventRunv+0x1a>
    1060:	80 e0       	ldi	r24, 0x00	; 0
    1062:	90 e0       	ldi	r25, 0x00	; 0
    1064:	89 2b       	or	r24, r25
    1066:	29 f0       	breq	.+10     	; 0x1072 <_Z14serialEventRunv+0x1a>
    1068:	0e 94 81 09 	call	0x1302	; 0x1302 <_Z17Serial0_availablev>
    106c:	81 11       	cpse	r24, r1
    106e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>
    1072:	08 95       	ret

00001074 <_ZN14HardwareSerial17_tx_udr_empty_irqEv>:
}

// Actual interrupt handlers //////////////////////////////////////////////////////////////

void HardwareSerial::_tx_udr_empty_irq(void)
{
    1074:	fc 01       	movw	r30, r24
  // If interrupts are enabled, there must be more data in the output
  // buffer. Send the next byte
  unsigned char c = _tx_buffer[_tx_buffer_tail];
    1076:	84 8d       	ldd	r24, Z+28	; 0x1c
    1078:	df 01       	movw	r26, r30
    107a:	a8 0f       	add	r26, r24
    107c:	b1 1d       	adc	r27, r1
    107e:	a3 5a       	subi	r26, 0xA3	; 163
    1080:	bf 4f       	sbci	r27, 0xFF	; 255
    1082:	2c 91       	ld	r18, X
  _tx_buffer_tail = (_tx_buffer_tail + 1) % SERIAL_TX_BUFFER_SIZE;
    1084:	84 8d       	ldd	r24, Z+28	; 0x1c
    1086:	90 e0       	ldi	r25, 0x00	; 0
    1088:	01 96       	adiw	r24, 0x01	; 1
    108a:	8f 73       	andi	r24, 0x3F	; 63
    108c:	99 27       	eor	r25, r25
    108e:	84 8f       	std	Z+28, r24	; 0x1c

  *_udr = c;
    1090:	a6 89       	ldd	r26, Z+22	; 0x16
    1092:	b7 89       	ldd	r27, Z+23	; 0x17
    1094:	2c 93       	st	X, r18

  // clear the TXC bit -- "can be cleared by writing a one to its bit
  // location". This makes sure flush() won't return until the bytes
  // actually got written
  sbi(*_ucsra, TXC0);
    1096:	a0 89       	ldd	r26, Z+16	; 0x10
    1098:	b1 89       	ldd	r27, Z+17	; 0x11
    109a:	8c 91       	ld	r24, X
    109c:	80 64       	ori	r24, 0x40	; 64
    109e:	8c 93       	st	X, r24

  if (_tx_buffer_head == _tx_buffer_tail) {
    10a0:	93 8d       	ldd	r25, Z+27	; 0x1b
    10a2:	84 8d       	ldd	r24, Z+28	; 0x1c
    10a4:	98 13       	cpse	r25, r24
    10a6:	06 c0       	rjmp	.+12     	; 0x10b4 <_ZN14HardwareSerial17_tx_udr_empty_irqEv+0x40>
    // Buffer empty, so disable interrupts
    cbi(*_ucsrb, UDRIE0);
    10a8:	02 88       	ldd	r0, Z+18	; 0x12
    10aa:	f3 89       	ldd	r31, Z+19	; 0x13
    10ac:	e0 2d       	mov	r30, r0
    10ae:	80 81       	ld	r24, Z
    10b0:	8f 7d       	andi	r24, 0xDF	; 223
    10b2:	80 83       	st	Z, r24
    10b4:	08 95       	ret

000010b6 <_ZN14HardwareSerial5flushEv>:
  if (head >= tail) return SERIAL_TX_BUFFER_SIZE - 1 - head + tail;
  return tail - head - 1;
}

void HardwareSerial::flush()
{
    10b6:	cf 93       	push	r28
    10b8:	df 93       	push	r29
    10ba:	ec 01       	movw	r28, r24
  // If we have never written a byte, no need to flush. This special
  // case is needed since there is no way to force the TXC (transmit
  // complete) bit to 1 during initialization
  if (!_written)
    10bc:	88 8d       	ldd	r24, Y+24	; 0x18
    10be:	88 23       	and	r24, r24
    10c0:	c9 f0       	breq	.+50     	; 0x10f4 <_ZN14HardwareSerial5flushEv+0x3e>
    return;

  while (bit_is_set(*_ucsrb, UDRIE0) || bit_is_clear(*_ucsra, TXC0)) {
    10c2:	ea 89       	ldd	r30, Y+18	; 0x12
    10c4:	fb 89       	ldd	r31, Y+19	; 0x13
    10c6:	80 81       	ld	r24, Z
    10c8:	85 fd       	sbrc	r24, 5
    10ca:	05 c0       	rjmp	.+10     	; 0x10d6 <_ZN14HardwareSerial5flushEv+0x20>
    10cc:	a8 89       	ldd	r26, Y+16	; 0x10
    10ce:	b9 89       	ldd	r27, Y+17	; 0x11
    10d0:	8c 91       	ld	r24, X
    10d2:	86 fd       	sbrc	r24, 6
    10d4:	0f c0       	rjmp	.+30     	; 0x10f4 <_ZN14HardwareSerial5flushEv+0x3e>
    if (bit_is_clear(SREG, SREG_I) && bit_is_set(*_ucsrb, UDRIE0))
    10d6:	0f b6       	in	r0, 0x3f	; 63
    10d8:	07 fc       	sbrc	r0, 7
    10da:	f5 cf       	rjmp	.-22     	; 0x10c6 <_ZN14HardwareSerial5flushEv+0x10>
    10dc:	80 81       	ld	r24, Z
    10de:	85 ff       	sbrs	r24, 5
    10e0:	f2 cf       	rjmp	.-28     	; 0x10c6 <_ZN14HardwareSerial5flushEv+0x10>
	// Interrupts are globally disabled, but the DR empty
	// interrupt should be enabled, so poll the DR empty flag to
	// prevent deadlock
	if (bit_is_set(*_ucsra, UDRE0))
    10e2:	a8 89       	ldd	r26, Y+16	; 0x10
    10e4:	b9 89       	ldd	r27, Y+17	; 0x11
    10e6:	8c 91       	ld	r24, X
    10e8:	85 ff       	sbrs	r24, 5
    10ea:	ed cf       	rjmp	.-38     	; 0x10c6 <_ZN14HardwareSerial5flushEv+0x10>
	  _tx_udr_empty_irq();
    10ec:	ce 01       	movw	r24, r28
    10ee:	0e 94 3a 08 	call	0x1074	; 0x1074 <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
    10f2:	e7 cf       	rjmp	.-50     	; 0x10c2 <_ZN14HardwareSerial5flushEv+0xc>
  }
  // If we get here, nothing is queued anymore (DRIE is disabled) and
  // the hardware finished tranmission (TXC is set).
}
    10f4:	df 91       	pop	r29
    10f6:	cf 91       	pop	r28
    10f8:	08 95       	ret

000010fa <_ZN14HardwareSerial5writeEh>:

size_t HardwareSerial::write(uint8_t c)
{
    10fa:	ef 92       	push	r14
    10fc:	ff 92       	push	r15
    10fe:	0f 93       	push	r16
    1100:	1f 93       	push	r17
    1102:	cf 93       	push	r28
    1104:	df 93       	push	r29
    1106:	ec 01       	movw	r28, r24
  _written = true;
    1108:	81 e0       	ldi	r24, 0x01	; 1
    110a:	88 8f       	std	Y+24, r24	; 0x18
  // If the buffer and the data register is empty, just write the byte
  // to the data register and be done. This shortcut helps
  // significantly improve the effective datarate at high (>
  // 500kbit/s) bitrates, where interrupt overhead becomes a slowdown.
  if (_tx_buffer_head == _tx_buffer_tail && bit_is_set(*_ucsra, UDRE0)) {
    110c:	9b 8d       	ldd	r25, Y+27	; 0x1b
    110e:	8c 8d       	ldd	r24, Y+28	; 0x1c
    1110:	98 13       	cpse	r25, r24
    1112:	05 c0       	rjmp	.+10     	; 0x111e <_ZN14HardwareSerial5writeEh+0x24>
    1114:	e8 89       	ldd	r30, Y+16	; 0x10
    1116:	f9 89       	ldd	r31, Y+17	; 0x11
    1118:	80 81       	ld	r24, Z
    111a:	85 fd       	sbrc	r24, 5
    111c:	24 c0       	rjmp	.+72     	; 0x1166 <_ZN14HardwareSerial5writeEh+0x6c>
    111e:	f6 2e       	mov	r15, r22
    *_udr = c;
    sbi(*_ucsra, TXC0);
    return 1;
  }
  tx_buffer_index_t i = (_tx_buffer_head + 1) % SERIAL_TX_BUFFER_SIZE;
    1120:	0b 8d       	ldd	r16, Y+27	; 0x1b
    1122:	10 e0       	ldi	r17, 0x00	; 0
    1124:	0f 5f       	subi	r16, 0xFF	; 255
    1126:	1f 4f       	sbci	r17, 0xFF	; 255
    1128:	0f 73       	andi	r16, 0x3F	; 63
    112a:	11 27       	eor	r17, r17
    112c:	e0 2e       	mov	r14, r16
	
  // If the output buffer is full, there's nothing for it other than to 
  // wait for the interrupt handler to empty it a bit
  while (i == _tx_buffer_tail) {
    112e:	8c 8d       	ldd	r24, Y+28	; 0x1c
    1130:	e8 12       	cpse	r14, r24
    1132:	0c c0       	rjmp	.+24     	; 0x114c <_ZN14HardwareSerial5writeEh+0x52>
    if (bit_is_clear(SREG, SREG_I)) {
    1134:	0f b6       	in	r0, 0x3f	; 63
    1136:	07 fc       	sbrc	r0, 7
    1138:	fa cf       	rjmp	.-12     	; 0x112e <_ZN14HardwareSerial5writeEh+0x34>
      // Interrupts are disabled, so we'll have to poll the data
      // register empty flag ourselves. If it is set, pretend an
      // interrupt has happened and call the handler to free up
      // space for us.
      if(bit_is_set(*_ucsra, UDRE0))
    113a:	e8 89       	ldd	r30, Y+16	; 0x10
    113c:	f9 89       	ldd	r31, Y+17	; 0x11
    113e:	80 81       	ld	r24, Z
    1140:	85 ff       	sbrs	r24, 5
    1142:	f5 cf       	rjmp	.-22     	; 0x112e <_ZN14HardwareSerial5writeEh+0x34>
	_tx_udr_empty_irq();
    1144:	ce 01       	movw	r24, r28
    1146:	0e 94 3a 08 	call	0x1074	; 0x1074 <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
    114a:	f1 cf       	rjmp	.-30     	; 0x112e <_ZN14HardwareSerial5writeEh+0x34>
    } else {
      // nop, the interrupt handler will free up space for us
    }
  }

  _tx_buffer[_tx_buffer_head] = c;
    114c:	8b 8d       	ldd	r24, Y+27	; 0x1b
    114e:	fe 01       	movw	r30, r28
    1150:	e8 0f       	add	r30, r24
    1152:	f1 1d       	adc	r31, r1
    1154:	e3 5a       	subi	r30, 0xA3	; 163
    1156:	ff 4f       	sbci	r31, 0xFF	; 255
    1158:	f0 82       	st	Z, r15
  _tx_buffer_head = i;
    115a:	0b 8f       	std	Y+27, r16	; 0x1b
	
  sbi(*_ucsrb, UDRIE0);
    115c:	ea 89       	ldd	r30, Y+18	; 0x12
    115e:	fb 89       	ldd	r31, Y+19	; 0x13
    1160:	80 81       	ld	r24, Z
    1162:	80 62       	ori	r24, 0x20	; 32
    1164:	07 c0       	rjmp	.+14     	; 0x1174 <_ZN14HardwareSerial5writeEh+0x7a>
  // If the buffer and the data register is empty, just write the byte
  // to the data register and be done. This shortcut helps
  // significantly improve the effective datarate at high (>
  // 500kbit/s) bitrates, where interrupt overhead becomes a slowdown.
  if (_tx_buffer_head == _tx_buffer_tail && bit_is_set(*_ucsra, UDRE0)) {
    *_udr = c;
    1166:	ee 89       	ldd	r30, Y+22	; 0x16
    1168:	ff 89       	ldd	r31, Y+23	; 0x17
    116a:	60 83       	st	Z, r22
    sbi(*_ucsra, TXC0);
    116c:	e8 89       	ldd	r30, Y+16	; 0x10
    116e:	f9 89       	ldd	r31, Y+17	; 0x11
    1170:	80 81       	ld	r24, Z
    1172:	80 64       	ori	r24, 0x40	; 64
    1174:	80 83       	st	Z, r24
  _tx_buffer_head = i;
	
  sbi(*_ucsrb, UDRIE0);
  
  return 1;
}
    1176:	81 e0       	ldi	r24, 0x01	; 1
    1178:	90 e0       	ldi	r25, 0x00	; 0
    117a:	df 91       	pop	r29
    117c:	cf 91       	pop	r28
    117e:	1f 91       	pop	r17
    1180:	0f 91       	pop	r16
    1182:	ff 90       	pop	r15
    1184:	ef 90       	pop	r14
    1186:	08 95       	ret

00001188 <_ZN14HardwareSerial5beginEmh>:
}

// Public Methods //////////////////////////////////////////////////////////////

void HardwareSerial::begin(unsigned long baud, byte config)
{
    1188:	cf 92       	push	r12
    118a:	df 92       	push	r13
    118c:	ef 92       	push	r14
    118e:	ff 92       	push	r15
    1190:	1f 93       	push	r17
    1192:	cf 93       	push	r28
    1194:	df 93       	push	r29
    1196:	ec 01       	movw	r28, r24
    1198:	6a 01       	movw	r12, r20
    119a:	7b 01       	movw	r14, r22
    119c:	12 2f       	mov	r17, r18
  // Try u2x mode first
  uint16_t baud_setting = (F_CPU / 4 / baud - 1) / 2;
  *_ucsra = 1 << U2X0;
    119e:	e8 89       	ldd	r30, Y+16	; 0x10
    11a0:	f9 89       	ldd	r31, Y+17	; 0x11
    11a2:	82 e0       	ldi	r24, 0x02	; 2
    11a4:	80 83       	st	Z, r24
  // hardcoded exception for 57600 for compatibility with the bootloader
  // shipped with the Duemilanove and previous boards and the firmware
  // on the 8U2 on the Uno and Mega 2560. Also, The baud_setting cannot
  // be > 4095, so switch back to non-u2x mode if the baud rate is too
  // low.
  if (((F_CPU == 16000000UL) && (baud == 57600)) || (baud_setting >4095))
    11a6:	41 15       	cp	r20, r1
    11a8:	51 4e       	sbci	r21, 0xE1	; 225
    11aa:	61 05       	cpc	r22, r1
    11ac:	71 05       	cpc	r23, r1
    11ae:	b1 f0       	breq	.+44     	; 0x11dc <_ZN14HardwareSerial5beginEmh+0x54>
// Public Methods //////////////////////////////////////////////////////////////

void HardwareSerial::begin(unsigned long baud, byte config)
{
  // Try u2x mode first
  uint16_t baud_setting = (F_CPU / 4 / baud - 1) / 2;
    11b0:	60 e0       	ldi	r22, 0x00	; 0
    11b2:	79 e0       	ldi	r23, 0x09	; 9
    11b4:	8d e3       	ldi	r24, 0x3D	; 61
    11b6:	90 e0       	ldi	r25, 0x00	; 0
    11b8:	a7 01       	movw	r20, r14
    11ba:	96 01       	movw	r18, r12
    11bc:	0e 94 49 0d 	call	0x1a92	; 0x1a92 <__udivmodsi4>
    11c0:	da 01       	movw	r26, r20
    11c2:	c9 01       	movw	r24, r18
    11c4:	01 97       	sbiw	r24, 0x01	; 1
    11c6:	a1 09       	sbc	r26, r1
    11c8:	b1 09       	sbc	r27, r1
    11ca:	b6 95       	lsr	r27
    11cc:	a7 95       	ror	r26
    11ce:	97 95       	ror	r25
    11d0:	87 95       	ror	r24
    11d2:	ac 01       	movw	r20, r24
  // hardcoded exception for 57600 for compatibility with the bootloader
  // shipped with the Duemilanove and previous boards and the firmware
  // on the 8U2 on the Uno and Mega 2560. Also, The baud_setting cannot
  // be > 4095, so switch back to non-u2x mode if the baud rate is too
  // low.
  if (((F_CPU == 16000000UL) && (baud == 57600)) || (baud_setting >4095))
    11d4:	41 15       	cp	r20, r1
    11d6:	80 e1       	ldi	r24, 0x10	; 16
    11d8:	58 07       	cpc	r21, r24
    11da:	a8 f0       	brcs	.+42     	; 0x1206 <_ZN14HardwareSerial5beginEmh+0x7e>
  {
    *_ucsra = 0;
    11dc:	e8 89       	ldd	r30, Y+16	; 0x10
    11de:	f9 89       	ldd	r31, Y+17	; 0x11
    11e0:	10 82       	st	Z, r1
    baud_setting = (F_CPU / 8 / baud - 1) / 2;
    11e2:	60 e8       	ldi	r22, 0x80	; 128
    11e4:	74 e8       	ldi	r23, 0x84	; 132
    11e6:	8e e1       	ldi	r24, 0x1E	; 30
    11e8:	90 e0       	ldi	r25, 0x00	; 0
    11ea:	a7 01       	movw	r20, r14
    11ec:	96 01       	movw	r18, r12
    11ee:	0e 94 49 0d 	call	0x1a92	; 0x1a92 <__udivmodsi4>
    11f2:	ba 01       	movw	r22, r20
    11f4:	a9 01       	movw	r20, r18
    11f6:	41 50       	subi	r20, 0x01	; 1
    11f8:	51 09       	sbc	r21, r1
    11fa:	61 09       	sbc	r22, r1
    11fc:	71 09       	sbc	r23, r1
    11fe:	76 95       	lsr	r23
    1200:	67 95       	ror	r22
    1202:	57 95       	ror	r21
    1204:	47 95       	ror	r20
  }

  // assign the baud_setting, a.k.a. ubrr (USART Baud Rate Register)
  *_ubrrh = baud_setting >> 8;
    1206:	ec 85       	ldd	r30, Y+12	; 0x0c
    1208:	fd 85       	ldd	r31, Y+13	; 0x0d
    120a:	50 83       	st	Z, r21
  *_ubrrl = baud_setting;
    120c:	ee 85       	ldd	r30, Y+14	; 0x0e
    120e:	ff 85       	ldd	r31, Y+15	; 0x0f
    1210:	40 83       	st	Z, r20

  _written = false;
    1212:	18 8e       	std	Y+24, r1	; 0x18

  //set the data bits, parity, and stop bits
#if defined(__AVR_ATmega8__)
  config |= 0x80; // select UCSRC register (shared with UBRRH)
#endif
  *_ucsrc = config;
    1214:	ec 89       	ldd	r30, Y+20	; 0x14
    1216:	fd 89       	ldd	r31, Y+21	; 0x15
    1218:	10 83       	st	Z, r17
  
  sbi(*_ucsrb, RXEN0);
    121a:	ea 89       	ldd	r30, Y+18	; 0x12
    121c:	fb 89       	ldd	r31, Y+19	; 0x13
    121e:	80 81       	ld	r24, Z
    1220:	80 61       	ori	r24, 0x10	; 16
    1222:	80 83       	st	Z, r24
  sbi(*_ucsrb, TXEN0);
    1224:	ea 89       	ldd	r30, Y+18	; 0x12
    1226:	fb 89       	ldd	r31, Y+19	; 0x13
    1228:	80 81       	ld	r24, Z
    122a:	88 60       	ori	r24, 0x08	; 8
    122c:	80 83       	st	Z, r24
  sbi(*_ucsrb, RXCIE0);
    122e:	ea 89       	ldd	r30, Y+18	; 0x12
    1230:	fb 89       	ldd	r31, Y+19	; 0x13
    1232:	80 81       	ld	r24, Z
    1234:	80 68       	ori	r24, 0x80	; 128
    1236:	80 83       	st	Z, r24
  cbi(*_ucsrb, UDRIE0);
    1238:	ea 89       	ldd	r30, Y+18	; 0x12
    123a:	fb 89       	ldd	r31, Y+19	; 0x13
    123c:	80 81       	ld	r24, Z
    123e:	8f 7d       	andi	r24, 0xDF	; 223
    1240:	80 83       	st	Z, r24
}
    1242:	df 91       	pop	r29
    1244:	cf 91       	pop	r28
    1246:	1f 91       	pop	r17
    1248:	ff 90       	pop	r15
    124a:	ef 90       	pop	r14
    124c:	df 90       	pop	r13
    124e:	cf 90       	pop	r12
    1250:	08 95       	ret

00001252 <__vector_18>:
#elif defined(USART_RXC_vect)
  ISR(USART_RXC_vect) // ATmega8
#else
  #error "Don't know what the Data Received vector is called for Serial"
#endif
  {
    1252:	1f 92       	push	r1
    1254:	0f 92       	push	r0
    1256:	0f b6       	in	r0, 0x3f	; 63
    1258:	0f 92       	push	r0
    125a:	11 24       	eor	r1, r1
    125c:	2f 93       	push	r18
    125e:	8f 93       	push	r24
    1260:	9f 93       	push	r25
    1262:	ef 93       	push	r30
    1264:	ff 93       	push	r31

// Actual interrupt handlers //////////////////////////////////////////////////////////////

void HardwareSerial::_rx_complete_irq(void)
{
  if (bit_is_clear(*_ucsra, UPE0)) {
    1266:	e0 91 6b 03 	lds	r30, 0x036B	; 0x80036b <Serial+0x10>
    126a:	f0 91 6c 03 	lds	r31, 0x036C	; 0x80036c <Serial+0x11>
    126e:	80 81       	ld	r24, Z
    1270:	e0 91 71 03 	lds	r30, 0x0371	; 0x800371 <Serial+0x16>
    1274:	f0 91 72 03 	lds	r31, 0x0372	; 0x800372 <Serial+0x17>
    1278:	82 fd       	sbrc	r24, 2
    127a:	12 c0       	rjmp	.+36     	; 0x12a0 <__vector_18+0x4e>
    // No Parity error, read byte and store it in the buffer if there is
    // room
    unsigned char c = *_udr;
    127c:	90 81       	ld	r25, Z
    rx_buffer_index_t i = (unsigned int)(_rx_buffer_head + 1) % SERIAL_RX_BUFFER_SIZE;
    127e:	80 91 74 03 	lds	r24, 0x0374	; 0x800374 <Serial+0x19>
    1282:	8f 5f       	subi	r24, 0xFF	; 255
    1284:	8f 73       	andi	r24, 0x3F	; 63

    // if we should be storing the received character into the location
    // just before the tail (meaning that the head would advance to the
    // current location of the tail), we're about to overflow the buffer
    // and so we don't write the character or advance the head.
    if (i != _rx_buffer_tail) {
    1286:	20 91 75 03 	lds	r18, 0x0375	; 0x800375 <Serial+0x1a>
    128a:	82 17       	cp	r24, r18
    128c:	51 f0       	breq	.+20     	; 0x12a2 <__vector_18+0x50>
      _rx_buffer[_rx_buffer_head] = c;
    128e:	e0 91 74 03 	lds	r30, 0x0374	; 0x800374 <Serial+0x19>
    1292:	f0 e0       	ldi	r31, 0x00	; 0
    1294:	e5 5a       	subi	r30, 0xA5	; 165
    1296:	fc 4f       	sbci	r31, 0xFC	; 252
    1298:	95 8f       	std	Z+29, r25	; 0x1d
      _rx_buffer_head = i;
    129a:	80 93 74 03 	sts	0x0374, r24	; 0x800374 <Serial+0x19>
    129e:	01 c0       	rjmp	.+2      	; 0x12a2 <__vector_18+0x50>
    }
  } else {
    // Parity error, read byte but discard it
    *_udr;
    12a0:	80 81       	ld	r24, Z
    Serial._rx_complete_irq();
  }
    12a2:	ff 91       	pop	r31
    12a4:	ef 91       	pop	r30
    12a6:	9f 91       	pop	r25
    12a8:	8f 91       	pop	r24
    12aa:	2f 91       	pop	r18
    12ac:	0f 90       	pop	r0
    12ae:	0f be       	out	0x3f, r0	; 63
    12b0:	0f 90       	pop	r0
    12b2:	1f 90       	pop	r1
    12b4:	18 95       	reti

000012b6 <__vector_19>:
#elif defined(USART_UDRE_vect)
ISR(USART_UDRE_vect)
#else
  #error "Don't know what the Data Register Empty vector is called for Serial"
#endif
{
    12b6:	1f 92       	push	r1
    12b8:	0f 92       	push	r0
    12ba:	0f b6       	in	r0, 0x3f	; 63
    12bc:	0f 92       	push	r0
    12be:	11 24       	eor	r1, r1
    12c0:	2f 93       	push	r18
    12c2:	3f 93       	push	r19
    12c4:	4f 93       	push	r20
    12c6:	5f 93       	push	r21
    12c8:	6f 93       	push	r22
    12ca:	7f 93       	push	r23
    12cc:	8f 93       	push	r24
    12ce:	9f 93       	push	r25
    12d0:	af 93       	push	r26
    12d2:	bf 93       	push	r27
    12d4:	ef 93       	push	r30
    12d6:	ff 93       	push	r31
  Serial._tx_udr_empty_irq();
    12d8:	8b e5       	ldi	r24, 0x5B	; 91
    12da:	93 e0       	ldi	r25, 0x03	; 3
    12dc:	0e 94 3a 08 	call	0x1074	; 0x1074 <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
}
    12e0:	ff 91       	pop	r31
    12e2:	ef 91       	pop	r30
    12e4:	bf 91       	pop	r27
    12e6:	af 91       	pop	r26
    12e8:	9f 91       	pop	r25
    12ea:	8f 91       	pop	r24
    12ec:	7f 91       	pop	r23
    12ee:	6f 91       	pop	r22
    12f0:	5f 91       	pop	r21
    12f2:	4f 91       	pop	r20
    12f4:	3f 91       	pop	r19
    12f6:	2f 91       	pop	r18
    12f8:	0f 90       	pop	r0
    12fa:	0f be       	out	0x3f, r0	; 63
    12fc:	0f 90       	pop	r0
    12fe:	1f 90       	pop	r1
    1300:	18 95       	reti

00001302 <_Z17Serial0_availablev>:
#endif

// Function that can be weakly referenced by serialEventRun to prevent
// pulling in this file if it's not otherwise used.
bool Serial0_available() {
  return Serial.available();
    1302:	8b e5       	ldi	r24, 0x5B	; 91
    1304:	93 e0       	ldi	r25, 0x03	; 3
    1306:	0e 94 ef 07 	call	0xfde	; 0xfde <_ZN14HardwareSerial9availableEv>
    130a:	21 e0       	ldi	r18, 0x01	; 1
    130c:	89 2b       	or	r24, r25
    130e:	09 f4       	brne	.+2      	; 0x1312 <_Z17Serial0_availablev+0x10>
    1310:	20 e0       	ldi	r18, 0x00	; 0
}
    1312:	82 2f       	mov	r24, r18
    1314:	08 95       	ret

00001316 <_GLOBAL__sub_I___vector_18>:
    size_t printNumber(unsigned long, uint8_t);
    size_t printFloat(double, uint8_t);
  protected:
    void setWriteError(int err = 1) { write_error = err; }
  public:
    Print() : write_error(0) {}
    1316:	eb e5       	ldi	r30, 0x5B	; 91
    1318:	f3 e0       	ldi	r31, 0x03	; 3
    131a:	13 82       	std	Z+3, r1	; 0x03
    131c:	12 82       	std	Z+2, r1	; 0x02
  public:
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;

    Stream() {_timeout=1000;}
    131e:	88 ee       	ldi	r24, 0xE8	; 232
    1320:	93 e0       	ldi	r25, 0x03	; 3
    1322:	a0 e0       	ldi	r26, 0x00	; 0
    1324:	b0 e0       	ldi	r27, 0x00	; 0
    1326:	84 83       	std	Z+4, r24	; 0x04
    1328:	95 83       	std	Z+5, r25	; 0x05
    132a:	a6 83       	std	Z+6, r26	; 0x06
    132c:	b7 83       	std	Z+7, r27	; 0x07
  volatile uint8_t *ucsrc, volatile uint8_t *udr) :
    _ubrrh(ubrrh), _ubrrl(ubrrl),
    _ucsra(ucsra), _ucsrb(ucsrb), _ucsrc(ucsrc),
    _udr(udr),
    _rx_buffer_head(0), _rx_buffer_tail(0),
    _tx_buffer_head(0), _tx_buffer_tail(0)
    132e:	86 e1       	ldi	r24, 0x16	; 22
    1330:	93 e0       	ldi	r25, 0x03	; 3
    1332:	91 83       	std	Z+1, r25	; 0x01
    1334:	80 83       	st	Z, r24
    1336:	85 ec       	ldi	r24, 0xC5	; 197
    1338:	90 e0       	ldi	r25, 0x00	; 0
    133a:	95 87       	std	Z+13, r25	; 0x0d
    133c:	84 87       	std	Z+12, r24	; 0x0c
    133e:	84 ec       	ldi	r24, 0xC4	; 196
    1340:	90 e0       	ldi	r25, 0x00	; 0
    1342:	97 87       	std	Z+15, r25	; 0x0f
    1344:	86 87       	std	Z+14, r24	; 0x0e
    1346:	80 ec       	ldi	r24, 0xC0	; 192
    1348:	90 e0       	ldi	r25, 0x00	; 0
    134a:	91 8b       	std	Z+17, r25	; 0x11
    134c:	80 8b       	std	Z+16, r24	; 0x10
    134e:	81 ec       	ldi	r24, 0xC1	; 193
    1350:	90 e0       	ldi	r25, 0x00	; 0
    1352:	93 8b       	std	Z+19, r25	; 0x13
    1354:	82 8b       	std	Z+18, r24	; 0x12
    1356:	82 ec       	ldi	r24, 0xC2	; 194
    1358:	90 e0       	ldi	r25, 0x00	; 0
    135a:	95 8b       	std	Z+21, r25	; 0x15
    135c:	84 8b       	std	Z+20, r24	; 0x14
    135e:	86 ec       	ldi	r24, 0xC6	; 198
    1360:	90 e0       	ldi	r25, 0x00	; 0
    1362:	97 8b       	std	Z+23, r25	; 0x17
    1364:	86 8b       	std	Z+22, r24	; 0x16
    1366:	11 8e       	std	Z+25, r1	; 0x19
    1368:	12 8e       	std	Z+26, r1	; 0x1a
    136a:	13 8e       	std	Z+27, r1	; 0x1b
    136c:	14 8e       	std	Z+28, r1	; 0x1c
    136e:	08 95       	ret

00001370 <_ZN5Print5writeEPKhj>:
  return write(c);
}

size_t Print::print(unsigned char b, int base)
{
  return print((unsigned long) b, base);
    1370:	cf 92       	push	r12
    1372:	df 92       	push	r13
    1374:	ef 92       	push	r14
    1376:	ff 92       	push	r15
    1378:	0f 93       	push	r16
    137a:	1f 93       	push	r17
    137c:	cf 93       	push	r28
    137e:	df 93       	push	r29
    1380:	6c 01       	movw	r12, r24
    1382:	7a 01       	movw	r14, r20
    1384:	8b 01       	movw	r16, r22
    1386:	c0 e0       	ldi	r28, 0x00	; 0
    1388:	d0 e0       	ldi	r29, 0x00	; 0
    138a:	ce 15       	cp	r28, r14
    138c:	df 05       	cpc	r29, r15
    138e:	89 f0       	breq	.+34     	; 0x13b2 <_ZN5Print5writeEPKhj+0x42>
    1390:	d8 01       	movw	r26, r16
    1392:	6d 91       	ld	r22, X+
    1394:	8d 01       	movw	r16, r26
    1396:	d6 01       	movw	r26, r12
    1398:	ed 91       	ld	r30, X+
    139a:	fc 91       	ld	r31, X
    139c:	01 90       	ld	r0, Z+
    139e:	f0 81       	ld	r31, Z
    13a0:	e0 2d       	mov	r30, r0
    13a2:	c6 01       	movw	r24, r12
    13a4:	09 95       	icall
    13a6:	89 2b       	or	r24, r25
    13a8:	11 f4       	brne	.+4      	; 0x13ae <_ZN5Print5writeEPKhj+0x3e>
    13aa:	7e 01       	movw	r14, r28
    13ac:	02 c0       	rjmp	.+4      	; 0x13b2 <_ZN5Print5writeEPKhj+0x42>
    13ae:	21 96       	adiw	r28, 0x01	; 1
    13b0:	ec cf       	rjmp	.-40     	; 0x138a <_ZN5Print5writeEPKhj+0x1a>
    13b2:	c7 01       	movw	r24, r14
    13b4:	df 91       	pop	r29
    13b6:	cf 91       	pop	r28
    13b8:	1f 91       	pop	r17
    13ba:	0f 91       	pop	r16
    13bc:	ff 90       	pop	r15
    13be:	ef 90       	pop	r14
    13c0:	df 90       	pop	r13
    13c2:	cf 90       	pop	r12
    13c4:	08 95       	ret

000013c6 <_ZN5Print5writeEPKc>:
    13c6:	61 15       	cp	r22, r1
    13c8:	71 05       	cpc	r23, r1
    13ca:	79 f0       	breq	.+30     	; 0x13ea <_ZN5Print5writeEPKc+0x24>
    13cc:	fb 01       	movw	r30, r22
    13ce:	01 90       	ld	r0, Z+
    13d0:	00 20       	and	r0, r0
    13d2:	e9 f7       	brne	.-6      	; 0x13ce <_ZN5Print5writeEPKc+0x8>
    13d4:	31 97       	sbiw	r30, 0x01	; 1
    13d6:	af 01       	movw	r20, r30
    13d8:	46 1b       	sub	r20, r22
    13da:	57 0b       	sbc	r21, r23
    13dc:	dc 01       	movw	r26, r24
    13de:	ed 91       	ld	r30, X+
    13e0:	fc 91       	ld	r31, X
    13e2:	02 80       	ldd	r0, Z+2	; 0x02
    13e4:	f3 81       	ldd	r31, Z+3	; 0x03
    13e6:	e0 2d       	mov	r30, r0
    13e8:	09 94       	ijmp
    13ea:	80 e0       	ldi	r24, 0x00	; 0
    13ec:	90 e0       	ldi	r25, 0x00	; 0
    13ee:	08 95       	ret

000013f0 <_ZN5Print5printEPKc>:
    13f0:	0c 94 e3 09 	jmp	0x13c6	; 0x13c6 <_ZN5Print5writeEPKc>

000013f4 <_ZN5Print7printlnEv>:
    13f4:	6d ee       	ldi	r22, 0xED	; 237
    13f6:	71 e0       	ldi	r23, 0x01	; 1
    13f8:	0c 94 e3 09 	jmp	0x13c6	; 0x13c6 <_ZN5Print5writeEPKc>

000013fc <_ZN5Print7printlnEPKc>:
    13fc:	0f 93       	push	r16
    13fe:	1f 93       	push	r17
    1400:	cf 93       	push	r28
    1402:	df 93       	push	r29
    1404:	ec 01       	movw	r28, r24
    1406:	0e 94 e3 09 	call	0x13c6	; 0x13c6 <_ZN5Print5writeEPKc>
    140a:	8c 01       	movw	r16, r24
    140c:	ce 01       	movw	r24, r28
    140e:	0e 94 fa 09 	call	0x13f4	; 0x13f4 <_ZN5Print7printlnEv>
    1412:	80 0f       	add	r24, r16
    1414:	91 1f       	adc	r25, r17
    1416:	df 91       	pop	r29
    1418:	cf 91       	pop	r28
    141a:	1f 91       	pop	r17
    141c:	0f 91       	pop	r16
    141e:	08 95       	ret

00001420 <_ZN5Print11printNumberEmh>:
    1420:	4f 92       	push	r4
    1422:	5f 92       	push	r5
    1424:	6f 92       	push	r6
    1426:	7f 92       	push	r7
    1428:	ef 92       	push	r14
    142a:	ff 92       	push	r15
    142c:	0f 93       	push	r16
    142e:	1f 93       	push	r17
    1430:	cf 93       	push	r28
    1432:	df 93       	push	r29
    1434:	cd b7       	in	r28, 0x3d	; 61
    1436:	de b7       	in	r29, 0x3e	; 62
    1438:	a1 97       	sbiw	r28, 0x21	; 33
    143a:	0f b6       	in	r0, 0x3f	; 63
    143c:	f8 94       	cli
    143e:	de bf       	out	0x3e, r29	; 62
    1440:	0f be       	out	0x3f, r0	; 63
    1442:	cd bf       	out	0x3d, r28	; 61
    1444:	7c 01       	movw	r14, r24
    1446:	fa 01       	movw	r30, r20
    1448:	cb 01       	movw	r24, r22
    144a:	19 a2       	std	Y+33, r1	; 0x21
    144c:	22 30       	cpi	r18, 0x02	; 2
    144e:	08 f4       	brcc	.+2      	; 0x1452 <_ZN5Print11printNumberEmh+0x32>
    1450:	2a e0       	ldi	r18, 0x0A	; 10
    1452:	8e 01       	movw	r16, r28
    1454:	0f 5d       	subi	r16, 0xDF	; 223
    1456:	1f 4f       	sbci	r17, 0xFF	; 255
    1458:	42 2e       	mov	r4, r18
    145a:	51 2c       	mov	r5, r1
    145c:	61 2c       	mov	r6, r1
    145e:	71 2c       	mov	r7, r1
    1460:	bf 01       	movw	r22, r30
    1462:	a3 01       	movw	r20, r6
    1464:	92 01       	movw	r18, r4
    1466:	0e 94 49 0d 	call	0x1a92	; 0x1a92 <__udivmodsi4>
    146a:	f9 01       	movw	r30, r18
    146c:	ca 01       	movw	r24, r20
    146e:	01 50       	subi	r16, 0x01	; 1
    1470:	11 09       	sbc	r17, r1
    1472:	6a 30       	cpi	r22, 0x0A	; 10
    1474:	14 f4       	brge	.+4      	; 0x147a <_ZN5Print11printNumberEmh+0x5a>
    1476:	60 5d       	subi	r22, 0xD0	; 208
    1478:	01 c0       	rjmp	.+2      	; 0x147c <_ZN5Print11printNumberEmh+0x5c>
    147a:	69 5c       	subi	r22, 0xC9	; 201
    147c:	d8 01       	movw	r26, r16
    147e:	6c 93       	st	X, r22
    1480:	23 2b       	or	r18, r19
    1482:	24 2b       	or	r18, r20
    1484:	25 2b       	or	r18, r21
    1486:	61 f7       	brne	.-40     	; 0x1460 <_ZN5Print11printNumberEmh+0x40>
    1488:	b8 01       	movw	r22, r16
    148a:	c7 01       	movw	r24, r14
    148c:	0e 94 e3 09 	call	0x13c6	; 0x13c6 <_ZN5Print5writeEPKc>
    1490:	a1 96       	adiw	r28, 0x21	; 33
    1492:	0f b6       	in	r0, 0x3f	; 63
    1494:	f8 94       	cli
    1496:	de bf       	out	0x3e, r29	; 62
    1498:	0f be       	out	0x3f, r0	; 63
    149a:	cd bf       	out	0x3d, r28	; 61
    149c:	df 91       	pop	r29
    149e:	cf 91       	pop	r28
    14a0:	1f 91       	pop	r17
    14a2:	0f 91       	pop	r16
    14a4:	ff 90       	pop	r15
    14a6:	ef 90       	pop	r14
    14a8:	7f 90       	pop	r7
    14aa:	6f 90       	pop	r6
    14ac:	5f 90       	pop	r5
    14ae:	4f 90       	pop	r4
    14b0:	08 95       	ret

000014b2 <_ZN5Print5printEmi>:
    14b2:	21 15       	cp	r18, r1
    14b4:	31 05       	cpc	r19, r1
    14b6:	41 f4       	brne	.+16     	; 0x14c8 <_ZN5Print5printEmi+0x16>
    14b8:	dc 01       	movw	r26, r24
    14ba:	ed 91       	ld	r30, X+
    14bc:	fc 91       	ld	r31, X
    14be:	01 90       	ld	r0, Z+
    14c0:	f0 81       	ld	r31, Z
    14c2:	e0 2d       	mov	r30, r0
    14c4:	64 2f       	mov	r22, r20
    14c6:	09 94       	ijmp
    14c8:	0c 94 10 0a 	jmp	0x1420	; 0x1420 <_ZN5Print11printNumberEmh>

000014cc <_ZN5Print7printlnEhi>:
  n += println();
  return n;
}

size_t Print::println(unsigned char b, int base)
{
    14cc:	0f 93       	push	r16
    14ce:	1f 93       	push	r17
    14d0:	cf 93       	push	r28
    14d2:	df 93       	push	r29
    14d4:	ec 01       	movw	r28, r24
    14d6:	9a 01       	movw	r18, r20
  return write(c);
}

size_t Print::print(unsigned char b, int base)
{
  return print((unsigned long) b, base);
    14d8:	46 2f       	mov	r20, r22
    14da:	50 e0       	ldi	r21, 0x00	; 0
    14dc:	60 e0       	ldi	r22, 0x00	; 0
    14de:	70 e0       	ldi	r23, 0x00	; 0
    14e0:	0e 94 59 0a 	call	0x14b2	; 0x14b2 <_ZN5Print5printEmi>
    14e4:	8c 01       	movw	r16, r24
}

size_t Print::println(unsigned char b, int base)
{
  size_t n = print(b, base);
  n += println();
    14e6:	ce 01       	movw	r24, r28
    14e8:	0e 94 fa 09 	call	0x13f4	; 0x13f4 <_ZN5Print7printlnEv>
  return n;
}
    14ec:	80 0f       	add	r24, r16
    14ee:	91 1f       	adc	r25, r17
    14f0:	df 91       	pop	r29
    14f2:	cf 91       	pop	r28
    14f4:	1f 91       	pop	r17
    14f6:	0f 91       	pop	r16
    14f8:	08 95       	ret

000014fa <yield>:
 * libraries or sketches that supports cooperative threads.
 *
 * Its defined as a weak symbol and it can be redefined to implement a
 * real cooperative scheduler.
 */
static void __empty() {
    14fa:	08 95       	ret

000014fc <StartOS>:
    osEE_end_primitive(flags);
  }
#endif /* OSEE_HAS_ERRORHOOK */

  return ev;
}
    14fc:	0f 93       	push	r16
    14fe:	1f 93       	push	r17
    1500:	cf 93       	push	r28
    1502:	df 93       	push	r29
    1504:	00 d0       	rcall	.+0      	; 0x1506 <StartOS+0xa>
    1506:	cd b7       	in	r28, 0x3d	; 61
    1508:	de b7       	in	r29, 0x3e	; 62
    150a:	00 91 8e 01 	lds	r16, 0x018E	; 0x80018e <CDB>
    150e:	10 91 8f 01 	lds	r17, 0x018F	; 0x80018f <CDB+0x1>
    1512:	9f b7       	in	r25, 0x3f	; 63
    1514:	f8 94       	cli
    1516:	f8 01       	movw	r30, r16
    1518:	20 85       	ldd	r18, Z+8	; 0x08
    151a:	31 85       	ldd	r19, Z+9	; 0x09
    151c:	23 2b       	or	r18, r19
    151e:	e9 f4       	brne	.+58     	; 0x155a <StartOS+0x5e>
    1520:	28 2f       	mov	r18, r24
    1522:	8c e1       	ldi	r24, 0x1C	; 28
    1524:	9c e0       	ldi	r25, 0x0C	; 12
    1526:	9a 83       	std	Y+2, r25	; 0x02
    1528:	89 83       	std	Y+1, r24	; 0x01
    152a:	80 91 92 01 	lds	r24, 0x0192	; 0x800192 <CDB+0x4>
    152e:	90 91 93 01 	lds	r25, 0x0193	; 0x800193 <CDB+0x5>
    1532:	22 87       	std	Z+10, r18	; 0x0a
    1534:	22 e0       	ldi	r18, 0x02	; 2
    1536:	30 e0       	ldi	r19, 0x00	; 0
    1538:	31 87       	std	Z+9, r19	; 0x09
    153a:	20 87       	std	Z+8, r18	; 0x08
    153c:	fc 01       	movw	r30, r24
    153e:	62 81       	ldd	r22, Z+2	; 0x02
    1540:	73 81       	ldd	r23, Z+3	; 0x03
    1542:	ab 01       	movw	r20, r22
    1544:	0e 94 f4 00 	call	0x1e8	; 0x1e8 <osEE_hal_save_ctx_and_ready2stacked>
    1548:	f8 01       	movw	r30, r16
    154a:	80 85       	ldd	r24, Z+8	; 0x08
    154c:	91 85       	ldd	r25, Z+9	; 0x09
    154e:	02 97       	sbiw	r24, 0x02	; 2
    1550:	09 f4       	brne	.+2      	; 0x1554 <StartOS+0x58>
    1552:	78 94       	sei
    1554:	80 e0       	ldi	r24, 0x00	; 0
    1556:	90 e0       	ldi	r25, 0x00	; 0
    1558:	03 c0       	rjmp	.+6      	; 0x1560 <StartOS+0x64>
    155a:	9f bf       	out	0x3f, r25	; 63
    155c:	81 e0       	ldi	r24, 0x01	; 1
    155e:	90 e0       	ldi	r25, 0x00	; 0
    1560:	0f 90       	pop	r0
    1562:	0f 90       	pop	r0
    1564:	df 91       	pop	r29
    1566:	cf 91       	pop	r28
    1568:	1f 91       	pop	r17
    156a:	0f 91       	pop	r16
    156c:	08 95       	ret

0000156e <ActivateTask>:
    156e:	cf 93       	push	r28
    1570:	90 e0       	ldi	r25, 0x00	; 0
    1572:	20 91 8a 01 	lds	r18, 0x018A	; 0x80018a <KDB+0x6>
    1576:	30 91 8b 01 	lds	r19, 0x018B	; 0x80018b <KDB+0x7>
    157a:	82 17       	cp	r24, r18
    157c:	93 07       	cpc	r25, r19
    157e:	d8 f4       	brcc	.+54     	; 0x15b6 <ActivateTask+0x48>
    1580:	e0 91 86 01 	lds	r30, 0x0186	; 0x800186 <KDB+0x2>
    1584:	f0 91 87 01 	lds	r31, 0x0187	; 0x800187 <KDB+0x3>
    1588:	88 0f       	add	r24, r24
    158a:	99 1f       	adc	r25, r25
    158c:	e8 0f       	add	r30, r24
    158e:	f9 1f       	adc	r31, r25
    1590:	40 81       	ld	r20, Z
    1592:	51 81       	ldd	r21, Z+1	; 0x01
    1594:	fa 01       	movw	r30, r20
    1596:	87 81       	ldd	r24, Z+7	; 0x07
    1598:	90 85       	ldd	r25, Z+8	; 0x08
    159a:	02 97       	sbiw	r24, 0x02	; 2
    159c:	60 f4       	brcc	.+24     	; 0x15b6 <ActivateTask+0x48>
    159e:	cf b7       	in	r28, 0x3f	; 63
    15a0:	f8 94       	cli
    15a2:	21 e0       	ldi	r18, 0x01	; 1
    15a4:	30 e0       	ldi	r19, 0x00	; 0
    15a6:	6e e8       	ldi	r22, 0x8E	; 142
    15a8:	71 e0       	ldi	r23, 0x01	; 1
    15aa:	84 e8       	ldi	r24, 0x84	; 132
    15ac:	91 e0       	ldi	r25, 0x01	; 1
    15ae:	0e 94 39 0b 	call	0x1672	; 0x1672 <osEE_scheduler_task_activated>
    15b2:	cf bf       	out	0x3f, r28	; 63
    15b4:	02 c0       	rjmp	.+4      	; 0x15ba <ActivateTask+0x4c>
    15b6:	83 e0       	ldi	r24, 0x03	; 3
    15b8:	90 e0       	ldi	r25, 0x00	; 0
    15ba:	cf 91       	pop	r28
    15bc:	08 95       	ret

000015be <TerminateTask>:
  CONSTP2VAR(OsEE_CDB, OS_APPL_DATA, AUTOMATIC)
    p_cdb       = osEE_get_curr_core();
  CONSTP2VAR(OsEE_CCB, OS_APPL_DATA, AUTOMATIC)
    p_ccb       = p_cdb->p_ccb;
  CONSTP2VAR(OsEE_TDB, OS_APPL_DATA, AUTOMATIC)
    p_curr      = p_ccb->p_curr;
    15be:	e0 91 8e 01 	lds	r30, 0x018E	; 0x80018e <CDB>
    15c2:	f0 91 8f 01 	lds	r31, 0x018F	; 0x80018f <CDB+0x1>
    15c6:	01 90       	ld	r0, Z+
    15c8:	f0 81       	ld	r31, Z
    15ca:	e0 2d       	mov	r30, r0
}

/* Suspend/Resume Interrupts */
OSEE_STATIC_INLINE OsEE_reg osEE_hal_suspendIRQ ( void )
{
  register OsEE_reg sr = SREG;
    15cc:	8f b7       	in	r24, 0x3f	; 63
 =============================================================================*/

/* Disable/Enable Interrupts */
OSEE_STATIC_INLINE void osEE_hal_disableIRQ( void )
{
  cli();
    15ce:	f8 94       	cli
(
  P2VAR(OsEE_HDB, AUTOMATIC, OS_APPL_DATA)  p_to_term,
  VAR(OsEE_kernel_cb, AUTOMATIC)            kernel_cb
)
{
  osEE_hal_terminate_ctx(p_to_term->p_scb, kernel_cb);
    15d0:	6e ee       	ldi	r22, 0xEE	; 238
    15d2:	7a e0       	ldi	r23, 0x0A	; 10
    15d4:	82 81       	ldd	r24, Z+2	; 0x02
    15d6:	93 81       	ldd	r25, Z+3	; 0x03
    15d8:	0e 94 14 01 	call	0x228	; 0x228 <osEE_hal_terminate_ctx>

000015dc <osEE_scheduler_task_end>:
FUNC(void, OS_CODE)
  osEE_scheduler_task_end
(
  void
)
{
    15dc:	cf 93       	push	r28
    15de:	df 93       	push	r29
    15e0:	00 d0       	rcall	.+0      	; 0x15e2 <osEE_scheduler_task_end+0x6>
    15e2:	cd b7       	in	r28, 0x3d	; 61
    15e4:	de b7       	in	r29, 0x3e	; 62
  P2VAR(OsEE_TDB, AUTOMATIC, OS_APPL_DATA)  p_to;
  P2VAR(OsEE_TDB, AUTOMATIC, OS_APPL_DATA)  p_from;

  p_to = osEE_scheduler_task_terminated(osEE_get_kernel(), osEE_get_curr_core(),
    15e6:	ae 01       	movw	r20, r28
    15e8:	4f 5f       	subi	r20, 0xFF	; 255
    15ea:	5f 4f       	sbci	r21, 0xFF	; 255
    15ec:	6e e8       	ldi	r22, 0x8E	; 142
    15ee:	71 e0       	ldi	r23, 0x01	; 1
    15f0:	84 e8       	ldi	r24, 0x84	; 132
    15f2:	91 e0       	ldi	r25, 0x01	; 1
    15f4:	0e 94 a0 0b 	call	0x1740	; 0x1740 <osEE_scheduler_task_terminated>
(
  P2VAR(OsEE_TDB, AUTOMATIC, OS_APPL_CONST) p_from,
  P2VAR(OsEE_TDB, AUTOMATIC, OS_APPL_CONST) p_to
)
{
  osEE_change_context_from_task_end(p_from, p_to);
    15f8:	bc 01       	movw	r22, r24
    15fa:	89 81       	ldd	r24, Y+1	; 0x01
    15fc:	9a 81       	ldd	r25, Y+2	; 0x02
    15fe:	0e 94 3a 0c 	call	0x1874	; 0x1874 <osEE_change_context_from_task_end>
  if (p_from->task_type != OSEE_TASK_TYPE_ISR2) {
    osEE_change_context_from_task_end(p_from, p_to);
  } else {
    osEE_change_context_from_isr2_end(p_from, p_to);
  }
}
    1602:	0f 90       	pop	r0
    1604:	0f 90       	pop	r0
    1606:	df 91       	pop	r29
    1608:	cf 91       	pop	r28
    160a:	08 95       	ret

0000160c <osEE_scheduler_task_wrapper_restore>:
FUNC(void, OS_CODE)
  osEE_scheduler_task_wrapper_restore
(
  P2VAR(OsEE_TDB, AUTOMATIC, OS_APPL_DATA)  p_tdb_to
)
{
    160c:	08 95       	ret

0000160e <osEE_scheduler_task_wrapper_run>:
FUNC(void, OS_CODE)
  osEE_scheduler_task_wrapper_run
(
  P2VAR(OsEE_TDB, AUTOMATIC, OS_APPL_DATA)  p_tdb_to
)
{
    160e:	ec 01       	movw	r28, r24
  CONST(TaskPrio, AUTOMATIC) task_prio = p_tdb_to->p_tcb->current_prio;
    1610:	ec 81       	ldd	r30, Y+4	; 0x04
    1612:	fd 81       	ldd	r31, Y+5	; 0x05
  osEE_scheduler_task_wrapper_restore(p_tdb_to);

  if (task_prio < OSEE_ISR_ALL_PRIO) {
    1614:	81 81       	ldd	r24, Z+1	; 0x01
    1616:	8f 3f       	cpi	r24, 0xFF	; 255
    1618:	09 f0       	breq	.+2      	; 0x161c <osEE_scheduler_task_wrapper_run+0xe>
  cli();
}

OSEE_STATIC_INLINE void osEE_hal_enableIRQ( void )
{
  sei();
    161a:	78 94       	sei
    /* Set-up IPL at current TASK level in addition to enable IRQ */
    osEE_hal_set_ipl(task_prio);
    osEE_hal_enableIRQ();
  }
  p_tdb_to->task_func();
    161c:	e9 85       	ldd	r30, Y+9	; 0x09
    161e:	fa 85       	ldd	r31, Y+10	; 0x0a
    1620:	09 95       	icall
}

/* Suspend/Resume Interrupts */
OSEE_STATIC_INLINE OsEE_reg osEE_hal_suspendIRQ ( void )
{
  register OsEE_reg sr = SREG;
    1622:	8f b7       	in	r24, 0x3f	; 63
 =============================================================================*/

/* Disable/Enable Interrupts */
OSEE_STATIC_INLINE void osEE_hal_disableIRQ( void )
{
  cli();
    1624:	f8 94       	cli
    1626:	6e ee       	ldi	r22, 0xEE	; 238
    1628:	7a e0       	ldi	r23, 0x0A	; 10
    162a:	8a 81       	ldd	r24, Y+2	; 0x02
    162c:	9b 81       	ldd	r25, Y+3	; 0x03
    162e:	0e 94 14 01 	call	0x228	; 0x228 <osEE_hal_terminate_ctx>

00001632 <osEE_idle_hook_wrapper>:
FUNC(void, OS_CODE)
  osEE_idle_hook_wrapper
(
  void
)
{
    1632:	0f 93       	push	r16
    1634:	1f 93       	push	r17
    1636:	cf 93       	push	r28
    1638:	df 93       	push	r29
  (void)osEE_scheduler_task_preemption_point(osEE_get_kernel(), p_cdb);
  osEE_end_primitive(flags);
#endif /* !OSEE_STARTOS_RETURN && !OSEE_API_DYNAMIC && !OSEE_HAS_AUTOSTART_TASK */
  while (p_cdb->p_ccb->os_status == OSEE_KERNEL_STARTED) {
#if (defined(OSEE_HAS_IDLEHOOK)) || (defined(OSEE_API_DYNAMIC))
    CONST(TaskFunc, AUTOMATIC) p_idle_hook = p_cdb->p_idle_hook;
    163a:	c0 91 90 01 	lds	r28, 0x0190	; 0x800190 <CDB+0x2>
    163e:	d0 91 91 01 	lds	r29, 0x0191	; 0x800191 <CDB+0x3>
  /* Schedule Here: Autostart TASKs */
  CONST(OsEE_reg, AUTOMATIC) flags = osEE_begin_primitive();
  (void)osEE_scheduler_task_preemption_point(osEE_get_kernel(), p_cdb);
  osEE_end_primitive(flags);
#endif /* !OSEE_STARTOS_RETURN && !OSEE_API_DYNAMIC && !OSEE_HAS_AUTOSTART_TASK */
  while (p_cdb->p_ccb->os_status == OSEE_KERNEL_STARTED) {
    1642:	00 91 8e 01 	lds	r16, 0x018E	; 0x80018e <CDB>
    1646:	10 91 8f 01 	lds	r17, 0x018F	; 0x80018f <CDB+0x1>
    164a:	f8 01       	movw	r30, r16
    164c:	80 85       	ldd	r24, Z+8	; 0x08
    164e:	91 85       	ldd	r25, Z+9	; 0x09
    1650:	02 97       	sbiw	r24, 0x02	; 2
    1652:	29 f4       	brne	.+10     	; 0x165e <osEE_idle_hook_wrapper+0x2c>
#if (defined(OSEE_HAS_IDLEHOOK)) || (defined(OSEE_API_DYNAMIC))
    CONST(TaskFunc, AUTOMATIC) p_idle_hook = p_cdb->p_idle_hook;
    if (p_idle_hook != NULL) {
    1654:	20 97       	sbiw	r28, 0x00	; 0
    1656:	f1 f3       	breq	.-4      	; 0x1654 <osEE_idle_hook_wrapper+0x22>
      p_idle_hook();
    1658:	fe 01       	movw	r30, r28
    165a:	09 95       	icall
    165c:	f6 cf       	rjmp	.-20     	; 0x164a <osEE_idle_hook_wrapper+0x18>
    }
#else
    ; /* Empty Endless Loop */
#endif /* OSEE_HAS_IDLEHOOK || OSEE_API_DYNAMIC */
  }
  osEE_idle_task_terminate(p_cdb->p_idle_task);
    165e:	80 91 92 01 	lds	r24, 0x0192	; 0x800192 <CDB+0x4>
    1662:	90 91 93 01 	lds	r25, 0x0193	; 0x800193 <CDB+0x5>
}
    1666:	df 91       	pop	r29
    1668:	cf 91       	pop	r28
    166a:	1f 91       	pop	r17
    166c:	0f 91       	pop	r16
    }
#else
    ; /* Empty Endless Loop */
#endif /* OSEE_HAS_IDLEHOOK || OSEE_API_DYNAMIC */
  }
  osEE_idle_task_terminate(p_cdb->p_idle_task);
    166e:	0c 94 51 0c 	jmp	0x18a2	; 0x18a2 <osEE_idle_task_terminate>

00001672 <osEE_scheduler_task_activated>:
    }
  }
#endif /* !OSEE_SINGLECORE */

  return is_preemption;
}
    1672:	ef 92       	push	r14
    1674:	ff 92       	push	r15
    1676:	0f 93       	push	r16
    1678:	1f 93       	push	r17
    167a:	cf 93       	push	r28
    167c:	df 93       	push	r29
    167e:	da 01       	movw	r26, r20
    1680:	14 96       	adiw	r26, 0x04	; 4
    1682:	ed 90       	ld	r14, X+
    1684:	fc 90       	ld	r15, X
    1686:	15 97       	sbiw	r26, 0x05	; 5
    1688:	e7 01       	movw	r28, r14
    168a:	98 81       	ld	r25, Y
    168c:	1d 96       	adiw	r26, 0x0d	; 13
    168e:	8c 91       	ld	r24, X
    1690:	98 17       	cp	r25, r24
    1692:	08 f0       	brcs	.+2      	; 0x1696 <osEE_scheduler_task_activated+0x24>
    1694:	4c c0       	rjmp	.+152    	; 0x172e <osEE_scheduler_task_activated+0xbc>
    1696:	fb 01       	movw	r30, r22
    1698:	01 90       	ld	r0, Z+
    169a:	f0 81       	ld	r31, Z
    169c:	e0 2d       	mov	r30, r0
    169e:	00 81       	ld	r16, Z
    16a0:	11 81       	ldd	r17, Z+1	; 0x01
    16a2:	d8 01       	movw	r26, r16
    16a4:	14 96       	adiw	r26, 0x04	; 4
    16a6:	6d 91       	ld	r22, X+
    16a8:	7c 91       	ld	r23, X
    16aa:	15 97       	sbiw	r26, 0x05	; 5
    16ac:	9f 5f       	subi	r25, 0xFF	; 255
    16ae:	98 83       	st	Y, r25
    16b0:	a4 81       	ldd	r26, Z+4	; 0x04
    16b2:	b5 81       	ldd	r27, Z+5	; 0x05
    16b4:	23 2b       	or	r18, r19
    16b6:	11 f1       	breq	.+68     	; 0x16fc <osEE_scheduler_task_activated+0x8a>
    16b8:	eb 01       	movw	r28, r22
    16ba:	99 81       	ldd	r25, Y+1	; 0x01
    16bc:	e7 01       	movw	r28, r14
    16be:	89 81       	ldd	r24, Y+1	; 0x01
    16c0:	98 17       	cp	r25, r24
    16c2:	e0 f4       	brcc	.+56     	; 0x16fc <osEE_scheduler_task_activated+0x8a>
    16c4:	8d 91       	ld	r24, X+
    16c6:	9c 91       	ld	r25, X
    16c8:	11 97       	sbiw	r26, 0x01	; 1
    16ca:	95 83       	std	Z+5, r25	; 0x05
    16cc:	84 83       	std	Z+4, r24	; 0x04
    16ce:	82 e0       	ldi	r24, 0x02	; 2
    16d0:	90 e0       	ldi	r25, 0x00	; 0
    16d2:	eb 01       	movw	r28, r22
    16d4:	9b 83       	std	Y+3, r25	; 0x03
    16d6:	8a 83       	std	Y+2, r24	; 0x02
    16d8:	13 96       	adiw	r26, 0x03	; 3
    16da:	5c 93       	st	X, r21
    16dc:	4e 93       	st	-X, r20
    16de:	12 97       	sbiw	r26, 0x02	; 2
    16e0:	86 81       	ldd	r24, Z+6	; 0x06
    16e2:	97 81       	ldd	r25, Z+7	; 0x07
    16e4:	11 96       	adiw	r26, 0x01	; 1
    16e6:	9c 93       	st	X, r25
    16e8:	8e 93       	st	-X, r24
    16ea:	b7 83       	std	Z+7, r27	; 0x07
    16ec:	a6 83       	std	Z+6, r26	; 0x06
    16ee:	51 83       	std	Z+1, r21	; 0x01
    16f0:	40 83       	st	Z, r20
    16f2:	ba 01       	movw	r22, r20
    16f4:	c8 01       	movw	r24, r16
    16f6:	0e 94 1e 0c 	call	0x183c	; 0x183c <osEE_change_context_from_running>
    16fa:	16 c0       	rjmp	.+44     	; 0x1728 <osEE_scheduler_task_activated+0xb6>
    16fc:	e7 01       	movw	r28, r14
    16fe:	8a 81       	ldd	r24, Y+2	; 0x02
    1700:	9b 81       	ldd	r25, Y+3	; 0x03
    1702:	89 2b       	or	r24, r25
    1704:	21 f4       	brne	.+8      	; 0x170e <osEE_scheduler_task_activated+0x9c>
    1706:	81 e0       	ldi	r24, 0x01	; 1
    1708:	90 e0       	ldi	r25, 0x00	; 0
    170a:	9b 83       	std	Y+3, r25	; 0x03
    170c:	8a 83       	std	Y+2, r24	; 0x02
    170e:	8d 91       	ld	r24, X+
    1710:	9c 91       	ld	r25, X
    1712:	11 97       	sbiw	r26, 0x01	; 1
    1714:	95 83       	std	Z+5, r25	; 0x05
    1716:	84 83       	std	Z+4, r24	; 0x04
    1718:	11 96       	adiw	r26, 0x01	; 1
    171a:	1c 92       	st	X, r1
    171c:	1e 92       	st	-X, r1
    171e:	bd 01       	movw	r22, r26
    1720:	cf 01       	movw	r24, r30
    1722:	02 96       	adiw	r24, 0x02	; 2
    1724:	0e 94 18 0d 	call	0x1a30	; 0x1a30 <osEE_scheduler_rq_insert>
    1728:	80 e0       	ldi	r24, 0x00	; 0
    172a:	90 e0       	ldi	r25, 0x00	; 0
    172c:	02 c0       	rjmp	.+4      	; 0x1732 <osEE_scheduler_task_activated+0xc0>
    172e:	84 e0       	ldi	r24, 0x04	; 4
    1730:	90 e0       	ldi	r25, 0x00	; 0
    1732:	df 91       	pop	r29
    1734:	cf 91       	pop	r28
    1736:	1f 91       	pop	r17
    1738:	0f 91       	pop	r16
    173a:	ff 90       	pop	r15
    173c:	ef 90       	pop	r14
    173e:	08 95       	ret

00001740 <osEE_scheduler_task_terminated>:
(
  P2VAR(OsEE_KDB, AUTOMATIC, OS_APPL_DATA)    p_kdb,
  P2VAR(OsEE_CDB, AUTOMATIC, OS_APPL_DATA)    p_cdb,
  P2VAR(OsEE_TDB *, AUTOMATIC, OS_APPL_DATA)  pp_tdb_from
)
{
    1740:	af 92       	push	r10
    1742:	bf 92       	push	r11
    1744:	cf 92       	push	r12
    1746:	df 92       	push	r13
    1748:	ef 92       	push	r14
    174a:	ff 92       	push	r15
    174c:	0f 93       	push	r16
    174e:	1f 93       	push	r17
    1750:	cf 93       	push	r28
    1752:	df 93       	push	r29
    1754:	5b 01       	movw	r10, r22
  CONSTP2VAR(OsEE_CCB, AUTOMATIC, OS_APPL_DATA) p_ccb = p_cdb->p_ccb;
    1756:	db 01       	movw	r26, r22
    1758:	cd 91       	ld	r28, X+
    175a:	dc 91       	ld	r29, X
  /* Touch unused parameters */
  (void)p_kdb;
  osEE_lock_core(p_cdb);
  {
    CONSTP2VAR(OsEE_TDB, AUTOMATIC, OS_APPL_DATA)
      p_tdb_term  = p_ccb->p_curr;
    175c:	fe 01       	movw	r30, r28
    175e:	01 91       	ld	r16, Z+
    1760:	11 91       	ld	r17, Z+
    1762:	7f 01       	movw	r14, r30
    CONSTP2VAR(OsEE_TCB, AUTOMATIC, OS_APPL_DATA)
      p_tcb_term  = p_tdb_term->p_tcb;
    1764:	d8 01       	movw	r26, r16
    1766:	14 96       	adiw	r26, 0x04	; 4
    1768:	cd 90       	ld	r12, X+
    176a:	dc 90       	ld	r13, X
    176c:	15 97       	sbiw	r26, 0x05	; 5

    /* Prepare the TDB from return value */
    (*pp_tdb_from) = p_tdb_term;
    176e:	fa 01       	movw	r30, r20
    1770:	11 83       	std	Z+1, r17	; 0x01
    1772:	00 83       	st	Z, r16

    if (p_tcb_term->status == OSEE_TASK_RUNNING) {
    1774:	d6 01       	movw	r26, r12
    1776:	12 96       	adiw	r26, 0x02	; 2
    1778:	8d 91       	ld	r24, X+
    177a:	9c 91       	ld	r25, X
    177c:	13 97       	sbiw	r26, 0x03	; 3
    177e:	04 97       	sbiw	r24, 0x04	; 4
    1780:	59 f5       	brne	.+86     	; 0x17d8 <osEE_scheduler_task_terminated+0x98>
      /* Normal Termination */
      CONSTP2VAR(OsEE_SN, AUTOMATIC, OS_APPL_DATA)
        p_sn_term = osEE_scheduler_core_pop_running(p_cdb, &p_ccb->rq);
    1782:	b7 01       	movw	r22, r14
    1784:	c5 01       	movw	r24, r10
    1786:	0e 94 1f 0d 	call	0x1a3e	; 0x1a3e <osEE_scheduler_core_pop_running>
    178a:	ac 01       	movw	r20, r24

      p_tdb_to = p_ccb->p_curr;
    178c:	88 81       	ld	r24, Y
    178e:	99 81       	ldd	r25, Y+1	; 0x01

      /* Handle if there was another activation of the same TASK already
       * as Head of RQ */
      if (p_tdb_term != p_tdb_to) {
    1790:	08 17       	cp	r16, r24
    1792:	19 07       	cpc	r17, r25
    1794:	a9 f0       	breq	.+42     	; 0x17c0 <osEE_scheduler_task_terminated+0x80>
  osEE_task_end
(
  CONSTP2VAR(OsEE_TDB, AUTOMATIC, OS_APPL_DATA) p_tdb
)
{
  CONSTP2VAR(OsEE_TCB, AUTOMATIC, OS_APPL_DATA) p_tcb = p_tdb->p_tcb;
    1796:	d8 01       	movw	r26, r16
    1798:	14 96       	adiw	r26, 0x04	; 4
    179a:	ed 91       	ld	r30, X+
    179c:	fc 91       	ld	r31, X
    179e:	15 97       	sbiw	r26, 0x05	; 5

  p_tcb->current_prio = p_tdb->ready_prio;
    17a0:	1b 96       	adiw	r26, 0x0b	; 11
    17a2:	2c 91       	ld	r18, X
    17a4:	21 83       	std	Z+1, r18	; 0x01

  --p_tcb->current_num_of_act;
    17a6:	20 81       	ld	r18, Z
    17a8:	21 50       	subi	r18, 0x01	; 1
    17aa:	20 83       	st	Z, r18

  if (p_tcb->current_num_of_act == 0U) {
    17ac:	21 11       	cpse	r18, r1
    17ae:	03 c0       	rjmp	.+6      	; 0x17b6 <osEE_scheduler_task_terminated+0x76>
    p_tcb->status = OSEE_TASK_SUSPENDED;
    17b0:	13 82       	std	Z+3, r1	; 0x03
    17b2:	12 82       	std	Z+2, r1	; 0x02
    17b4:	09 c0       	rjmp	.+18     	; 0x17c8 <osEE_scheduler_task_terminated+0x88>
  } else {
    p_tcb->status = OSEE_TASK_READY;
    17b6:	21 e0       	ldi	r18, 0x01	; 1
    17b8:	30 e0       	ldi	r19, 0x00	; 0
    17ba:	33 83       	std	Z+3, r19	; 0x03
    17bc:	22 83       	std	Z+2, r18	; 0x02
    17be:	04 c0       	rjmp	.+8      	; 0x17c8 <osEE_scheduler_task_terminated+0x88>
#if (defined(OSEE_HAS_PRETASKHOOK))
        /* If TDB_TERM is equal to TDB_TO, the following assure that
         * PreTaskHook will be called */
        p_ccb->p_last_tdb_hook = NULL;
#endif /* OSEE_HAS_PRETASKHOOK */
        --p_tcb_term->current_num_of_act;
    17c0:	f6 01       	movw	r30, r12
    17c2:	20 81       	ld	r18, Z
    17c4:	21 50       	subi	r18, 0x01	; 1
    17c6:	20 83       	st	Z, r18
(
  P2VAR(OsEE_SN *, AUTOMATIC, OS_APPL_DATA) pp_first,
  P2VAR(OsEE_SN  , AUTOMATIC, OS_APPL_DATA) p_to_free
)
{
  p_to_free->p_next = (*pp_first);
    17c8:	2c 81       	ldd	r18, Y+4	; 0x04
    17ca:	3d 81       	ldd	r19, Y+5	; 0x05
    17cc:	da 01       	movw	r26, r20
    17ce:	2d 93       	st	X+, r18
    17d0:	3c 93       	st	X, r19
  (*pp_first)       = p_to_free;
    17d2:	5d 83       	std	Y+5, r21	; 0x05
    17d4:	4c 83       	std	Y+4, r20	; 0x04
    17d6:	23 c0       	rjmp	.+70     	; 0x181e <osEE_scheduler_task_terminated+0xde>
      /* In Normal Termination => SN released */
      osEE_sn_release(&p_ccb->p_free_sn, p_sn_term);
    } else {
      /* Handle ChainTask */
      CONSTP2VAR(OsEE_SN, AUTOMATIC, OS_APPL_DATA)
        p_sn_term = p_ccb->p_stk_sn;
    17d8:	6e 81       	ldd	r22, Y+6	; 0x06
    17da:	7f 81       	ldd	r23, Y+7	; 0x07

      /* Pop the current STK SN, if not IDLE TASK. This function MUST not be
       * called inside IDLE TASK. */
      p_ccb->p_stk_sn = p_sn_term->p_next;
    17dc:	fb 01       	movw	r30, r22
    17de:	80 81       	ld	r24, Z
    17e0:	91 81       	ldd	r25, Z+1	; 0x01
    17e2:	9f 83       	std	Y+7, r25	; 0x07
    17e4:	8e 83       	std	Y+6, r24	; 0x06
      /* Wait to see p_ccb->p_curr until you are completely sure to what set */

      /* I need to release internal resource for Chained TASK
       * (set ready prio instead of dispatch prio) to let RQ Tasks 'preempt'
       * the Chained. */
      p_tcb_term->current_prio = p_tdb_term->ready_prio;
    17e6:	d8 01       	movw	r26, r16
    17e8:	1b 96       	adiw	r26, 0x0b	; 11
    17ea:	8c 91       	ld	r24, X
    17ec:	f6 01       	movw	r30, r12
    17ee:	81 83       	std	Z+1, r24	; 0x01
      p_tcb_term->status = OSEE_TASK_READY;
    17f0:	81 e0       	ldi	r24, 0x01	; 1
    17f2:	90 e0       	ldi	r25, 0x00	; 0
    17f4:	93 83       	std	Z+3, r25	; 0x03
    17f6:	82 83       	std	Z+2, r24	; 0x02
      if (p_tcb_term->current_num_of_act == 1U) {
        osEE_event_reset_mask(p_tcb_term);
      }
#endif /* OSEE_HAS_EVENTS */

      (void)osEE_scheduler_rq_insert(&p_ccb->rq, p_sn_term, p_tdb_term);
    17f8:	a8 01       	movw	r20, r16
    17fa:	c7 01       	movw	r24, r14
    17fc:	0e 94 18 0d 	call	0x1a30	; 0x1a30 <osEE_scheduler_rq_insert>

      {
        CONSTP2VAR(OsEE_preempt, AUTOMATIC, OS_APPL_DATA)
          p_prev = osEE_scheduler_core_rq_preempt_stk(p_cdb, &p_ccb->rq);
    1800:	b7 01       	movw	r22, r14
    1802:	c5 01       	movw	r24, r10
    1804:	0e 94 6c 0c 	call	0x18d8	; 0x18d8 <osEE_scheduler_core_rq_preempt_stk>

        if (p_prev == NULL) {
    1808:	89 2b       	or	r24, r25
    180a:	39 f4       	brne	.+14     	; 0x181a <osEE_scheduler_task_terminated+0xda>
          /* Restore Stacked.
           * Not Needed to Check Idle TASK since just reinserted the chained
           * in RQ */
          p_tdb_to                = p_ccb->p_stk_sn->p_tdb;
    180c:	ee 81       	ldd	r30, Y+6	; 0x06
    180e:	ff 81       	ldd	r31, Y+7	; 0x07
    1810:	82 81       	ldd	r24, Z+2	; 0x02
    1812:	93 81       	ldd	r25, Z+3	; 0x03
          p_ccb->p_curr           = p_tdb_to;
    1814:	99 83       	std	Y+1, r25	; 0x01
    1816:	88 83       	st	Y, r24
    1818:	02 c0       	rjmp	.+4      	; 0x181e <osEE_scheduler_task_terminated+0xde>
        } else {
          p_tdb_to = p_ccb->p_curr;
    181a:	88 81       	ld	r24, Y
    181c:	99 81       	ldd	r25, Y+1	; 0x01
    }
  }
  osEE_unlock_core(p_cdb);

  return p_tdb_to;
}
    181e:	df 91       	pop	r29
    1820:	cf 91       	pop	r28
    1822:	1f 91       	pop	r17
    1824:	0f 91       	pop	r16
    1826:	ff 90       	pop	r15
    1828:	ef 90       	pop	r14
    182a:	df 90       	pop	r13
    182c:	cf 90       	pop	r12
    182e:	bf 90       	pop	r11
    1830:	af 90       	pop	r10
    1832:	08 95       	ret

00001834 <__vector_default>:
#include "ee_avr8_irqstub.h"

/* Erika Interrupt Vector Definition */

/* DUMMY interrupt vector */
OSEE_AVR8_ISR_NOT_DEFINED(BADISR_vect)
    1834:	f8 94       	cli
    1836:	ff cf       	rjmp	.-2      	; 0x1836 <__vector_default+0x2>

00001838 <osEE_atmega_intvect>:

/* Interrupt Vector Table Recall. */
void osEE_atmega_intvect(void) {
  OSEE_AVR8_REQUEST_IRQ_ENTRY(BADISR_vect);
    1838:	e4 e3       	ldi	r30, 0x34	; 52
    183a:	08 95       	ret

0000183c <osEE_change_context_from_running>:
  osEE_change_context_from_running
(
  P2VAR(OsEE_TDB, AUTOMATIC, OS_APPL_CONST) p_from,
  P2VAR(OsEE_TDB, AUTOMATIC, OS_APPL_CONST) p_to
)
{
    183c:	fb 01       	movw	r30, r22
  CONSTP2VAR(OsEE_TCB, AUTOMATIC, OS_APPL_DATA) p_to_tcb  = p_to->p_tcb;
    183e:	a4 81       	ldd	r26, Z+4	; 0x04
    1840:	b5 81       	ldd	r27, Z+5	; 0x05
  CONST(TaskStateType, AUTOMATIC)     status_prev_running = p_to_tcb->status;
    1842:	12 96       	adiw	r26, 0x02	; 2
    1844:	2d 91       	ld	r18, X+
    1846:	3c 91       	ld	r19, X
    1848:	13 97       	sbiw	r26, 0x03	; 3

  p_to_tcb->status = OSEE_TASK_RUNNING;
    184a:	44 e0       	ldi	r20, 0x04	; 4
    184c:	50 e0       	ldi	r21, 0x00	; 0
    184e:	13 96       	adiw	r26, 0x03	; 3
    1850:	5c 93       	st	X, r21
    1852:	4e 93       	st	-X, r20
    1854:	12 97       	sbiw	r26, 0x02	; 2
    1856:	dc 01       	movw	r26, r24
    1858:	12 96       	adiw	r26, 0x02	; 2
    185a:	4d 91       	ld	r20, X+
    185c:	5c 91       	ld	r21, X
    185e:	13 97       	sbiw	r26, 0x03	; 3
    1860:	62 81       	ldd	r22, Z+2	; 0x02
    1862:	73 81       	ldd	r23, Z+3	; 0x03

  if (status_prev_running == OSEE_TASK_READY_STACKED) {
    osEE_hal_save_ctx_and_restore_ctx(p_to, p_to->hdb.p_scb,
    1864:	cf 01       	movw	r24, r30
  CONSTP2VAR(OsEE_TCB, AUTOMATIC, OS_APPL_DATA) p_to_tcb  = p_to->p_tcb;
  CONST(TaskStateType, AUTOMATIC)     status_prev_running = p_to_tcb->status;

  p_to_tcb->status = OSEE_TASK_RUNNING;

  if (status_prev_running == OSEE_TASK_READY_STACKED) {
    1866:	22 30       	cpi	r18, 0x02	; 2
    1868:	31 05       	cpc	r19, r1
    186a:	11 f4       	brne	.+4      	; 0x1870 <osEE_change_context_from_running+0x34>
    osEE_hal_save_ctx_and_restore_ctx(p_to, p_to->hdb.p_scb,
    186c:	0c 94 ac 00 	jmp	0x158	; 0x158 <osEE_hal_save_ctx_and_restore_ctx>
      p_from->hdb.p_scb);
  } else {
    osEE_hal_save_ctx_and_ready2stacked(p_to, p_to->hdb.p_scb,
    1870:	0c 94 f4 00 	jmp	0x1e8	; 0x1e8 <osEE_hal_save_ctx_and_ready2stacked>

00001874 <osEE_change_context_from_task_end>:
  osEE_change_context_from_task_end
(
  P2VAR(OsEE_TDB, AUTOMATIC, OS_APPL_CONST) p_from,
  P2VAR(OsEE_TDB, AUTOMATIC, OS_APPL_CONST) p_to
)
{
    1874:	cb 01       	movw	r24, r22
  CONSTP2VAR(OsEE_TCB, AUTOMATIC, OS_APPL_DATA) p_to_tcb  = p_to->p_tcb;
    1876:	db 01       	movw	r26, r22
    1878:	14 96       	adiw	r26, 0x04	; 4
    187a:	ed 91       	ld	r30, X+
    187c:	fc 91       	ld	r31, X
    187e:	15 97       	sbiw	r26, 0x05	; 5
  CONST(TaskStateType, AUTOMATIC)     status_prev_running = p_to_tcb->status;
    1880:	22 81       	ldd	r18, Z+2	; 0x02
    1882:	33 81       	ldd	r19, Z+3	; 0x03

  p_to_tcb->status = OSEE_TASK_RUNNING;
    1884:	44 e0       	ldi	r20, 0x04	; 4
    1886:	50 e0       	ldi	r21, 0x00	; 0
    1888:	53 83       	std	Z+3, r21	; 0x03
    188a:	42 83       	std	Z+2, r20	; 0x02
    188c:	12 96       	adiw	r26, 0x02	; 2
    188e:	6d 91       	ld	r22, X+
    1890:	7c 91       	ld	r23, X
    1892:	13 97       	sbiw	r26, 0x03	; 3

  if (status_prev_running == OSEE_TASK_READY_STACKED) {
    1894:	22 30       	cpi	r18, 0x02	; 2
    1896:	31 05       	cpc	r19, r1
    1898:	11 f4       	brne	.+4      	; 0x189e <osEE_change_context_from_task_end+0x2a>
    osEE_hal_restore_ctx(p_to, p_to->hdb.p_scb);
    189a:	0c 94 cc 00 	jmp	0x198	; 0x198 <osEE_hal_restore_ctx>
  } else {
    osEE_hal_ready2stacked(p_to, p_to->hdb.p_scb);
    189e:	0c 94 ec 00 	jmp	0x1d8	; 0x1d8 <osEE_hal_ready2stacked>

000018a2 <osEE_idle_task_terminate>:
{
  P2VAR(OsEE_CTX, AUTOMATIC, OS_APPL_DATA)      p_ctx;

  CONSTP2VAR(OsEE_HDB, AUTOMATIC, OS_APPL_DATA) p_idle_hdb  = &p_idle_tdb->hdb;
  CONSTP2VAR(OsEE_SDB, AUTOMATIC, OS_APPL_DATA) p_sdb       = p_idle_hdb->p_sdb;
  CONSTP2VAR(OsEE_SCB, AUTOMATIC, OS_APPL_DATA) p_scb       = p_idle_hdb->p_scb;
    18a2:	dc 01       	movw	r26, r24
    18a4:	12 96       	adiw	r26, 0x02	; 2
    18a6:	6d 91       	ld	r22, X+
    18a8:	7c 91       	ld	r23, X
    18aa:	13 97       	sbiw	r26, 0x03	; 3
  CONSTP2VAR(OsEE_CTX, AUTOMATIC, OS_APPL_DATA) p_bos       = p_sdb->p_bos;
    18ac:	ed 91       	ld	r30, X+
    18ae:	fc 91       	ld	r31, X
    18b0:	40 81       	ld	r20, Z
    18b2:	51 81       	ldd	r21, Z+1	; 0x01
  P2VAR(OsEE_CTX, AUTOMATIC, OS_APPL_DATA)      p_tos       = p_scb->p_tos;
    18b4:	db 01       	movw	r26, r22
    18b6:	ed 91       	ld	r30, X+
    18b8:	fc 91       	ld	r31, X

  do {
    p_ctx = p_tos;
    p_tos = p_tos->p_ctx;
    18ba:	22 89       	ldd	r18, Z+18	; 0x12
    18bc:	33 89       	ldd	r19, Z+19	; 0x13
  } while ((p_tos != NULL) && (p_tos != p_bos));
    18be:	21 15       	cp	r18, r1
    18c0:	31 05       	cpc	r19, r1
    18c2:	29 f4       	brne	.+10     	; 0x18ce <osEE_idle_task_terminate+0x2c>

  /* Unwind the stack until the last context*/
  p_scb->p_tos = p_ctx;
    18c4:	db 01       	movw	r26, r22
    18c6:	ed 93       	st	X+, r30
    18c8:	fc 93       	st	X, r31

  osEE_hal_restore_ctx(p_idle_tdb, p_scb);
    18ca:	0c 94 cc 00 	jmp	0x198	; 0x198 <osEE_hal_restore_ctx>
  P2VAR(OsEE_CTX, AUTOMATIC, OS_APPL_DATA)      p_tos       = p_scb->p_tos;

  do {
    p_ctx = p_tos;
    p_tos = p_tos->p_ctx;
  } while ((p_tos != NULL) && (p_tos != p_bos));
    18ce:	24 17       	cp	r18, r20
    18d0:	35 07       	cpc	r19, r21
    18d2:	c1 f3       	breq	.-16     	; 0x18c4 <osEE_idle_task_terminate+0x22>
    18d4:	f9 01       	movw	r30, r18
    18d6:	f1 cf       	rjmp	.-30     	; 0x18ba <osEE_idle_task_terminate+0x18>

000018d8 <osEE_scheduler_core_rq_preempt_stk>:
  osEE_scheduler_core_rq_preempt_stk
(
  P2VAR(OsEE_CDB, AUTOMATIC, OS_APPL_DATA)  p_cdb,
  P2VAR(OsEE_RQ,  AUTOMATIC, OS_APPL_DATA)  p_rq
)
{
    18d8:	0f 93       	push	r16
    18da:	1f 93       	push	r17
    18dc:	cf 93       	push	r28
    18de:	df 93       	push	r29
  CONSTP2VAR(OsEE_CCB, AUTOMATIC, OS_APPL_DATA) p_ccb = p_cdb->p_ccb;
    18e0:	ec 01       	movw	r28, r24
    18e2:	a8 81       	ld	r26, Y
    18e4:	b9 81       	ldd	r27, Y+1	; 0x01
  CONSTP2VAR(OsEE_SN, AUTOMATIC, OS_APPL_DATA)  p_rq_sn  = (*p_rq);
    18e6:	eb 01       	movw	r28, r22
    18e8:	e8 81       	ld	r30, Y
    18ea:	f9 81       	ldd	r31, Y+1	; 0x01
  P2VAR(OsEE_SN, AUTOMATIC, OS_APPL_DATA)       p_ret_sn = p_ccb->p_stk_sn;
    18ec:	16 96       	adiw	r26, 0x06	; 6
    18ee:	cd 91       	ld	r28, X+
    18f0:	dc 91       	ld	r29, X
    18f2:	17 97       	sbiw	r26, 0x07	; 7

  VAR(OsEE_bool, AUTOMATIC)                     is_rq_preemption = OSEE_FALSE;
  P2VAR(OsEE_TDB, AUTOMATIC, OS_APPL_DATA)      p_ret_tdb;

  if (p_ret_sn != NULL) {
    18f4:	20 97       	sbiw	r28, 0x00	; 0
    18f6:	b1 f0       	breq	.+44     	; 0x1924 <osEE_scheduler_core_rq_preempt_stk+0x4c>
    p_ret_tdb = p_ret_sn->p_tdb;
    18f8:	8a 81       	ldd	r24, Y+2	; 0x02
    18fa:	9b 81       	ldd	r25, Y+3	; 0x03
    if (p_rq_sn != NULL) {
    18fc:	30 97       	sbiw	r30, 0x00	; 0
    18fe:	e1 f1       	breq	.+120    	; 0x1978 <osEE_scheduler_core_rq_preempt_stk+0xa0>
      CONSTP2VAR(OsEE_TCB, AUTOMATIC, OS_APPL_DATA)
        p_ret_tcb = p_ret_tdb->p_tcb;
    1900:	ec 01       	movw	r28, r24
    1902:	0c 81       	ldd	r16, Y+4	; 0x04
    1904:	1d 81       	ldd	r17, Y+5	; 0x05
      if (p_ret_tcb->current_prio <
        p_rq_sn->p_tdb->p_tcb->current_prio)
    1906:	22 81       	ldd	r18, Z+2	; 0x02
    1908:	33 81       	ldd	r19, Z+3	; 0x03
    190a:	e9 01       	movw	r28, r18
    190c:	4c 81       	ldd	r20, Y+4	; 0x04
    190e:	5d 81       	ldd	r21, Y+5	; 0x05
  if (p_ret_sn != NULL) {
    p_ret_tdb = p_ret_sn->p_tdb;
    if (p_rq_sn != NULL) {
      CONSTP2VAR(OsEE_TCB, AUTOMATIC, OS_APPL_DATA)
        p_ret_tcb = p_ret_tdb->p_tcb;
      if (p_ret_tcb->current_prio <
    1910:	e8 01       	movw	r28, r16
    1912:	39 81       	ldd	r19, Y+1	; 0x01
    1914:	ea 01       	movw	r28, r20
    1916:	29 81       	ldd	r18, Y+1	; 0x01
    1918:	32 17       	cp	r19, r18
    191a:	70 f5       	brcc	.+92     	; 0x1978 <osEE_scheduler_core_rq_preempt_stk+0xa0>
      {
        /* RQ preempt STK */
        /* Call PostTaskHook before switching active TASK */
        osEE_call_post_task_hook(p_ccb);

        p_ret_tcb->status = OSEE_TASK_READY_STACKED;
    191c:	22 e0       	ldi	r18, 0x02	; 2
    191e:	30 e0       	ldi	r19, 0x00	; 0
    1920:	e8 01       	movw	r28, r16
    1922:	0b c0       	rjmp	.+22     	; 0x193a <osEE_scheduler_core_rq_preempt_stk+0x62>
        is_rq_preemption  = OSEE_TRUE;
      }
    }
  } else if (p_rq_sn != NULL) {
    1924:	30 97       	sbiw	r30, 0x00	; 0
    1926:	41 f1       	breq	.+80     	; 0x1978 <osEE_scheduler_core_rq_preempt_stk+0xa0>
    /* Don't use p_ccb->p_curr, is not reliable here,
     * It points to the terminated TASK, we are still evaluating
     * the next one. */
    /* Call PostTaskHook before switching active TASK */
    osEE_call_post_task_hook(p_ccb);
    p_ret_tdb                 = p_cdb->p_idle_task;
    1928:	ec 01       	movw	r28, r24
    192a:	8c 81       	ldd	r24, Y+4	; 0x04
    192c:	9d 81       	ldd	r25, Y+5	; 0x05
    p_ret_tdb->p_tcb->status  = OSEE_TASK_READY_STACKED;
    192e:	ec 01       	movw	r28, r24
    1930:	4c 81       	ldd	r20, Y+4	; 0x04
    1932:	5d 81       	ldd	r21, Y+5	; 0x05
    1934:	22 e0       	ldi	r18, 0x02	; 2
    1936:	30 e0       	ldi	r19, 0x00	; 0
    1938:	ea 01       	movw	r28, r20
    193a:	3b 83       	std	Y+3, r19	; 0x03
    193c:	2a 83       	std	Y+2, r18	; 0x02
    is_rq_preemption          = OSEE_TRUE;
  }

  if (is_rq_preemption) {
    /* Extract from ready queue */
    (*p_rq)       = p_rq_sn->p_next;
    193e:	20 81       	ld	r18, Z
    1940:	31 81       	ldd	r19, Z+1	; 0x01
    1942:	eb 01       	movw	r28, r22
    1944:	39 83       	std	Y+1, r19	; 0x01
    1946:	28 83       	st	Y, r18
(
  P2VAR(OsEE_CCB, AUTOMATIC, OS_APPL_DATA) p_ccb,
  P2VAR(OsEE_SN, AUTOMATIC, OS_APPL_DATA)  p_rq_sn
)
{
  CONSTP2VAR(OsEE_TDB, AUTOMATIC, OS_APPL_DATA) p_tdb = p_rq_sn->p_tdb;
    1948:	c2 81       	ldd	r28, Z+2	; 0x02
    194a:	d3 81       	ldd	r29, Z+3	; 0x03
  CONSTP2VAR(OsEE_TCB, AUTOMATIC, OS_APPL_DATA) p_tcb = p_tdb->p_tcb;
    194c:	4c 81       	ldd	r20, Y+4	; 0x04
    194e:	5d 81       	ldd	r21, Y+5	; 0x05
  /* N.B. The Handling of the preempted SN as Stacked or re-inserted in RQ
   * is done by the calling function */
  p_rq_sn->p_next               = NULL;
  p_tcb->current_core_id        = osEE_get_curr_core_id();
#else
  p_rq_sn->p_next               = p_ccb->p_stk_sn;
    1950:	16 96       	adiw	r26, 0x06	; 6
    1952:	2d 91       	ld	r18, X+
    1954:	3c 91       	ld	r19, X
    1956:	17 97       	sbiw	r26, 0x07	; 7
    1958:	31 83       	std	Z+1, r19	; 0x01
    195a:	20 83       	st	Z, r18
#endif /* OSEE_ALLOW_TASK_MIGRATION */
  p_ccb->p_stk_sn               = p_rq_sn;
    195c:	17 96       	adiw	r26, 0x07	; 7
    195e:	fc 93       	st	X, r31
    1960:	ee 93       	st	-X, r30
    1962:	16 97       	sbiw	r26, 0x06	; 6
  p_ccb->p_curr                 = p_tdb;
    1964:	cd 93       	st	X+, r28
    1966:	dc 93       	st	X, r29

  /* Adjust actual priority with dispatch priority: if needed */
  {
    CONST(TaskPrio, AUTOMATIC)
      dispatch_prio = p_tdb->dispatch_prio;
    1968:	2c 85       	ldd	r18, Y+12	; 0x0c
    if (p_tcb->current_prio < dispatch_prio) {
    196a:	fa 01       	movw	r30, r20
    196c:	31 81       	ldd	r19, Z+1	; 0x01
    196e:	32 17       	cp	r19, r18
    1970:	28 f4       	brcc	.+10     	; 0x197c <osEE_scheduler_core_rq_preempt_stk+0xa4>
      p_tcb->current_prio = dispatch_prio;
    1972:	fa 01       	movw	r30, r20
    1974:	21 83       	std	Z+1, r18	; 0x01
    1976:	02 c0       	rjmp	.+4      	; 0x197c <osEE_scheduler_core_rq_preempt_stk+0xa4>
    (*p_rq)       = p_rq_sn->p_next;

    /* Set as current on top of STK */
    osEE_scheduler_stk_next(p_ccb, p_rq_sn);
  } else {
    p_ret_tdb = NULL;
    1978:	80 e0       	ldi	r24, 0x00	; 0
    197a:	90 e0       	ldi	r25, 0x00	; 0
#if (defined(OSEE_ALLOW_TASK_MIGRATION))
  return p_ret_sn;
#else
  return p_ret_tdb;
#endif /* OSEE_ALLOW_TASK_MIGRATION */
}
    197c:	df 91       	pop	r29
    197e:	cf 91       	pop	r28
    1980:	1f 91       	pop	r17
    1982:	0f 91       	pop	r16
    1984:	08 95       	ret

00001986 <osEE_sn_priority_insert>:
(
  P2VAR(OsEE_SN *, AUTOMATIC, OS_APPL_DATA)     pp_first,
  P2VAR(OsEE_SN  , AUTOMATIC, OS_APPL_DATA)     p_sn_new,
  CONST(OsEE_bool, AUTOMATIC)                   hnd_act
)
{
    1986:	cf 92       	push	r12
    1988:	df 92       	push	r13
    198a:	ef 92       	push	r14
    198c:	ff 92       	push	r15
    198e:	0f 93       	push	r16
    1990:	1f 93       	push	r17
    1992:	cf 93       	push	r28
    1994:	df 93       	push	r29
  CONSTP2VAR(OsEE_TDB, AUTOMATIC, OS_APPL_DATA) p_tdb_new = p_sn_new->p_tdb;
    1996:	eb 01       	movw	r28, r22
    1998:	aa 81       	ldd	r26, Y+2	; 0x02
    199a:	bb 81       	ldd	r27, Y+3	; 0x03
  CONSTP2VAR(OsEE_TCB, AUTOMATIC, OS_APPL_DATA) p_tcb_new = p_tdb_new->p_tcb;
    199c:	14 96       	adiw	r26, 0x04	; 4
    199e:	ed 91       	ld	r30, X+
    19a0:	fc 91       	ld	r31, X
    19a2:	15 97       	sbiw	r26, 0x05	; 5
  CONST(TaskPrio, AUTOMATIC)                new_task_prio =
    19a4:	41 15       	cp	r20, r1
    19a6:	51 05       	cpc	r21, r1
    19a8:	41 f0       	breq	.+16     	; 0x19ba <osEE_sn_priority_insert+0x34>
    ((hnd_act) && osEE_is_active_task(p_tcb_new))?
    19aa:	22 81       	ldd	r18, Z+2	; 0x02
    19ac:	33 81       	ldd	r19, Z+3	; 0x03
    19ae:	22 30       	cpi	r18, 0x02	; 2
    19b0:	31 05       	cpc	r19, r1
    19b2:	18 f0       	brcs	.+6      	; 0x19ba <osEE_sn_priority_insert+0x34>
  CONST(OsEE_bool, AUTOMATIC)                   hnd_act
)
{
  CONSTP2VAR(OsEE_TDB, AUTOMATIC, OS_APPL_DATA) p_tdb_new = p_sn_new->p_tdb;
  CONSTP2VAR(OsEE_TCB, AUTOMATIC, OS_APPL_DATA) p_tcb_new = p_tdb_new->p_tcb;
  CONST(TaskPrio, AUTOMATIC)                new_task_prio =
    19b4:	1b 96       	adiw	r26, 0x0b	; 11
    19b6:	2c 91       	ld	r18, X
    19b8:	01 c0       	rjmp	.+2      	; 0x19bc <osEE_sn_priority_insert+0x36>
    19ba:	21 81       	ldd	r18, Z+1	; 0x01
    ((hnd_act) && osEE_is_active_task(p_tcb_new))?
      p_tdb_new->ready_prio:
      p_tcb_new->current_prio;
  P2VAR(OsEE_SN, AUTOMATIC, OS_APPL_DATA) p_prev          = NULL;
  P2VAR(OsEE_SN, AUTOMATIC, OS_APPL_DATA) p_curr          = (*pp_first);
    19bc:	dc 01       	movw	r26, r24
    19be:	ed 91       	ld	r30, X+
    19c0:	fc 91       	ld	r31, X
  CONSTP2VAR(OsEE_TCB, AUTOMATIC, OS_APPL_DATA) p_tcb_new = p_tdb_new->p_tcb;
  CONST(TaskPrio, AUTOMATIC)                new_task_prio =
    ((hnd_act) && osEE_is_active_task(p_tcb_new))?
      p_tdb_new->ready_prio:
      p_tcb_new->current_prio;
  P2VAR(OsEE_SN, AUTOMATIC, OS_APPL_DATA) p_prev          = NULL;
    19c2:	a0 e0       	ldi	r26, 0x00	; 0
    19c4:	b0 e0       	ldi	r27, 0x00	; 0
  P2VAR(OsEE_SN, AUTOMATIC, OS_APPL_DATA) p_curr          = (*pp_first);
  VAR(OsEE_bool, AUTOMATIC)               head_changed    = OSEE_FALSE;

  /* Traverse the queue until needed */
  while (p_curr != NULL) {
    19c6:	30 97       	sbiw	r30, 0x00	; 0
    19c8:	d9 f0       	breq	.+54     	; 0x1a00 <osEE_sn_priority_insert+0x7a>
    VAR(TaskPrio, AUTOMATIC)                      prio_to_check;
    CONSTP2VAR(OsEE_TDB, AUTOMATIC, OS_APPL_DATA) p_cur_tdb = p_curr->p_tdb;
    19ca:	02 81       	ldd	r16, Z+2	; 0x02
    19cc:	13 81       	ldd	r17, Z+3	; 0x03
    CONSTP2VAR(OsEE_TCB, AUTOMATIC, OS_APPL_DATA) p_cur_tcb = p_cur_tdb->p_tcb;
    19ce:	e8 01       	movw	r28, r16
    19d0:	cc 80       	ldd	r12, Y+4	; 0x04
    19d2:	dd 80       	ldd	r13, Y+5	; 0x05

    if (hnd_act && osEE_is_active_task(p_cur_tcb)) {
    19d4:	41 15       	cp	r20, r1
    19d6:	51 05       	cpc	r21, r1
    19d8:	51 f0       	breq	.+20     	; 0x19ee <osEE_sn_priority_insert+0x68>
    19da:	e6 01       	movw	r28, r12
    19dc:	ea 80       	ldd	r14, Y+2	; 0x02
    19de:	fb 80       	ldd	r15, Y+3	; 0x03
    19e0:	d2 e0       	ldi	r29, 0x02	; 2
    19e2:	ed 16       	cp	r14, r29
    19e4:	f1 04       	cpc	r15, r1
    19e6:	18 f0       	brcs	.+6      	; 0x19ee <osEE_sn_priority_insert+0x68>
      prio_to_check = p_cur_tdb->ready_prio;
    19e8:	e8 01       	movw	r28, r16
    19ea:	3b 85       	ldd	r19, Y+11	; 0x0b
    19ec:	02 c0       	rjmp	.+4      	; 0x19f2 <osEE_sn_priority_insert+0x6c>
    } else {
      prio_to_check = p_cur_tcb->current_prio;
    19ee:	e6 01       	movw	r28, r12
    19f0:	39 81       	ldd	r19, Y+1	; 0x01
    }

    if (new_task_prio <= prio_to_check)
    19f2:	32 17       	cp	r19, r18
    19f4:	28 f0       	brcs	.+10     	; 0x1a00 <osEE_sn_priority_insert+0x7a>
    {
      p_prev = p_curr;
      p_curr = p_curr->p_next;
    19f6:	df 01       	movw	r26, r30
    19f8:	01 90       	ld	r0, Z+
    19fa:	f0 81       	ld	r31, Z
    19fc:	e0 2d       	mov	r30, r0
    19fe:	e3 cf       	rjmp	.-58     	; 0x19c6 <osEE_sn_priority_insert+0x40>
    } else {
      break;
    }
  }

  if (p_prev != NULL) {
    1a00:	10 97       	sbiw	r26, 0x00	; 0
    1a02:	29 f0       	breq	.+10     	; 0x1a0e <osEE_sn_priority_insert+0x88>
    p_prev->p_next = p_sn_new;
    1a04:	6d 93       	st	X+, r22
    1a06:	7c 93       	st	X, r23
    ((hnd_act) && osEE_is_active_task(p_tcb_new))?
      p_tdb_new->ready_prio:
      p_tcb_new->current_prio;
  P2VAR(OsEE_SN, AUTOMATIC, OS_APPL_DATA) p_prev          = NULL;
  P2VAR(OsEE_SN, AUTOMATIC, OS_APPL_DATA) p_curr          = (*pp_first);
  VAR(OsEE_bool, AUTOMATIC)               head_changed    = OSEE_FALSE;
    1a08:	80 e0       	ldi	r24, 0x00	; 0
    1a0a:	90 e0       	ldi	r25, 0x00	; 0
    1a0c:	05 c0       	rjmp	.+10     	; 0x1a18 <osEE_sn_priority_insert+0x92>
  }

  if (p_prev != NULL) {
    p_prev->p_next = p_sn_new;
  } else {
    (*pp_first)   = p_sn_new;
    1a0e:	dc 01       	movw	r26, r24
    1a10:	6d 93       	st	X+, r22
    1a12:	7c 93       	st	X, r23
    head_changed  = OSEE_TRUE;
    1a14:	81 e0       	ldi	r24, 0x01	; 1
    1a16:	90 e0       	ldi	r25, 0x00	; 0
  }

  p_sn_new->p_next = p_curr;
    1a18:	eb 01       	movw	r28, r22
    1a1a:	f9 83       	std	Y+1, r31	; 0x01
    1a1c:	e8 83       	st	Y, r30

  return head_changed;
}
    1a1e:	df 91       	pop	r29
    1a20:	cf 91       	pop	r28
    1a22:	1f 91       	pop	r17
    1a24:	0f 91       	pop	r16
    1a26:	ff 90       	pop	r15
    1a28:	ef 90       	pop	r14
    1a2a:	df 90       	pop	r13
    1a2c:	cf 90       	pop	r12
    1a2e:	08 95       	ret

00001a30 <osEE_scheduler_rq_insert>:
  P2VAR(OsEE_RQ, AUTOMATIC, OS_APPL_DATA)       p_rq,
  P2VAR(OsEE_SN, AUTOMATIC, OS_APPL_DATA)       p_sn_new,
  CONSTP2VAR(OsEE_TDB, AUTOMATIC, OS_APPL_DATA) p_tdb_new
)
{
  p_sn_new->p_tdb = p_tdb_new;
    1a30:	fb 01       	movw	r30, r22
    1a32:	53 83       	std	Z+3, r21	; 0x03
    1a34:	42 83       	std	Z+2, r20	; 0x02

#if (!defined(OSEE_SCHEDULER_GLOBAL))
  return osEE_sn_priority_insert(p_rq, p_sn_new, OSEE_TRUE);
    1a36:	41 e0       	ldi	r20, 0x01	; 1
    1a38:	50 e0       	ldi	r21, 0x00	; 0
    1a3a:	0c 94 c3 0c 	jmp	0x1986	; 0x1986 <osEE_sn_priority_insert>

00001a3e <osEE_scheduler_core_pop_running>:
  osEE_scheduler_core_pop_running
(
  P2VAR(OsEE_CDB, AUTOMATIC, OS_APPL_DATA)  p_cdb,
  P2VAR(OsEE_RQ,  AUTOMATIC, OS_APPL_DATA)  p_rq
)
{
    1a3e:	ef 92       	push	r14
    1a40:	ff 92       	push	r15
    1a42:	0f 93       	push	r16
    1a44:	1f 93       	push	r17
    1a46:	cf 93       	push	r28
    1a48:	df 93       	push	r29
    1a4a:	8c 01       	movw	r16, r24
  CONSTP2VAR(OsEE_CCB, AUTOMATIC, OS_APPL_DATA) p_ccb         = p_cdb->p_ccb;
    1a4c:	fc 01       	movw	r30, r24
    1a4e:	c0 81       	ld	r28, Z
    1a50:	d1 81       	ldd	r29, Z+1	; 0x01
  CONSTP2VAR(OsEE_SN, AUTOMATIC, OS_APPL_DATA)  p_prev_stk_sn = p_ccb->p_stk_sn;
    1a52:	ee 80       	ldd	r14, Y+6	; 0x06
    1a54:	ff 80       	ldd	r15, Y+7	; 0x07
  CONSTP2VAR(OsEE_SN, AUTOMATIC, OS_APPL_DATA)
    p_next_stk_sn = p_prev_stk_sn->p_next;

  /* Pop the current STK SN, if not IDLE TASK. This function MUST not be
   * called inside IDLE TASK. */
  p_ccb->p_stk_sn = p_next_stk_sn;
    1a56:	f7 01       	movw	r30, r14
    1a58:	80 81       	ld	r24, Z
    1a5a:	91 81       	ldd	r25, Z+1	; 0x01
    1a5c:	9f 83       	std	Y+7, r25	; 0x07
    1a5e:	8e 83       	std	Y+6, r24	; 0x06
   * */

  {
    /* Handle if RQ preempt STK (It manipulate the core data structures) */
    CONSTP2VAR(OsEE_preempt, AUTOMATIC, OS_APPL_DATA)
      p_preempt = osEE_scheduler_core_rq_preempt_stk(p_cdb, p_rq);
    1a60:	c8 01       	movw	r24, r16
    1a62:	0e 94 6c 0c 	call	0x18d8	; 0x18d8 <osEE_scheduler_core_rq_preempt_stk>
    CONSTP2VAR(OsEE_SN, AUTOMATIC, OS_APPL_DATA)
      p_curr_stk_sn = p_ccb->p_stk_sn;
    1a66:	ee 81       	ldd	r30, Y+6	; 0x06
    1a68:	ff 81       	ldd	r31, Y+7	; 0x07

    /* If not, resume current STK first */
    if (p_preempt == NULL) {
    1a6a:	89 2b       	or	r24, r25
    1a6c:	51 f4       	brne	.+20     	; 0x1a82 <osEE_scheduler_core_pop_running+0x44>
      if (p_ccb->p_curr->task_type <= OSEE_TASK_TYPE_EXTENDED) {
        osEE_call_post_task_hook(p_ccb);
      }
#endif /* OSEE_HAS_POSTTASKHOOK */

      if ( p_curr_stk_sn != NULL ) {
    1a6e:	30 97       	sbiw	r30, 0x00	; 0
    1a70:	19 f0       	breq	.+6      	; 0x1a78 <osEE_scheduler_core_pop_running+0x3a>
        /* Resume STK TASK */
        p_tdb_stk = p_curr_stk_sn->p_tdb;
    1a72:	82 81       	ldd	r24, Z+2	; 0x02
    1a74:	93 81       	ldd	r25, Z+3	; 0x03
    1a76:	03 c0       	rjmp	.+6      	; 0x1a7e <osEE_scheduler_core_pop_running+0x40>
      } else {
        /* Resume IDLE TASK */
        p_tdb_stk = p_cdb->p_idle_task;
    1a78:	f8 01       	movw	r30, r16
    1a7a:	84 81       	ldd	r24, Z+4	; 0x04
    1a7c:	95 81       	ldd	r25, Z+5	; 0x05
      }

      p_ccb->p_curr            = p_tdb_stk;
    1a7e:	99 83       	std	Y+1, r25	; 0x01
    1a80:	88 83       	st	Y, r24
    }
#endif /* OSEE_ALLOW_TASK_MIGRATION */
  }

  return p_prev_stk_sn;
}
    1a82:	c7 01       	movw	r24, r14
    1a84:	df 91       	pop	r29
    1a86:	cf 91       	pop	r28
    1a88:	1f 91       	pop	r17
    1a8a:	0f 91       	pop	r16
    1a8c:	ff 90       	pop	r15
    1a8e:	ef 90       	pop	r14
    1a90:	08 95       	ret

00001a92 <__udivmodsi4>:
    1a92:	a1 e2       	ldi	r26, 0x21	; 33
    1a94:	1a 2e       	mov	r1, r26
    1a96:	aa 1b       	sub	r26, r26
    1a98:	bb 1b       	sub	r27, r27
    1a9a:	fd 01       	movw	r30, r26
    1a9c:	0d c0       	rjmp	.+26     	; 0x1ab8 <__udivmodsi4_ep>

00001a9e <__udivmodsi4_loop>:
    1a9e:	aa 1f       	adc	r26, r26
    1aa0:	bb 1f       	adc	r27, r27
    1aa2:	ee 1f       	adc	r30, r30
    1aa4:	ff 1f       	adc	r31, r31
    1aa6:	a2 17       	cp	r26, r18
    1aa8:	b3 07       	cpc	r27, r19
    1aaa:	e4 07       	cpc	r30, r20
    1aac:	f5 07       	cpc	r31, r21
    1aae:	20 f0       	brcs	.+8      	; 0x1ab8 <__udivmodsi4_ep>
    1ab0:	a2 1b       	sub	r26, r18
    1ab2:	b3 0b       	sbc	r27, r19
    1ab4:	e4 0b       	sbc	r30, r20
    1ab6:	f5 0b       	sbc	r31, r21

00001ab8 <__udivmodsi4_ep>:
    1ab8:	66 1f       	adc	r22, r22
    1aba:	77 1f       	adc	r23, r23
    1abc:	88 1f       	adc	r24, r24
    1abe:	99 1f       	adc	r25, r25
    1ac0:	1a 94       	dec	r1
    1ac2:	69 f7       	brne	.-38     	; 0x1a9e <__udivmodsi4_loop>
    1ac4:	60 95       	com	r22
    1ac6:	70 95       	com	r23
    1ac8:	80 95       	com	r24
    1aca:	90 95       	com	r25
    1acc:	9b 01       	movw	r18, r22
    1ace:	ac 01       	movw	r20, r24
    1ad0:	bd 01       	movw	r22, r26
    1ad2:	cf 01       	movw	r24, r30
    1ad4:	08 95       	ret

00001ad6 <__tablejump2__>:
    1ad6:	ee 0f       	add	r30, r30
    1ad8:	ff 1f       	adc	r31, r31
    1ada:	05 90       	lpm	r0, Z+
    1adc:	f4 91       	lpm	r31, Z
    1ade:	e0 2d       	mov	r30, r0
    1ae0:	09 94       	ijmp

00001ae2 <_exit>:
    1ae2:	f8 94       	cli

00001ae4 <__stop_program>:
    1ae4:	ff cf       	rjmp	.-2      	; 0x1ae4 <__stop_program>
