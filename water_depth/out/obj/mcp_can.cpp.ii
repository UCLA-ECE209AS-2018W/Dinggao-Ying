# 1 "/home/yvonne/water_depth/mcp_can.cpp"
# 1 "<built-in>"
# 1 "<command-line>"
# 1 "/home/yvonne/water_depth/mcp_can.cpp"
# 48 "/home/yvonne/water_depth/mcp_can.cpp"
# 1 "/home/yvonne/water_depth/mcp_can.h" 1
# 50 "/home/yvonne/water_depth/mcp_can.h"
# 1 "/home/yvonne/water_depth/mcp_can_dfs.h" 1
# 51 "/home/yvonne/water_depth/mcp_can_dfs.h"
# 1 "/home/yvonne/Downloads/arduino-1.8.5/hardware/arduino/avr/cores/arduino/Arduino.h" 1
# 23 "/home/yvonne/Downloads/arduino-1.8.5/hardware/arduino/avr/cores/arduino/Arduino.h"
# 1 "/home/yvonne/Downloads/arduino-1.8.5/hardware/tools/avr/avr/include/stdlib.h" 1 3
# 48 "/home/yvonne/Downloads/arduino-1.8.5/hardware/tools/avr/avr/include/stdlib.h" 3
# 1 "/home/yvonne/Downloads/arduino-1.8.5/hardware/tools/avr/lib/gcc/avr/4.9.2/include/stddef.h" 1 3 4
# 212 "/home/yvonne/Downloads/arduino-1.8.5/hardware/tools/avr/lib/gcc/avr/4.9.2/include/stddef.h" 3 4
typedef unsigned int size_t;
# 49 "/home/yvonne/Downloads/arduino-1.8.5/hardware/tools/avr/avr/include/stdlib.h" 2 3







extern "C" {
# 70 "/home/yvonne/Downloads/arduino-1.8.5/hardware/tools/avr/avr/include/stdlib.h" 3
typedef struct {
 int quot;
 int rem;
} div_t;


typedef struct {
 long quot;
 long rem;
} ldiv_t;


typedef int (*__compar_fn_t)(const void *, const void *);
# 116 "/home/yvonne/Downloads/arduino-1.8.5/hardware/tools/avr/avr/include/stdlib.h" 3
extern void abort(void) __attribute__((__noreturn__));




extern int abs(int __i) __attribute__((__const__));
# 130 "/home/yvonne/Downloads/arduino-1.8.5/hardware/tools/avr/avr/include/stdlib.h" 3
extern long labs(long __i) __attribute__((__const__));
# 153 "/home/yvonne/Downloads/arduino-1.8.5/hardware/tools/avr/avr/include/stdlib.h" 3
extern void *bsearch(const void *__key, const void *__base, size_t __nmemb,
       size_t __size, int (*__compar)(const void *, const void *));







extern div_t div(int __num, int __denom) __asm__("__divmodhi4") __attribute__((__const__));





extern ldiv_t ldiv(long __num, long __denom) __asm__("__divmodsi4") __attribute__((__const__));
# 185 "/home/yvonne/Downloads/arduino-1.8.5/hardware/tools/avr/avr/include/stdlib.h" 3
extern void qsort(void *__base, size_t __nmemb, size_t __size,
    __compar_fn_t __compar);
# 218 "/home/yvonne/Downloads/arduino-1.8.5/hardware/tools/avr/avr/include/stdlib.h" 3
extern long strtol(const char *__nptr, char **__endptr, int __base);
# 252 "/home/yvonne/Downloads/arduino-1.8.5/hardware/tools/avr/avr/include/stdlib.h" 3
extern unsigned long strtoul(const char *__nptr, char **__endptr, int __base);
# 264 "/home/yvonne/Downloads/arduino-1.8.5/hardware/tools/avr/avr/include/stdlib.h" 3
extern long atol(const char *__s) __attribute__((__pure__));
# 276 "/home/yvonne/Downloads/arduino-1.8.5/hardware/tools/avr/avr/include/stdlib.h" 3
extern int atoi(const char *__s) __attribute__((__pure__));
# 288 "/home/yvonne/Downloads/arduino-1.8.5/hardware/tools/avr/avr/include/stdlib.h" 3
extern void exit(int __status) __attribute__((__noreturn__));
# 300 "/home/yvonne/Downloads/arduino-1.8.5/hardware/tools/avr/avr/include/stdlib.h" 3
extern void *malloc(size_t __size) __attribute__((__malloc__));






extern void free(void *__ptr);




extern size_t __malloc_margin;




extern char *__malloc_heap_start;




extern char *__malloc_heap_end;






extern void *calloc(size_t __nele, size_t __size) __attribute__((__malloc__));
# 348 "/home/yvonne/Downloads/arduino-1.8.5/hardware/tools/avr/avr/include/stdlib.h" 3
extern void *realloc(void *__ptr, size_t __size) __attribute__((__malloc__));

extern double strtod(const char *__nptr, char **__endptr);
# 361 "/home/yvonne/Downloads/arduino-1.8.5/hardware/tools/avr/avr/include/stdlib.h" 3
extern double atof(const char *__nptr);
# 383 "/home/yvonne/Downloads/arduino-1.8.5/hardware/tools/avr/avr/include/stdlib.h" 3
extern int rand(void);



extern void srand(unsigned int __seed);






extern int rand_r(unsigned long *__ctx);
# 428 "/home/yvonne/Downloads/arduino-1.8.5/hardware/tools/avr/avr/include/stdlib.h" 3
extern __inline__ __attribute__((__gnu_inline__))
char *itoa (int __val, char *__s, int __radix)
{
    if (!__builtin_constant_p (__radix)) {
 extern char *__itoa (int, char *, int);
 return __itoa (__val, __s, __radix);
    } else if (__radix < 2 || __radix > 36) {
 *__s = 0;
 return __s;
    } else {
 extern char *__itoa_ncheck (int, char *, unsigned char);
 return __itoa_ncheck (__val, __s, __radix);
    }
}
# 473 "/home/yvonne/Downloads/arduino-1.8.5/hardware/tools/avr/avr/include/stdlib.h" 3
extern __inline__ __attribute__((__gnu_inline__))
char *ltoa (long __val, char *__s, int __radix)
{
    if (!__builtin_constant_p (__radix)) {
 extern char *__ltoa (long, char *, int);
 return __ltoa (__val, __s, __radix);
    } else if (__radix < 2 || __radix > 36) {
 *__s = 0;
 return __s;
    } else {
 extern char *__ltoa_ncheck (long, char *, unsigned char);
 return __ltoa_ncheck (__val, __s, __radix);
    }
}
# 516 "/home/yvonne/Downloads/arduino-1.8.5/hardware/tools/avr/avr/include/stdlib.h" 3
extern __inline__ __attribute__((__gnu_inline__))
char *utoa (unsigned int __val, char *__s, int __radix)
{
    if (!__builtin_constant_p (__radix)) {
 extern char *__utoa (unsigned int, char *, int);
 return __utoa (__val, __s, __radix);
    } else if (__radix < 2 || __radix > 36) {
 *__s = 0;
 return __s;
    } else {
 extern char *__utoa_ncheck (unsigned int, char *, unsigned char);
 return __utoa_ncheck (__val, __s, __radix);
    }
}
# 558 "/home/yvonne/Downloads/arduino-1.8.5/hardware/tools/avr/avr/include/stdlib.h" 3
extern __inline__ __attribute__((__gnu_inline__))
char *ultoa (unsigned long __val, char *__s, int __radix)
{
    if (!__builtin_constant_p (__radix)) {
 extern char *__ultoa (unsigned long, char *, int);
 return __ultoa (__val, __s, __radix);
    } else if (__radix < 2 || __radix > 36) {
 *__s = 0;
 return __s;
    } else {
 extern char *__ultoa_ncheck (unsigned long, char *, unsigned char);
 return __ultoa_ncheck (__val, __s, __radix);
    }
}
# 590 "/home/yvonne/Downloads/arduino-1.8.5/hardware/tools/avr/avr/include/stdlib.h" 3
extern long random(void);




extern void srandom(unsigned long __seed);







extern long random_r(unsigned long *__ctx);
# 649 "/home/yvonne/Downloads/arduino-1.8.5/hardware/tools/avr/avr/include/stdlib.h" 3
extern char *dtostre(double __val, char *__s, unsigned char __prec,
       unsigned char __flags);
# 666 "/home/yvonne/Downloads/arduino-1.8.5/hardware/tools/avr/avr/include/stdlib.h" 3
extern char *dtostrf(double __val, signed char __width,
                     unsigned char __prec, char *__s);
# 685 "/home/yvonne/Downloads/arduino-1.8.5/hardware/tools/avr/avr/include/stdlib.h" 3
extern int atexit(void (*)(void));
extern int system (const char *);
extern char *getenv (const char *);



}
# 24 "/home/yvonne/Downloads/arduino-1.8.5/hardware/arduino/avr/cores/arduino/Arduino.h" 2
# 1 "/home/yvonne/Downloads/arduino-1.8.5/hardware/tools/avr/lib/gcc/avr/4.9.2/include/stdbool.h" 1 3 4
# 25 "/home/yvonne/Downloads/arduino-1.8.5/hardware/arduino/avr/cores/arduino/Arduino.h" 2
# 1 "/home/yvonne/Downloads/arduino-1.8.5/hardware/tools/avr/avr/include/string.h" 1 3
# 46 "/home/yvonne/Downloads/arduino-1.8.5/hardware/tools/avr/avr/include/string.h" 3
# 1 "/home/yvonne/Downloads/arduino-1.8.5/hardware/tools/avr/lib/gcc/avr/4.9.2/include/stddef.h" 1 3 4
# 47 "/home/yvonne/Downloads/arduino-1.8.5/hardware/tools/avr/avr/include/string.h" 2 3
# 58 "/home/yvonne/Downloads/arduino-1.8.5/hardware/tools/avr/avr/include/string.h" 3
extern "C" {
# 125 "/home/yvonne/Downloads/arduino-1.8.5/hardware/tools/avr/avr/include/string.h" 3
extern int ffs(int __val) __attribute__((__const__));





extern int ffsl(long __val) __attribute__((__const__));





__extension__ extern int ffsll(long long __val) __attribute__((__const__));
# 150 "/home/yvonne/Downloads/arduino-1.8.5/hardware/tools/avr/avr/include/string.h" 3
extern void *memccpy(void *, const void *, int, size_t);
# 162 "/home/yvonne/Downloads/arduino-1.8.5/hardware/tools/avr/avr/include/string.h" 3
extern void *memchr(const void *, int, size_t) __attribute__((__pure__));
# 180 "/home/yvonne/Downloads/arduino-1.8.5/hardware/tools/avr/avr/include/string.h" 3
extern int memcmp(const void *, const void *, size_t) __attribute__((__pure__));
# 191 "/home/yvonne/Downloads/arduino-1.8.5/hardware/tools/avr/avr/include/string.h" 3
extern void *memcpy(void *, const void *, size_t);
# 203 "/home/yvonne/Downloads/arduino-1.8.5/hardware/tools/avr/avr/include/string.h" 3
extern void *memmem(const void *, size_t, const void *, size_t) __attribute__((__pure__));
# 213 "/home/yvonne/Downloads/arduino-1.8.5/hardware/tools/avr/avr/include/string.h" 3
extern void *memmove(void *, const void *, size_t);
# 225 "/home/yvonne/Downloads/arduino-1.8.5/hardware/tools/avr/avr/include/string.h" 3
extern void *memrchr(const void *, int, size_t) __attribute__((__pure__));
# 235 "/home/yvonne/Downloads/arduino-1.8.5/hardware/tools/avr/avr/include/string.h" 3
extern void *memset(void *, int, size_t);
# 248 "/home/yvonne/Downloads/arduino-1.8.5/hardware/tools/avr/avr/include/string.h" 3
extern char *strcat(char *, const char *);
# 262 "/home/yvonne/Downloads/arduino-1.8.5/hardware/tools/avr/avr/include/string.h" 3
extern char *strchr(const char *, int) __attribute__((__pure__));
# 274 "/home/yvonne/Downloads/arduino-1.8.5/hardware/tools/avr/avr/include/string.h" 3
extern char *strchrnul(const char *, int) __attribute__((__pure__));
# 287 "/home/yvonne/Downloads/arduino-1.8.5/hardware/tools/avr/avr/include/string.h" 3
extern int strcmp(const char *, const char *) __attribute__((__pure__));
# 305 "/home/yvonne/Downloads/arduino-1.8.5/hardware/tools/avr/avr/include/string.h" 3
extern char *strcpy(char *, const char *);
# 320 "/home/yvonne/Downloads/arduino-1.8.5/hardware/tools/avr/avr/include/string.h" 3
extern int strcasecmp(const char *, const char *) __attribute__((__pure__));
# 333 "/home/yvonne/Downloads/arduino-1.8.5/hardware/tools/avr/avr/include/string.h" 3
extern char *strcasestr(const char *, const char *) __attribute__((__pure__));
# 344 "/home/yvonne/Downloads/arduino-1.8.5/hardware/tools/avr/avr/include/string.h" 3
extern size_t strcspn(const char *__s, const char *__reject) __attribute__((__pure__));
# 364 "/home/yvonne/Downloads/arduino-1.8.5/hardware/tools/avr/avr/include/string.h" 3
extern char *strdup(const char *s1);
# 377 "/home/yvonne/Downloads/arduino-1.8.5/hardware/tools/avr/avr/include/string.h" 3
extern size_t strlcat(char *, const char *, size_t);
# 388 "/home/yvonne/Downloads/arduino-1.8.5/hardware/tools/avr/avr/include/string.h" 3
extern size_t strlcpy(char *, const char *, size_t);
# 399 "/home/yvonne/Downloads/arduino-1.8.5/hardware/tools/avr/avr/include/string.h" 3
extern size_t strlen(const char *) __attribute__((__pure__));
# 411 "/home/yvonne/Downloads/arduino-1.8.5/hardware/tools/avr/avr/include/string.h" 3
extern char *strlwr(char *);
# 422 "/home/yvonne/Downloads/arduino-1.8.5/hardware/tools/avr/avr/include/string.h" 3
extern char *strncat(char *, const char *, size_t);
# 434 "/home/yvonne/Downloads/arduino-1.8.5/hardware/tools/avr/avr/include/string.h" 3
extern int strncmp(const char *, const char *, size_t) __attribute__((__pure__));
# 449 "/home/yvonne/Downloads/arduino-1.8.5/hardware/tools/avr/avr/include/string.h" 3
extern char *strncpy(char *, const char *, size_t);
# 464 "/home/yvonne/Downloads/arduino-1.8.5/hardware/tools/avr/avr/include/string.h" 3
extern int strncasecmp(const char *, const char *, size_t) __attribute__((__pure__));
# 478 "/home/yvonne/Downloads/arduino-1.8.5/hardware/tools/avr/avr/include/string.h" 3
extern size_t strnlen(const char *, size_t) __attribute__((__pure__));
# 491 "/home/yvonne/Downloads/arduino-1.8.5/hardware/tools/avr/avr/include/string.h" 3
extern char *strpbrk(const char *__s, const char *__accept) __attribute__((__pure__));
# 505 "/home/yvonne/Downloads/arduino-1.8.5/hardware/tools/avr/avr/include/string.h" 3
extern char *strrchr(const char *, int) __attribute__((__pure__));
# 515 "/home/yvonne/Downloads/arduino-1.8.5/hardware/tools/avr/avr/include/string.h" 3
extern char *strrev(char *);
# 533 "/home/yvonne/Downloads/arduino-1.8.5/hardware/tools/avr/avr/include/string.h" 3
extern char *strsep(char **, const char *);
# 544 "/home/yvonne/Downloads/arduino-1.8.5/hardware/tools/avr/avr/include/string.h" 3
extern size_t strspn(const char *__s, const char *__accept) __attribute__((__pure__));
# 557 "/home/yvonne/Downloads/arduino-1.8.5/hardware/tools/avr/avr/include/string.h" 3
extern char *strstr(const char *, const char *) __attribute__((__pure__));
# 576 "/home/yvonne/Downloads/arduino-1.8.5/hardware/tools/avr/avr/include/string.h" 3
extern char *strtok(char *, const char *);
# 593 "/home/yvonne/Downloads/arduino-1.8.5/hardware/tools/avr/avr/include/string.h" 3
extern char *strtok_r(char *, const char *, char **);
# 606 "/home/yvonne/Downloads/arduino-1.8.5/hardware/tools/avr/avr/include/string.h" 3
extern char *strupr(char *);



extern int strcoll(const char *s1, const char *s2);
extern char *strerror(int errnum);
extern size_t strxfrm(char *dest, const char *src, size_t n);



}
# 26 "/home/yvonne/Downloads/arduino-1.8.5/hardware/arduino/avr/cores/arduino/Arduino.h" 2
# 1 "/home/yvonne/Downloads/arduino-1.8.5/hardware/tools/avr/avr/include/math.h" 1 3
# 121 "/home/yvonne/Downloads/arduino-1.8.5/hardware/tools/avr/avr/include/math.h" 3
extern "C" {





extern double cos(double __x) __attribute__((__const__));





extern double sin(double __x) __attribute__((__const__));





extern double tan(double __x) __attribute__((__const__));






extern double fabs(double __x) __attribute__((__const__));






extern double fmod(double __x, double __y) __attribute__((__const__));
# 168 "/home/yvonne/Downloads/arduino-1.8.5/hardware/tools/avr/avr/include/math.h" 3
extern double modf(double __x, double *__iptr);


extern float modff (float __x, float *__iptr);




extern double sqrt(double __x) __attribute__((__const__));


extern float sqrtf (float) __attribute__((__const__));




extern double cbrt(double __x) __attribute__((__const__));
# 195 "/home/yvonne/Downloads/arduino-1.8.5/hardware/tools/avr/avr/include/math.h" 3
extern double hypot (double __x, double __y) __attribute__((__const__));







extern double square(double __x) __attribute__((__const__));






extern double floor(double __x) __attribute__((__const__));






extern double ceil(double __x) __attribute__((__const__));
# 235 "/home/yvonne/Downloads/arduino-1.8.5/hardware/tools/avr/avr/include/math.h" 3
extern double frexp(double __x, int *__pexp);







extern double ldexp(double __x, int __exp) __attribute__((__const__));





extern double exp(double __x) __attribute__((__const__));





extern double cosh(double __x) __attribute__((__const__));





extern double sinh(double __x) __attribute__((__const__));





extern double tanh(double __x) __attribute__((__const__));







extern double acos(double __x) __attribute__((__const__));







extern double asin(double __x) __attribute__((__const__));






extern double atan(double __x) __attribute__((__const__));
# 299 "/home/yvonne/Downloads/arduino-1.8.5/hardware/tools/avr/avr/include/math.h" 3
extern double atan2(double __y, double __x) __attribute__((__const__));





extern double log(double __x) __attribute__((__const__));





extern double log10(double __x) __attribute__((__const__));





extern double pow(double __x, double __y) __attribute__((__const__));






extern int isnan(double __x) __attribute__((__const__));
# 334 "/home/yvonne/Downloads/arduino-1.8.5/hardware/tools/avr/avr/include/math.h" 3
extern int isinf(double __x) __attribute__((__const__));






__attribute__((__const__)) static inline int isfinite (double __x)
{
    unsigned char __exp;
    __asm__ (
 "mov	%0, %C1		\n\t"
 "lsl	%0		\n\t"
 "mov	%0, %D1		\n\t"
 "rol	%0		"
 : "=r" (__exp)
 : "r" (__x) );
    return __exp != 0xff;
}






__attribute__((__const__)) static inline double copysign (double __x, double __y)
{
    __asm__ (
 "bst	%D2, 7	\n\t"
 "bld	%D0, 7	"
 : "=r" (__x)
 : "0" (__x), "r" (__y) );
    return __x;
}
# 377 "/home/yvonne/Downloads/arduino-1.8.5/hardware/tools/avr/avr/include/math.h" 3
extern int signbit (double __x) __attribute__((__const__));






extern double fdim (double __x, double __y) __attribute__((__const__));
# 393 "/home/yvonne/Downloads/arduino-1.8.5/hardware/tools/avr/avr/include/math.h" 3
extern double fma (double __x, double __y, double __z) __attribute__((__const__));







extern double fmax (double __x, double __y) __attribute__((__const__));







extern double fmin (double __x, double __y) __attribute__((__const__));






extern double trunc (double __x) __attribute__((__const__));
# 427 "/home/yvonne/Downloads/arduino-1.8.5/hardware/tools/avr/avr/include/math.h" 3
extern double round (double __x) __attribute__((__const__));
# 440 "/home/yvonne/Downloads/arduino-1.8.5/hardware/tools/avr/avr/include/math.h" 3
extern long lround (double __x) __attribute__((__const__));
# 454 "/home/yvonne/Downloads/arduino-1.8.5/hardware/tools/avr/avr/include/math.h" 3
extern long lrint (double __x) __attribute__((__const__));



}
# 27 "/home/yvonne/Downloads/arduino-1.8.5/hardware/arduino/avr/cores/arduino/Arduino.h" 2

# 1 "/home/yvonne/Downloads/arduino-1.8.5/hardware/tools/avr/avr/include/avr/pgmspace.h" 1 3
# 88 "/home/yvonne/Downloads/arduino-1.8.5/hardware/tools/avr/avr/include/avr/pgmspace.h" 3
# 1 "/home/yvonne/Downloads/arduino-1.8.5/hardware/tools/avr/avr/include/inttypes.h" 1 3
# 37 "/home/yvonne/Downloads/arduino-1.8.5/hardware/tools/avr/avr/include/inttypes.h" 3
# 1 "/home/yvonne/Downloads/arduino-1.8.5/hardware/tools/avr/lib/gcc/avr/4.9.2/include/stdint.h" 1 3 4
# 9 "/home/yvonne/Downloads/arduino-1.8.5/hardware/tools/avr/lib/gcc/avr/4.9.2/include/stdint.h" 3 4
# 1 "/home/yvonne/Downloads/arduino-1.8.5/hardware/tools/avr/avr/include/stdint.h" 1 3 4
# 125 "/home/yvonne/Downloads/arduino-1.8.5/hardware/tools/avr/avr/include/stdint.h" 3 4
typedef signed int int8_t __attribute__((__mode__(__QI__)));
typedef unsigned int uint8_t __attribute__((__mode__(__QI__)));
typedef signed int int16_t __attribute__ ((__mode__ (__HI__)));
typedef unsigned int uint16_t __attribute__ ((__mode__ (__HI__)));
typedef signed int int32_t __attribute__ ((__mode__ (__SI__)));
typedef unsigned int uint32_t __attribute__ ((__mode__ (__SI__)));

typedef signed int int64_t __attribute__((__mode__(__DI__)));
typedef unsigned int uint64_t __attribute__((__mode__(__DI__)));
# 146 "/home/yvonne/Downloads/arduino-1.8.5/hardware/tools/avr/avr/include/stdint.h" 3 4
typedef int16_t intptr_t;




typedef uint16_t uintptr_t;
# 163 "/home/yvonne/Downloads/arduino-1.8.5/hardware/tools/avr/avr/include/stdint.h" 3 4
typedef int8_t int_least8_t;




typedef uint8_t uint_least8_t;




typedef int16_t int_least16_t;




typedef uint16_t uint_least16_t;




typedef int32_t int_least32_t;




typedef uint32_t uint_least32_t;







typedef int64_t int_least64_t;






typedef uint64_t uint_least64_t;
# 217 "/home/yvonne/Downloads/arduino-1.8.5/hardware/tools/avr/avr/include/stdint.h" 3 4
typedef int8_t int_fast8_t;




typedef uint8_t uint_fast8_t;




typedef int16_t int_fast16_t;




typedef uint16_t uint_fast16_t;




typedef int32_t int_fast32_t;




typedef uint32_t uint_fast32_t;







typedef int64_t int_fast64_t;






typedef uint64_t uint_fast64_t;
# 277 "/home/yvonne/Downloads/arduino-1.8.5/hardware/tools/avr/avr/include/stdint.h" 3 4
typedef int64_t intmax_t;




typedef uint64_t uintmax_t;
# 10 "/home/yvonne/Downloads/arduino-1.8.5/hardware/tools/avr/lib/gcc/avr/4.9.2/include/stdint.h" 2 3 4
# 38 "/home/yvonne/Downloads/arduino-1.8.5/hardware/tools/avr/avr/include/inttypes.h" 2 3
# 77 "/home/yvonne/Downloads/arduino-1.8.5/hardware/tools/avr/avr/include/inttypes.h" 3
typedef int32_t int_farptr_t;



typedef uint32_t uint_farptr_t;
# 89 "/home/yvonne/Downloads/arduino-1.8.5/hardware/tools/avr/avr/include/avr/pgmspace.h" 2 3
# 1 "/home/yvonne/Downloads/arduino-1.8.5/hardware/tools/avr/lib/gcc/avr/4.9.2/include/stddef.h" 1 3 4
# 90 "/home/yvonne/Downloads/arduino-1.8.5/hardware/tools/avr/avr/include/avr/pgmspace.h" 2 3
# 1 "/home/yvonne/Downloads/arduino-1.8.5/hardware/tools/avr/avr/include/avr/io.h" 1 3
# 99 "/home/yvonne/Downloads/arduino-1.8.5/hardware/tools/avr/avr/include/avr/io.h" 3
# 1 "/home/yvonne/Downloads/arduino-1.8.5/hardware/tools/avr/avr/include/avr/sfr_defs.h" 1 3
# 100 "/home/yvonne/Downloads/arduino-1.8.5/hardware/tools/avr/avr/include/avr/io.h" 2 3
# 272 "/home/yvonne/Downloads/arduino-1.8.5/hardware/tools/avr/avr/include/avr/io.h" 3
# 1 "/home/yvonne/Downloads/arduino-1.8.5/hardware/tools/avr/avr/include/avr/iom328p.h" 1 3
# 273 "/home/yvonne/Downloads/arduino-1.8.5/hardware/tools/avr/avr/include/avr/io.h" 2 3
# 627 "/home/yvonne/Downloads/arduino-1.8.5/hardware/tools/avr/avr/include/avr/io.h" 3
# 1 "/home/yvonne/Downloads/arduino-1.8.5/hardware/tools/avr/avr/include/avr/portpins.h" 1 3
# 628 "/home/yvonne/Downloads/arduino-1.8.5/hardware/tools/avr/avr/include/avr/io.h" 2 3

# 1 "/home/yvonne/Downloads/arduino-1.8.5/hardware/tools/avr/avr/include/avr/common.h" 1 3
# 630 "/home/yvonne/Downloads/arduino-1.8.5/hardware/tools/avr/avr/include/avr/io.h" 2 3

# 1 "/home/yvonne/Downloads/arduino-1.8.5/hardware/tools/avr/avr/include/avr/version.h" 1 3
# 632 "/home/yvonne/Downloads/arduino-1.8.5/hardware/tools/avr/avr/include/avr/io.h" 2 3






# 1 "/home/yvonne/Downloads/arduino-1.8.5/hardware/tools/avr/avr/include/avr/fuse.h" 1 3
# 239 "/home/yvonne/Downloads/arduino-1.8.5/hardware/tools/avr/avr/include/avr/fuse.h" 3
typedef struct
{
    unsigned char low;
    unsigned char high;
    unsigned char extended;
} __fuse_t;
# 639 "/home/yvonne/Downloads/arduino-1.8.5/hardware/tools/avr/avr/include/avr/io.h" 2 3


# 1 "/home/yvonne/Downloads/arduino-1.8.5/hardware/tools/avr/avr/include/avr/lock.h" 1 3
# 642 "/home/yvonne/Downloads/arduino-1.8.5/hardware/tools/avr/avr/include/avr/io.h" 2 3
# 91 "/home/yvonne/Downloads/arduino-1.8.5/hardware/tools/avr/avr/include/avr/pgmspace.h" 2 3
# 116 "/home/yvonne/Downloads/arduino-1.8.5/hardware/tools/avr/avr/include/avr/pgmspace.h" 3
extern "C" {
# 1158 "/home/yvonne/Downloads/arduino-1.8.5/hardware/tools/avr/avr/include/avr/pgmspace.h" 3
extern const void * memchr_P(const void *, int __val, size_t __len) __attribute__((__const__));
# 1172 "/home/yvonne/Downloads/arduino-1.8.5/hardware/tools/avr/avr/include/avr/pgmspace.h" 3
extern int memcmp_P(const void *, const void *, size_t) __attribute__((__pure__));






extern void *memccpy_P(void *, const void *, int __val, size_t);
# 1188 "/home/yvonne/Downloads/arduino-1.8.5/hardware/tools/avr/avr/include/avr/pgmspace.h" 3
extern void *memcpy_P(void *, const void *, size_t);






extern void *memmem_P(const void *, size_t, const void *, size_t) __attribute__((__pure__));
# 1207 "/home/yvonne/Downloads/arduino-1.8.5/hardware/tools/avr/avr/include/avr/pgmspace.h" 3
extern const void * memrchr_P(const void *, int __val, size_t __len) __attribute__((__const__));
# 1217 "/home/yvonne/Downloads/arduino-1.8.5/hardware/tools/avr/avr/include/avr/pgmspace.h" 3
extern char *strcat_P(char *, const char *);
# 1233 "/home/yvonne/Downloads/arduino-1.8.5/hardware/tools/avr/avr/include/avr/pgmspace.h" 3
extern const char * strchr_P(const char *, int __val) __attribute__((__const__));
# 1245 "/home/yvonne/Downloads/arduino-1.8.5/hardware/tools/avr/avr/include/avr/pgmspace.h" 3
extern const char * strchrnul_P(const char *, int __val) __attribute__((__const__));
# 1258 "/home/yvonne/Downloads/arduino-1.8.5/hardware/tools/avr/avr/include/avr/pgmspace.h" 3
extern int strcmp_P(const char *, const char *) __attribute__((__pure__));
# 1268 "/home/yvonne/Downloads/arduino-1.8.5/hardware/tools/avr/avr/include/avr/pgmspace.h" 3
extern char *strcpy_P(char *, const char *);
# 1285 "/home/yvonne/Downloads/arduino-1.8.5/hardware/tools/avr/avr/include/avr/pgmspace.h" 3
extern int strcasecmp_P(const char *, const char *) __attribute__((__pure__));






extern char *strcasestr_P(const char *, const char *) __attribute__((__pure__));
# 1305 "/home/yvonne/Downloads/arduino-1.8.5/hardware/tools/avr/avr/include/avr/pgmspace.h" 3
extern size_t strcspn_P(const char *__s, const char * __reject) __attribute__((__pure__));
# 1321 "/home/yvonne/Downloads/arduino-1.8.5/hardware/tools/avr/avr/include/avr/pgmspace.h" 3
extern size_t strlcat_P (char *, const char *, size_t );
# 1334 "/home/yvonne/Downloads/arduino-1.8.5/hardware/tools/avr/avr/include/avr/pgmspace.h" 3
extern size_t strlcpy_P (char *, const char *, size_t );
# 1346 "/home/yvonne/Downloads/arduino-1.8.5/hardware/tools/avr/avr/include/avr/pgmspace.h" 3
extern size_t strnlen_P(const char *, size_t) __attribute__((__const__));
# 1357 "/home/yvonne/Downloads/arduino-1.8.5/hardware/tools/avr/avr/include/avr/pgmspace.h" 3
extern int strncmp_P(const char *, const char *, size_t) __attribute__((__pure__));
# 1376 "/home/yvonne/Downloads/arduino-1.8.5/hardware/tools/avr/avr/include/avr/pgmspace.h" 3
extern int strncasecmp_P(const char *, const char *, size_t) __attribute__((__pure__));
# 1387 "/home/yvonne/Downloads/arduino-1.8.5/hardware/tools/avr/avr/include/avr/pgmspace.h" 3
extern char *strncat_P(char *, const char *, size_t);
# 1401 "/home/yvonne/Downloads/arduino-1.8.5/hardware/tools/avr/avr/include/avr/pgmspace.h" 3
extern char *strncpy_P(char *, const char *, size_t);
# 1416 "/home/yvonne/Downloads/arduino-1.8.5/hardware/tools/avr/avr/include/avr/pgmspace.h" 3
extern char *strpbrk_P(const char *__s, const char * __accept) __attribute__((__pure__));
# 1427 "/home/yvonne/Downloads/arduino-1.8.5/hardware/tools/avr/avr/include/avr/pgmspace.h" 3
extern const char * strrchr_P(const char *, int __val) __attribute__((__const__));
# 1447 "/home/yvonne/Downloads/arduino-1.8.5/hardware/tools/avr/avr/include/avr/pgmspace.h" 3
extern char *strsep_P(char **__sp, const char * __delim);
# 1460 "/home/yvonne/Downloads/arduino-1.8.5/hardware/tools/avr/avr/include/avr/pgmspace.h" 3
extern size_t strspn_P(const char *__s, const char * __accept) __attribute__((__pure__));
# 1474 "/home/yvonne/Downloads/arduino-1.8.5/hardware/tools/avr/avr/include/avr/pgmspace.h" 3
extern char *strstr_P(const char *, const char *) __attribute__((__pure__));
# 1496 "/home/yvonne/Downloads/arduino-1.8.5/hardware/tools/avr/avr/include/avr/pgmspace.h" 3
extern char *strtok_P(char *__s, const char * __delim);
# 1516 "/home/yvonne/Downloads/arduino-1.8.5/hardware/tools/avr/avr/include/avr/pgmspace.h" 3
extern char *strtok_rP(char *__s, const char * __delim, char **__last);
# 1529 "/home/yvonne/Downloads/arduino-1.8.5/hardware/tools/avr/avr/include/avr/pgmspace.h" 3
extern size_t strlen_PF(uint_farptr_t src) __attribute__((__const__));
# 1545 "/home/yvonne/Downloads/arduino-1.8.5/hardware/tools/avr/avr/include/avr/pgmspace.h" 3
extern size_t strnlen_PF(uint_farptr_t src, size_t len) __attribute__((__const__));
# 1560 "/home/yvonne/Downloads/arduino-1.8.5/hardware/tools/avr/avr/include/avr/pgmspace.h" 3
extern void *memcpy_PF(void *dest, uint_farptr_t src, size_t len);
# 1575 "/home/yvonne/Downloads/arduino-1.8.5/hardware/tools/avr/avr/include/avr/pgmspace.h" 3
extern char *strcpy_PF(char *dest, uint_farptr_t src);
# 1595 "/home/yvonne/Downloads/arduino-1.8.5/hardware/tools/avr/avr/include/avr/pgmspace.h" 3
extern char *strncpy_PF(char *dest, uint_farptr_t src, size_t len);
# 1611 "/home/yvonne/Downloads/arduino-1.8.5/hardware/tools/avr/avr/include/avr/pgmspace.h" 3
extern char *strcat_PF(char *dest, uint_farptr_t src);
# 1632 "/home/yvonne/Downloads/arduino-1.8.5/hardware/tools/avr/avr/include/avr/pgmspace.h" 3
extern size_t strlcat_PF(char *dst, uint_farptr_t src, size_t siz);
# 1649 "/home/yvonne/Downloads/arduino-1.8.5/hardware/tools/avr/avr/include/avr/pgmspace.h" 3
extern char *strncat_PF(char *dest, uint_farptr_t src, size_t len);
# 1665 "/home/yvonne/Downloads/arduino-1.8.5/hardware/tools/avr/avr/include/avr/pgmspace.h" 3
extern int strcmp_PF(const char *s1, uint_farptr_t s2) __attribute__((__pure__));
# 1682 "/home/yvonne/Downloads/arduino-1.8.5/hardware/tools/avr/avr/include/avr/pgmspace.h" 3
extern int strncmp_PF(const char *s1, uint_farptr_t s2, size_t n) __attribute__((__pure__));
# 1698 "/home/yvonne/Downloads/arduino-1.8.5/hardware/tools/avr/avr/include/avr/pgmspace.h" 3
extern int strcasecmp_PF(const char *s1, uint_farptr_t s2) __attribute__((__pure__));
# 1716 "/home/yvonne/Downloads/arduino-1.8.5/hardware/tools/avr/avr/include/avr/pgmspace.h" 3
extern int strncasecmp_PF(const char *s1, uint_farptr_t s2, size_t n) __attribute__((__pure__));
# 1732 "/home/yvonne/Downloads/arduino-1.8.5/hardware/tools/avr/avr/include/avr/pgmspace.h" 3
extern char *strstr_PF(const char *s1, uint_farptr_t s2);
# 1744 "/home/yvonne/Downloads/arduino-1.8.5/hardware/tools/avr/avr/include/avr/pgmspace.h" 3
extern size_t strlcpy_PF(char *dst, uint_farptr_t src, size_t siz);
# 1760 "/home/yvonne/Downloads/arduino-1.8.5/hardware/tools/avr/avr/include/avr/pgmspace.h" 3
extern int memcmp_PF(const void *, uint_farptr_t, size_t) __attribute__((__pure__));
# 1779 "/home/yvonne/Downloads/arduino-1.8.5/hardware/tools/avr/avr/include/avr/pgmspace.h" 3
extern size_t __strlen_P(const char *) __attribute__((__const__));
__attribute__((__always_inline__)) static __inline__ size_t strlen_P(const char * s);
static __inline__ size_t strlen_P(const char *s) {
  return __builtin_constant_p(__builtin_strlen(s))
     ? __builtin_strlen(s) : __strlen_P(s);
}



}
# 29 "/home/yvonne/Downloads/arduino-1.8.5/hardware/arduino/avr/cores/arduino/Arduino.h" 2
# 1 "/home/yvonne/Downloads/arduino-1.8.5/hardware/tools/avr/avr/include/avr/io.h" 1 3
# 30 "/home/yvonne/Downloads/arduino-1.8.5/hardware/arduino/avr/cores/arduino/Arduino.h" 2
# 1 "/home/yvonne/Downloads/arduino-1.8.5/hardware/tools/avr/avr/include/avr/interrupt.h" 1 3
# 31 "/home/yvonne/Downloads/arduino-1.8.5/hardware/arduino/avr/cores/arduino/Arduino.h" 2

# 1 "/home/yvonne/Downloads/arduino-1.8.5/hardware/arduino/avr/cores/arduino/binary.h" 1
# 33 "/home/yvonne/Downloads/arduino-1.8.5/hardware/arduino/avr/cores/arduino/Arduino.h" 2


extern "C"{


void yield(void);
# 121 "/home/yvonne/Downloads/arduino-1.8.5/hardware/arduino/avr/cores/arduino/Arduino.h"
typedef unsigned int word;



typedef bool boolean;
typedef uint8_t byte;

void init(void);
void initVariant(void);

int atexit(void (*func)()) __attribute__((weak));

void pinMode(uint8_t, uint8_t);
void digitalWrite(uint8_t, uint8_t);
int digitalRead(uint8_t);
int analogRead(uint8_t);
void analogReference(uint8_t mode);
void analogWrite(uint8_t, int);

unsigned long millis(void);
unsigned long micros(void);
void delay(unsigned long);
void delayMicroseconds(unsigned int us);
unsigned long pulseIn(uint8_t pin, uint8_t state, unsigned long timeout);
unsigned long pulseInLong(uint8_t pin, uint8_t state, unsigned long timeout);

void shiftOut(uint8_t dataPin, uint8_t clockPin, uint8_t bitOrder, uint8_t val);
uint8_t shiftIn(uint8_t dataPin, uint8_t clockPin, uint8_t bitOrder);

void attachInterrupt(uint8_t, void (*)(void), int mode);
void detachInterrupt(uint8_t);

void setup(void);
void loop(void);
# 163 "/home/yvonne/Downloads/arduino-1.8.5/hardware/arduino/avr/cores/arduino/Arduino.h"
extern const uint16_t __attribute__((__progmem__)) port_to_mode_PGM[];
extern const uint16_t __attribute__((__progmem__)) port_to_input_PGM[];
extern const uint16_t __attribute__((__progmem__)) port_to_output_PGM[];

extern const uint8_t __attribute__((__progmem__)) digital_pin_to_port_PGM[];

extern const uint8_t __attribute__((__progmem__)) digital_pin_to_bit_mask_PGM[];
extern const uint8_t __attribute__((__progmem__)) digital_pin_to_timer_PGM[];
# 226 "/home/yvonne/Downloads/arduino-1.8.5/hardware/arduino/avr/cores/arduino/Arduino.h"
}



# 1 "/home/yvonne/Downloads/arduino-1.8.5/hardware/arduino/avr/cores/arduino/WCharacter.h" 1
# 23 "/home/yvonne/Downloads/arduino-1.8.5/hardware/arduino/avr/cores/arduino/WCharacter.h"
# 1 "/home/yvonne/Downloads/arduino-1.8.5/hardware/tools/avr/avr/include/ctype.h" 1 3
# 48 "/home/yvonne/Downloads/arduino-1.8.5/hardware/tools/avr/avr/include/ctype.h" 3
extern "C" {
# 74 "/home/yvonne/Downloads/arduino-1.8.5/hardware/tools/avr/avr/include/ctype.h" 3
extern int isalnum(int __c) __attribute__((__const__));






extern int isalpha(int __c) __attribute__((__const__));






extern int isascii(int __c) __attribute__((__const__));





extern int isblank(int __c) __attribute__((__const__));





extern int iscntrl(int __c) __attribute__((__const__));





extern int isdigit(int __c) __attribute__((__const__));





extern int isgraph(int __c) __attribute__((__const__));





extern int islower(int __c) __attribute__((__const__));





extern int isprint(int __c) __attribute__((__const__));






extern int ispunct(int __c) __attribute__((__const__));







extern int isspace(int __c) __attribute__((__const__));





extern int isupper(int __c) __attribute__((__const__));






extern int isxdigit(int __c) __attribute__((__const__));
# 173 "/home/yvonne/Downloads/arduino-1.8.5/hardware/tools/avr/avr/include/ctype.h" 3
extern int toascii(int __c) __attribute__((__const__));





extern int tolower(int __c) __attribute__((__const__));





extern int toupper(int __c) __attribute__((__const__));




}
# 24 "/home/yvonne/Downloads/arduino-1.8.5/hardware/arduino/avr/cores/arduino/WCharacter.h" 2


inline boolean isAlphaNumeric(int c) __attribute__((always_inline));
inline boolean isAlpha(int c) __attribute__((always_inline));
inline boolean isAscii(int c) __attribute__((always_inline));
inline boolean isWhitespace(int c) __attribute__((always_inline));
inline boolean isControl(int c) __attribute__((always_inline));
inline boolean isDigit(int c) __attribute__((always_inline));
inline boolean isGraph(int c) __attribute__((always_inline));
inline boolean isLowerCase(int c) __attribute__((always_inline));
inline boolean isPrintable(int c) __attribute__((always_inline));
inline boolean isPunct(int c) __attribute__((always_inline));
inline boolean isSpace(int c) __attribute__((always_inline));
inline boolean isUpperCase(int c) __attribute__((always_inline));
inline boolean isHexadecimalDigit(int c) __attribute__((always_inline));
inline int toAscii(int c) __attribute__((always_inline));
inline int toLowerCase(int c) __attribute__((always_inline));
inline int toUpperCase(int c)__attribute__((always_inline));




inline boolean isAlphaNumeric(int c)
{
  return ( isalnum(c) == 0 ? false : true);
}




inline boolean isAlpha(int c)
{
  return ( isalpha(c) == 0 ? false : true);
}




inline boolean isAscii(int c)
{
  return ( isascii (c) == 0 ? false : true);
}



inline boolean isWhitespace(int c)
{
  return ( isblank (c) == 0 ? false : true);
}



inline boolean isControl(int c)
{
  return ( iscntrl (c) == 0 ? false : true);
}



inline boolean isDigit(int c)
{
  return ( isdigit (c) == 0 ? false : true);
}



inline boolean isGraph(int c)
{
  return ( isgraph (c) == 0 ? false : true);
}



inline boolean isLowerCase(int c)
{
  return (islower (c) == 0 ? false : true);
}



inline boolean isPrintable(int c)
{
  return ( isprint (c) == 0 ? false : true);
}




inline boolean isPunct(int c)
{
  return ( ispunct (c) == 0 ? false : true);
}





inline boolean isSpace(int c)
{
  return ( isspace (c) == 0 ? false : true);
}



inline boolean isUpperCase(int c)
{
  return ( isupper (c) == 0 ? false : true);
}




inline boolean isHexadecimalDigit(int c)
{
  return ( isxdigit (c) == 0 ? false : true);
}




inline int toAscii(int c)
{
  return toascii (c);
}
# 156 "/home/yvonne/Downloads/arduino-1.8.5/hardware/arduino/avr/cores/arduino/WCharacter.h"
inline int toLowerCase(int c)
{
  return tolower (c);
}



inline int toUpperCase(int c)
{
  return toupper (c);
}
# 231 "/home/yvonne/Downloads/arduino-1.8.5/hardware/arduino/avr/cores/arduino/Arduino.h" 2
# 1 "/home/yvonne/Downloads/arduino-1.8.5/hardware/arduino/avr/cores/arduino/WString.h" 1
# 37 "/home/yvonne/Downloads/arduino-1.8.5/hardware/arduino/avr/cores/arduino/WString.h"
class __FlashStringHelper;




class StringSumHelper;


class String
{



 typedef void (String::*StringIfHelperType)() const;
 void StringIfHelper() const {}

public:





 String(const char *cstr = "");
 String(const String &str);
 String(const __FlashStringHelper *str);

 String(String &&rval);
 String(StringSumHelper &&rval);

 explicit String(char c);
 explicit String(unsigned char, unsigned char base=10);
 explicit String(int, unsigned char base=10);
 explicit String(unsigned int, unsigned char base=10);
 explicit String(long, unsigned char base=10);
 explicit String(unsigned long, unsigned char base=10);
 explicit String(float, unsigned char decimalPlaces=2);
 explicit String(double, unsigned char decimalPlaces=2);
 ~String(void);





 unsigned char reserve(unsigned int size);
 inline unsigned int length(void) const {return len;}




 String & operator = (const String &rhs);
 String & operator = (const char *cstr);
 String & operator = (const __FlashStringHelper *str);

 String & operator = (String &&rval);
 String & operator = (StringSumHelper &&rval);







 unsigned char concat(const String &str);
 unsigned char concat(const char *cstr);
 unsigned char concat(char c);
 unsigned char concat(unsigned char c);
 unsigned char concat(int num);
 unsigned char concat(unsigned int num);
 unsigned char concat(long num);
 unsigned char concat(unsigned long num);
 unsigned char concat(float num);
 unsigned char concat(double num);
 unsigned char concat(const __FlashStringHelper * str);



 String & operator += (const String &rhs) {concat(rhs); return (*this);}
 String & operator += (const char *cstr) {concat(cstr); return (*this);}
 String & operator += (char c) {concat(c); return (*this);}
 String & operator += (unsigned char num) {concat(num); return (*this);}
 String & operator += (int num) {concat(num); return (*this);}
 String & operator += (unsigned int num) {concat(num); return (*this);}
 String & operator += (long num) {concat(num); return (*this);}
 String & operator += (unsigned long num) {concat(num); return (*this);}
 String & operator += (float num) {concat(num); return (*this);}
 String & operator += (double num) {concat(num); return (*this);}
 String & operator += (const __FlashStringHelper *str){concat(str); return (*this);}

 friend StringSumHelper & operator + (const StringSumHelper &lhs, const String &rhs);
 friend StringSumHelper & operator + (const StringSumHelper &lhs, const char *cstr);
 friend StringSumHelper & operator + (const StringSumHelper &lhs, char c);
 friend StringSumHelper & operator + (const StringSumHelper &lhs, unsigned char num);
 friend StringSumHelper & operator + (const StringSumHelper &lhs, int num);
 friend StringSumHelper & operator + (const StringSumHelper &lhs, unsigned int num);
 friend StringSumHelper & operator + (const StringSumHelper &lhs, long num);
 friend StringSumHelper & operator + (const StringSumHelper &lhs, unsigned long num);
 friend StringSumHelper & operator + (const StringSumHelper &lhs, float num);
 friend StringSumHelper & operator + (const StringSumHelper &lhs, double num);
 friend StringSumHelper & operator + (const StringSumHelper &lhs, const __FlashStringHelper *rhs);


 operator StringIfHelperType() const { return buffer ? &String::StringIfHelper : 0; }
 int compareTo(const String &s) const;
 unsigned char equals(const String &s) const;
 unsigned char equals(const char *cstr) const;
 unsigned char operator == (const String &rhs) const {return equals(rhs);}
 unsigned char operator == (const char *cstr) const {return equals(cstr);}
 unsigned char operator != (const String &rhs) const {return !equals(rhs);}
 unsigned char operator != (const char *cstr) const {return !equals(cstr);}
 unsigned char operator < (const String &rhs) const;
 unsigned char operator > (const String &rhs) const;
 unsigned char operator <= (const String &rhs) const;
 unsigned char operator >= (const String &rhs) const;
 unsigned char equalsIgnoreCase(const String &s) const;
 unsigned char startsWith( const String &prefix) const;
 unsigned char startsWith(const String &prefix, unsigned int offset) const;
 unsigned char endsWith(const String &suffix) const;


 char charAt(unsigned int index) const;
 void setCharAt(unsigned int index, char c);
 char operator [] (unsigned int index) const;
 char& operator [] (unsigned int index);
 void getBytes(unsigned char *buf, unsigned int bufsize, unsigned int index=0) const;
 void toCharArray(char *buf, unsigned int bufsize, unsigned int index=0) const
  { getBytes((unsigned char *)buf, bufsize, index); }
 const char* c_str() const { return buffer; }
 char* begin() { return buffer; }
 char* end() { return buffer + length(); }
 const char* begin() const { return c_str(); }
 const char* end() const { return c_str() + length(); }


 int indexOf( char ch ) const;
 int indexOf( char ch, unsigned int fromIndex ) const;
 int indexOf( const String &str ) const;
 int indexOf( const String &str, unsigned int fromIndex ) const;
 int lastIndexOf( char ch ) const;
 int lastIndexOf( char ch, unsigned int fromIndex ) const;
 int lastIndexOf( const String &str ) const;
 int lastIndexOf( const String &str, unsigned int fromIndex ) const;
 String substring( unsigned int beginIndex ) const { return substring(beginIndex, len); };
 String substring( unsigned int beginIndex, unsigned int endIndex ) const;


 void replace(char find, char replace);
 void replace(const String& find, const String& replace);
 void remove(unsigned int index);
 void remove(unsigned int index, unsigned int count);
 void toLowerCase(void);
 void toUpperCase(void);
 void trim(void);


 long toInt(void) const;
 float toFloat(void) const;
 double toDouble(void) const;

protected:
 char *buffer;
 unsigned int capacity;
 unsigned int len;
protected:
 void init(void);
 void invalidate(void);
 unsigned char changeBuffer(unsigned int maxStrLen);
 unsigned char concat(const char *cstr, unsigned int length);


 String & copy(const char *cstr, unsigned int length);
 String & copy(const __FlashStringHelper *pstr, unsigned int length);

 void move(String &rhs);

};

class StringSumHelper : public String
{
public:
 StringSumHelper(const String &s) : String(s) {}
 StringSumHelper(const char *p) : String(p) {}
 StringSumHelper(char c) : String(c) {}
 StringSumHelper(unsigned char num) : String(num) {}
 StringSumHelper(int num) : String(num) {}
 StringSumHelper(unsigned int num) : String(num) {}
 StringSumHelper(long num) : String(num) {}
 StringSumHelper(unsigned long num) : String(num) {}
 StringSumHelper(float num) : String(num) {}
 StringSumHelper(double num) : String(num) {}
};
# 232 "/home/yvonne/Downloads/arduino-1.8.5/hardware/arduino/avr/cores/arduino/Arduino.h" 2
# 1 "/home/yvonne/Downloads/arduino-1.8.5/hardware/arduino/avr/cores/arduino/HardwareSerial.h" 1
# 29 "/home/yvonne/Downloads/arduino-1.8.5/hardware/arduino/avr/cores/arduino/HardwareSerial.h"
# 1 "/home/yvonne/Downloads/arduino-1.8.5/hardware/arduino/avr/cores/arduino/Stream.h" 1
# 26 "/home/yvonne/Downloads/arduino-1.8.5/hardware/arduino/avr/cores/arduino/Stream.h"
# 1 "/home/yvonne/Downloads/arduino-1.8.5/hardware/arduino/avr/cores/arduino/Print.h" 1
# 24 "/home/yvonne/Downloads/arduino-1.8.5/hardware/arduino/avr/cores/arduino/Print.h"
# 1 "/home/yvonne/Downloads/arduino-1.8.5/hardware/tools/avr/avr/include/stdio.h" 1 3
# 45 "/home/yvonne/Downloads/arduino-1.8.5/hardware/tools/avr/avr/include/stdio.h" 3
# 1 "/home/yvonne/Downloads/arduino-1.8.5/hardware/tools/avr/lib/gcc/avr/4.9.2/include/stdarg.h" 1 3 4
# 40 "/home/yvonne/Downloads/arduino-1.8.5/hardware/tools/avr/lib/gcc/avr/4.9.2/include/stdarg.h" 3 4
typedef __builtin_va_list __gnuc_va_list;
# 98 "/home/yvonne/Downloads/arduino-1.8.5/hardware/tools/avr/lib/gcc/avr/4.9.2/include/stdarg.h" 3 4
typedef __gnuc_va_list va_list;
# 46 "/home/yvonne/Downloads/arduino-1.8.5/hardware/tools/avr/avr/include/stdio.h" 2 3




# 1 "/home/yvonne/Downloads/arduino-1.8.5/hardware/tools/avr/lib/gcc/avr/4.9.2/include/stddef.h" 1 3 4
# 51 "/home/yvonne/Downloads/arduino-1.8.5/hardware/tools/avr/avr/include/stdio.h" 2 3
# 244 "/home/yvonne/Downloads/arduino-1.8.5/hardware/tools/avr/avr/include/stdio.h" 3
struct __file {
 char *buf;
 unsigned char unget;
 uint8_t flags;
# 263 "/home/yvonne/Downloads/arduino-1.8.5/hardware/tools/avr/avr/include/stdio.h" 3
 int size;
 int len;
 int (*put)(char, struct __file *);
 int (*get)(struct __file *);
 void *udata;
};
# 277 "/home/yvonne/Downloads/arduino-1.8.5/hardware/tools/avr/avr/include/stdio.h" 3
typedef struct __file FILE;
# 399 "/home/yvonne/Downloads/arduino-1.8.5/hardware/tools/avr/avr/include/stdio.h" 3
extern "C" {







extern struct __file *__iob[];
# 419 "/home/yvonne/Downloads/arduino-1.8.5/hardware/tools/avr/avr/include/stdio.h" 3
extern FILE *fdevopen(int (*__put)(char, FILE*), int (*__get)(FILE*));
# 436 "/home/yvonne/Downloads/arduino-1.8.5/hardware/tools/avr/avr/include/stdio.h" 3
extern int fclose(FILE *__stream);
# 610 "/home/yvonne/Downloads/arduino-1.8.5/hardware/tools/avr/avr/include/stdio.h" 3
extern int vfprintf(FILE *__stream, const char *__fmt, va_list __ap);





extern int vfprintf_P(FILE *__stream, const char *__fmt, va_list __ap);






extern int fputc(int __c, FILE *__stream);




extern int putc(int __c, FILE *__stream);


extern int putchar(int __c);
# 651 "/home/yvonne/Downloads/arduino-1.8.5/hardware/tools/avr/avr/include/stdio.h" 3
extern int printf(const char *__fmt, ...);





extern int printf_P(const char *__fmt, ...);







extern int vprintf(const char *__fmt, va_list __ap);





extern int sprintf(char *__s, const char *__fmt, ...);





extern int sprintf_P(char *__s, const char *__fmt, ...);
# 687 "/home/yvonne/Downloads/arduino-1.8.5/hardware/tools/avr/avr/include/stdio.h" 3
extern int snprintf(char *__s, size_t __n, const char *__fmt, ...);





extern int snprintf_P(char *__s, size_t __n, const char *__fmt, ...);





extern int vsprintf(char *__s, const char *__fmt, va_list ap);





extern int vsprintf_P(char *__s, const char *__fmt, va_list ap);
# 715 "/home/yvonne/Downloads/arduino-1.8.5/hardware/tools/avr/avr/include/stdio.h" 3
extern int vsnprintf(char *__s, size_t __n, const char *__fmt, va_list ap);





extern int vsnprintf_P(char *__s, size_t __n, const char *__fmt, va_list ap);




extern int fprintf(FILE *__stream, const char *__fmt, ...);





extern int fprintf_P(FILE *__stream, const char *__fmt, ...);






extern int fputs(const char *__str, FILE *__stream);




extern int fputs_P(const char *__str, FILE *__stream);





extern int puts(const char *__str);




extern int puts_P(const char *__str);
# 764 "/home/yvonne/Downloads/arduino-1.8.5/hardware/tools/avr/avr/include/stdio.h" 3
extern size_t fwrite(const void *__ptr, size_t __size, size_t __nmemb,
         FILE *__stream);







extern int fgetc(FILE *__stream);




extern int getc(FILE *__stream);


extern int getchar(void);
# 812 "/home/yvonne/Downloads/arduino-1.8.5/hardware/tools/avr/avr/include/stdio.h" 3
extern int ungetc(int __c, FILE *__stream);
# 824 "/home/yvonne/Downloads/arduino-1.8.5/hardware/tools/avr/avr/include/stdio.h" 3
extern char *fgets(char *__str, int __size, FILE *__stream);






extern char *gets(char *__str);
# 842 "/home/yvonne/Downloads/arduino-1.8.5/hardware/tools/avr/avr/include/stdio.h" 3
extern size_t fread(void *__ptr, size_t __size, size_t __nmemb,
        FILE *__stream);




extern void clearerr(FILE *__stream);
# 859 "/home/yvonne/Downloads/arduino-1.8.5/hardware/tools/avr/avr/include/stdio.h" 3
extern int feof(FILE *__stream);
# 870 "/home/yvonne/Downloads/arduino-1.8.5/hardware/tools/avr/avr/include/stdio.h" 3
extern int ferror(FILE *__stream);






extern int vfscanf(FILE *__stream, const char *__fmt, va_list __ap);




extern int vfscanf_P(FILE *__stream, const char *__fmt, va_list __ap);







extern int fscanf(FILE *__stream, const char *__fmt, ...);




extern int fscanf_P(FILE *__stream, const char *__fmt, ...);






extern int scanf(const char *__fmt, ...);




extern int scanf_P(const char *__fmt, ...);







extern int vscanf(const char *__fmt, va_list __ap);







extern int sscanf(const char *__buf, const char *__fmt, ...);




extern int sscanf_P(const char *__buf, const char *__fmt, ...);
# 940 "/home/yvonne/Downloads/arduino-1.8.5/hardware/tools/avr/avr/include/stdio.h" 3
static __inline__ int fflush(FILE *stream __attribute__((unused)))
{
 return 0;
}






__extension__ typedef long long fpos_t;
extern int fgetpos(FILE *stream, fpos_t *pos);
extern FILE *fopen(const char *path, const char *mode);
extern FILE *freopen(const char *path, const char *mode, FILE *stream);
extern FILE *fdopen(int, const char *);
extern int fseek(FILE *stream, long offset, int whence);
extern int fsetpos(FILE *stream, fpos_t *pos);
extern long ftell(FILE *stream);
extern int fileno(FILE *);
extern void perror(const char *s);
extern int remove(const char *pathname);
extern int rename(const char *oldpath, const char *newpath);
extern void rewind(FILE *stream);
extern void setbuf(FILE *stream, char *buf);
extern int setvbuf(FILE *stream, char *buf, int mode, size_t size);
extern FILE *tmpfile(void);
extern char *tmpnam (char *s);



}
# 25 "/home/yvonne/Downloads/arduino-1.8.5/hardware/arduino/avr/cores/arduino/Print.h" 2


# 1 "/home/yvonne/Downloads/arduino-1.8.5/hardware/arduino/avr/cores/arduino/Printable.h" 1
# 25 "/home/yvonne/Downloads/arduino-1.8.5/hardware/arduino/avr/cores/arduino/Printable.h"
class Print;







class Printable
{
  public:
    virtual size_t printTo(Print& p) const = 0;
};
# 28 "/home/yvonne/Downloads/arduino-1.8.5/hardware/arduino/avr/cores/arduino/Print.h" 2
# 37 "/home/yvonne/Downloads/arduino-1.8.5/hardware/arduino/avr/cores/arduino/Print.h"
class Print
{
  private:
    int write_error;
    size_t printNumber(unsigned long, uint8_t);
    size_t printFloat(double, uint8_t);
  protected:
    void setWriteError(int err = 1) { write_error = err; }
  public:
    Print() : write_error(0) {}

    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == __null) return 0;
      return write((const uint8_t *)str, strlen(str));
    }
    virtual size_t write(const uint8_t *buffer, size_t size);
    size_t write(const char *buffer, size_t size) {
      return write((const uint8_t *)buffer, size);
    }



    virtual int availableForWrite() { return 0; }

    size_t print(const __FlashStringHelper *);
    size_t print(const String &);
    size_t print(const char[]);
    size_t print(char);
    size_t print(unsigned char, int = 10);
    size_t print(int, int = 10);
    size_t print(unsigned int, int = 10);
    size_t print(long, int = 10);
    size_t print(unsigned long, int = 10);
    size_t print(double, int = 2);
    size_t print(const Printable&);

    size_t println(const __FlashStringHelper *);
    size_t println(const String &s);
    size_t println(const char[]);
    size_t println(char);
    size_t println(unsigned char, int = 10);
    size_t println(int, int = 10);
    size_t println(unsigned int, int = 10);
    size_t println(long, int = 10);
    size_t println(unsigned long, int = 10);
    size_t println(double, int = 2);
    size_t println(const Printable&);
    size_t println(void);

    virtual void flush() { }
};
# 27 "/home/yvonne/Downloads/arduino-1.8.5/hardware/arduino/avr/cores/arduino/Stream.h" 2
# 41 "/home/yvonne/Downloads/arduino-1.8.5/hardware/arduino/avr/cores/arduino/Stream.h"
enum LookaheadMode{
    SKIP_ALL,
    SKIP_NONE,
    SKIP_WHITESPACE
};



class Stream : public Print
{
  protected:
    unsigned long _timeout;
    unsigned long _startMillis;
    int timedRead();
    int timedPeek();
    int peekNextDigit(LookaheadMode lookahead, bool detectDecimal);

  public:
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;

    Stream() {_timeout=1000;}



  void setTimeout(unsigned long timeout);
  unsigned long getTimeout(void) { return _timeout; }

  bool find(char *target);
  bool find(uint8_t *target) { return find ((char *)target); }


  bool find(char *target, size_t length);
  bool find(uint8_t *target, size_t length) { return find ((char *)target, length); }


  bool find(char target) { return find (&target, 1); }

  bool findUntil(char *target, char *terminator);
  bool findUntil(uint8_t *target, char *terminator) { return findUntil((char *)target, terminator); }

  bool findUntil(char *target, size_t targetLen, char *terminate, size_t termLen);
  bool findUntil(uint8_t *target, size_t targetLen, char *terminate, size_t termLen) {return findUntil((char *)target, targetLen, terminate, termLen); }

  long parseInt(LookaheadMode lookahead = SKIP_ALL, char ignore = '\x01');






  float parseFloat(LookaheadMode lookahead = SKIP_ALL, char ignore = '\x01');


  size_t readBytes( char *buffer, size_t length);
  size_t readBytes( uint8_t *buffer, size_t length) { return readBytes((char *)buffer, length); }



  size_t readBytesUntil( char terminator, char *buffer, size_t length);
  size_t readBytesUntil( char terminator, uint8_t *buffer, size_t length) { return readBytesUntil(terminator, (char *)buffer, length); }




  String readString();
  String readStringUntil(char terminator);

  protected:
  long parseInt(char ignore) { return parseInt(SKIP_ALL, ignore); }
  float parseFloat(char ignore) { return parseFloat(SKIP_ALL, ignore); }




  struct MultiTarget {
    const char *str;
    size_t len;
    size_t index;
  };



  int findMulti(struct MultiTarget *targets, int tCount);
};
# 30 "/home/yvonne/Downloads/arduino-1.8.5/hardware/arduino/avr/cores/arduino/HardwareSerial.h" 2
# 59 "/home/yvonne/Downloads/arduino-1.8.5/hardware/arduino/avr/cores/arduino/HardwareSerial.h"
typedef uint8_t tx_buffer_index_t;




typedef uint8_t rx_buffer_index_t;
# 93 "/home/yvonne/Downloads/arduino-1.8.5/hardware/arduino/avr/cores/arduino/HardwareSerial.h"
class HardwareSerial : public Stream
{
  protected:
    volatile uint8_t * const _ubrrh;
    volatile uint8_t * const _ubrrl;
    volatile uint8_t * const _ucsra;
    volatile uint8_t * const _ucsrb;
    volatile uint8_t * const _ucsrc;
    volatile uint8_t * const _udr;

    bool _written;

    volatile rx_buffer_index_t _rx_buffer_head;
    volatile rx_buffer_index_t _rx_buffer_tail;
    volatile tx_buffer_index_t _tx_buffer_head;
    volatile tx_buffer_index_t _tx_buffer_tail;




    unsigned char _rx_buffer[64];
    unsigned char _tx_buffer[64];

  public:
    inline HardwareSerial(
      volatile uint8_t *ubrrh, volatile uint8_t *ubrrl,
      volatile uint8_t *ucsra, volatile uint8_t *ucsrb,
      volatile uint8_t *ucsrc, volatile uint8_t *udr);
    void begin(unsigned long baud) { begin(baud, 0x06); }
    void begin(unsigned long, uint8_t);
    void end();
    virtual int available(void);
    virtual int peek(void);
    virtual int read(void);
    virtual int availableForWrite(void);
    virtual void flush(void);
    virtual size_t write(uint8_t);
    inline size_t write(unsigned long n) { return write((uint8_t)n); }
    inline size_t write(long n) { return write((uint8_t)n); }
    inline size_t write(unsigned int n) { return write((uint8_t)n); }
    inline size_t write(int n) { return write((uint8_t)n); }
    using Print::write;
    operator bool() { return true; }


    inline void _rx_complete_irq(void);
    void _tx_udr_empty_irq(void);
};


  extern HardwareSerial Serial;
# 159 "/home/yvonne/Downloads/arduino-1.8.5/hardware/arduino/avr/cores/arduino/HardwareSerial.h"
extern void serialEventRun(void) __attribute__((weak));
# 233 "/home/yvonne/Downloads/arduino-1.8.5/hardware/arduino/avr/cores/arduino/Arduino.h" 2
# 1 "/home/yvonne/Downloads/arduino-1.8.5/hardware/arduino/avr/cores/arduino/USBAPI.h" 1
# 25 "/home/yvonne/Downloads/arduino-1.8.5/hardware/arduino/avr/cores/arduino/USBAPI.h"
# 1 "/home/yvonne/Downloads/arduino-1.8.5/hardware/tools/avr/avr/include/avr/eeprom.h" 1 3
# 50 "/home/yvonne/Downloads/arduino-1.8.5/hardware/tools/avr/avr/include/avr/eeprom.h" 3
# 1 "/home/yvonne/Downloads/arduino-1.8.5/hardware/tools/avr/lib/gcc/avr/4.9.2/include/stddef.h" 1 3 4
# 147 "/home/yvonne/Downloads/arduino-1.8.5/hardware/tools/avr/lib/gcc/avr/4.9.2/include/stddef.h" 3 4
typedef int ptrdiff_t;
# 422 "/home/yvonne/Downloads/arduino-1.8.5/hardware/tools/avr/lib/gcc/avr/4.9.2/include/stddef.h" 3 4
typedef struct {
  long long __max_align_ll __attribute__((__aligned__(__alignof__(long long))));
  long double __max_align_ld __attribute__((__aligned__(__alignof__(long double))));
} max_align_t;






  typedef decltype(nullptr) nullptr_t;
# 51 "/home/yvonne/Downloads/arduino-1.8.5/hardware/tools/avr/avr/include/avr/eeprom.h" 2 3
# 92 "/home/yvonne/Downloads/arduino-1.8.5/hardware/tools/avr/avr/include/avr/eeprom.h" 3
extern "C" {
# 137 "/home/yvonne/Downloads/arduino-1.8.5/hardware/tools/avr/avr/include/avr/eeprom.h" 3
uint8_t eeprom_read_byte (const uint8_t *__p) __attribute__((__pure__));




uint16_t eeprom_read_word (const uint16_t *__p) __attribute__((__pure__));




uint32_t eeprom_read_dword (const uint32_t *__p) __attribute__((__pure__));




float eeprom_read_float (const float *__p) __attribute__((__pure__));





void eeprom_read_block (void *__dst, const void *__src, size_t __n);





void eeprom_write_byte (uint8_t *__p, uint8_t __value);




void eeprom_write_word (uint16_t *__p, uint16_t __value);




void eeprom_write_dword (uint32_t *__p, uint32_t __value);




void eeprom_write_float (float *__p, float __value);





void eeprom_write_block (const void *__src, void *__dst, size_t __n);





void eeprom_update_byte (uint8_t *__p, uint8_t __value);




void eeprom_update_word (uint16_t *__p, uint16_t __value);




void eeprom_update_dword (uint32_t *__p, uint32_t __value);




void eeprom_update_float (float *__p, float __value);





void eeprom_update_block (const void *__src, void *__dst, size_t __n);
# 241 "/home/yvonne/Downloads/arduino-1.8.5/hardware/tools/avr/avr/include/avr/eeprom.h" 3
}
# 26 "/home/yvonne/Downloads/arduino-1.8.5/hardware/arduino/avr/cores/arduino/USBAPI.h" 2

# 1 "/home/yvonne/Downloads/arduino-1.8.5/hardware/tools/avr/avr/include/util/delay.h" 1 3
# 45 "/home/yvonne/Downloads/arduino-1.8.5/hardware/tools/avr/avr/include/util/delay.h" 3
# 1 "/home/yvonne/Downloads/arduino-1.8.5/hardware/tools/avr/avr/include/util/delay_basic.h" 1 3
# 40 "/home/yvonne/Downloads/arduino-1.8.5/hardware/tools/avr/avr/include/util/delay_basic.h" 3
static __inline__ void _delay_loop_1(uint8_t __count) __attribute__((__always_inline__));
static __inline__ void _delay_loop_2(uint16_t __count) __attribute__((__always_inline__));
# 80 "/home/yvonne/Downloads/arduino-1.8.5/hardware/tools/avr/avr/include/util/delay_basic.h" 3
void
_delay_loop_1(uint8_t __count)
{
 __asm__ volatile (
  "1: dec %0" "\n\t"
  "brne 1b"
  : "=r" (__count)
  : "0" (__count)
 );
}
# 102 "/home/yvonne/Downloads/arduino-1.8.5/hardware/tools/avr/avr/include/util/delay_basic.h" 3
void
_delay_loop_2(uint16_t __count)
{
 __asm__ volatile (
  "1: sbiw %0,1" "\n\t"
  "brne 1b"
  : "=w" (__count)
  : "0" (__count)
 );
}
# 46 "/home/yvonne/Downloads/arduino-1.8.5/hardware/tools/avr/avr/include/util/delay.h" 2 3
# 86 "/home/yvonne/Downloads/arduino-1.8.5/hardware/tools/avr/avr/include/util/delay.h" 3
static __inline__ void _delay_us(double __us) __attribute__((__always_inline__));
static __inline__ void _delay_ms(double __ms) __attribute__((__always_inline__));
# 165 "/home/yvonne/Downloads/arduino-1.8.5/hardware/tools/avr/avr/include/util/delay.h" 3
void
_delay_ms(double __ms)
{
 double __tmp ;



 uint32_t __ticks_dc;
 extern void __builtin_avr_delay_cycles(unsigned long);
 __tmp = ((16000000UL) / 1e3) * __ms;
# 184 "/home/yvonne/Downloads/arduino-1.8.5/hardware/tools/avr/avr/include/util/delay.h" 3
  __ticks_dc = (uint32_t)(ceil(fabs(__tmp)));


 __builtin_avr_delay_cycles(__ticks_dc);
# 210 "/home/yvonne/Downloads/arduino-1.8.5/hardware/tools/avr/avr/include/util/delay.h" 3
}
# 254 "/home/yvonne/Downloads/arduino-1.8.5/hardware/tools/avr/avr/include/util/delay.h" 3
void
_delay_us(double __us)
{
 double __tmp ;



 uint32_t __ticks_dc;
 extern void __builtin_avr_delay_cycles(unsigned long);
 __tmp = ((16000000UL) / 1e6) * __us;
# 273 "/home/yvonne/Downloads/arduino-1.8.5/hardware/tools/avr/avr/include/util/delay.h" 3
  __ticks_dc = (uint32_t)(ceil(fabs(__tmp)));


 __builtin_avr_delay_cycles(__ticks_dc);
# 299 "/home/yvonne/Downloads/arduino-1.8.5/hardware/tools/avr/avr/include/util/delay.h" 3
}
# 28 "/home/yvonne/Downloads/arduino-1.8.5/hardware/arduino/avr/cores/arduino/USBAPI.h" 2

typedef unsigned char u8;
typedef unsigned short u16;
typedef unsigned long u32;

# 1 "/home/yvonne/Downloads/arduino-1.8.5/hardware/arduino/avr/cores/arduino/Arduino.h" 1
# 34 "/home/yvonne/Downloads/arduino-1.8.5/hardware/arduino/avr/cores/arduino/USBAPI.h" 2
# 234 "/home/yvonne/Downloads/arduino-1.8.5/hardware/arduino/avr/cores/arduino/Arduino.h" 2




uint16_t makeWord(uint16_t w);
uint16_t makeWord(byte h, byte l);



unsigned long pulseIn(uint8_t pin, uint8_t state, unsigned long timeout = 1000000L);
unsigned long pulseInLong(uint8_t pin, uint8_t state, unsigned long timeout = 1000000L);

void tone(uint8_t _pin, unsigned int frequency, unsigned long duration = 0);
void noTone(uint8_t _pin);


long random(long);
long random(long, long);
void randomSeed(unsigned long);
long map(long, long, long, long, long);



# 1 "/home/yvonne/Downloads/arduino-1.8.5/hardware/arduino/avr/variants/standard/pins_arduino.h" 1
# 43 "/home/yvonne/Downloads/arduino-1.8.5/hardware/arduino/avr/variants/standard/pins_arduino.h"
static const uint8_t SS = (10);
static const uint8_t MOSI = (11);
static const uint8_t MISO = (12);
static const uint8_t SCK = (13);




static const uint8_t SDA = (18);
static const uint8_t SCL = (19);
# 65 "/home/yvonne/Downloads/arduino-1.8.5/hardware/arduino/avr/variants/standard/pins_arduino.h"
static const uint8_t A0 = (14);
static const uint8_t A1 = (15);
static const uint8_t A2 = (16);
static const uint8_t A3 = (17);
static const uint8_t A4 = (18);
static const uint8_t A5 = (19);
static const uint8_t A6 = (20);
static const uint8_t A7 = (21);
# 258 "/home/yvonne/Downloads/arduino-1.8.5/hardware/arduino/avr/cores/arduino/Arduino.h" 2
# 52 "/home/yvonne/water_depth/mcp_can_dfs.h" 2
# 1 "/home/yvonne/water_depth/SPI.h" 1
# 72 "/home/yvonne/water_depth/SPI.h"
class SPISettings {
public:
  SPISettings(uint32_t clock, uint8_t bitOrder, uint8_t dataMode) {
    if (__builtin_constant_p(clock)) {
      init_AlwaysInline(clock, bitOrder, dataMode);
    } else {
      init_MightInline(clock, bitOrder, dataMode);
    }
  }
  SPISettings() {
    init_AlwaysInline(4000000, 1, 0x00);
  }
private:
  void init_MightInline(uint32_t clock, uint8_t bitOrder, uint8_t dataMode) {
    init_AlwaysInline(clock, bitOrder, dataMode);
  }
  void init_AlwaysInline(uint32_t clock, uint8_t bitOrder, uint8_t dataMode)
    __attribute__((__always_inline__)) {
# 107 "/home/yvonne/water_depth/SPI.h"
    uint8_t clockDiv;





    if (__builtin_constant_p(clock)) {
      if (clock >= 16000000UL / 2) {
        clockDiv = 0;
      } else if (clock >= 16000000UL / 4) {
        clockDiv = 1;
      } else if (clock >= 16000000UL / 8) {
        clockDiv = 2;
      } else if (clock >= 16000000UL / 16) {
        clockDiv = 3;
      } else if (clock >= 16000000UL / 32) {
        clockDiv = 4;
      } else if (clock >= 16000000UL / 64) {
        clockDiv = 5;
      } else {
        clockDiv = 6;
      }
    } else {
      uint32_t clockSetting = 16000000UL / 2;
      clockDiv = 0;
      while (clockDiv < 6 && clock < clockSetting) {
        clockSetting /= 2;
        clockDiv++;
      }
    }


    if (clockDiv == 6)
    clockDiv = 7;


    clockDiv ^= 0x1;


    spcr = (1 << (6)) | (1 << (4)) | ((bitOrder == 0) ? (1 << (5)) : 0) |
      (dataMode & 0x0C) | ((clockDiv >> 1) & 0x03);
    spsr = clockDiv & 0x01;
  }
  uint8_t spcr;
  uint8_t spsr;
  friend class SPIClass;
};


class SPIClass {
public:

  static void begin();






  static void usingInterrupt(uint8_t interruptNumber);

  static void notUsingInterrupt(uint8_t interruptNumber);
# 178 "/home/yvonne/water_depth/SPI.h"
  inline static void beginTransaction(SPISettings settings) {
    if (interruptMode > 0) {
      uint8_t sreg = (*(volatile uint8_t *)((0x3F) + 0x20));
      __asm__ __volatile__ ("cli" ::: "memory");


      if (interruptMode == 1) {
        interruptSave = (*(volatile uint8_t *)((0x1D) + 0x20));
        (*(volatile uint8_t *)((0x1D) + 0x20)) &= ~interruptMask;
        (*(volatile uint8_t *)((0x3F) + 0x20)) = sreg;
      } else

      {
        interruptSave = sreg;
      }
    }
# 203 "/home/yvonne/water_depth/SPI.h"
    (*(volatile uint8_t *)((0x2C) + 0x20)) = settings.spcr;
    (*(volatile uint8_t *)((0x2D) + 0x20)) = settings.spsr;
  }


  inline static uint8_t transfer(uint8_t data) {
    (*(volatile uint8_t *)((0x2E) + 0x20)) = data;






    asm volatile("nop");
    while (!((*(volatile uint8_t *)((0x2D) + 0x20)) & (1 << (7)))) ;
    return (*(volatile uint8_t *)((0x2E) + 0x20));
  }
  inline static uint16_t transfer16(uint16_t data) {
    union { uint16_t val; struct { uint8_t lsb; uint8_t msb; }; } in, out;
    in.val = data;
    if (!((*(volatile uint8_t *)((0x2C) + 0x20)) & (1 << (5)))) {
      (*(volatile uint8_t *)((0x2E) + 0x20)) = in.msb;
      asm volatile("nop");
      while (!((*(volatile uint8_t *)((0x2D) + 0x20)) & (1 << (7)))) ;
      out.msb = (*(volatile uint8_t *)((0x2E) + 0x20));
      (*(volatile uint8_t *)((0x2E) + 0x20)) = in.lsb;
      asm volatile("nop");
      while (!((*(volatile uint8_t *)((0x2D) + 0x20)) & (1 << (7)))) ;
      out.lsb = (*(volatile uint8_t *)((0x2E) + 0x20));
    } else {
      (*(volatile uint8_t *)((0x2E) + 0x20)) = in.lsb;
      asm volatile("nop");
      while (!((*(volatile uint8_t *)((0x2D) + 0x20)) & (1 << (7)))) ;
      out.lsb = (*(volatile uint8_t *)((0x2E) + 0x20));
      (*(volatile uint8_t *)((0x2E) + 0x20)) = in.msb;
      asm volatile("nop");
      while (!((*(volatile uint8_t *)((0x2D) + 0x20)) & (1 << (7)))) ;
      out.msb = (*(volatile uint8_t *)((0x2E) + 0x20));
    }
    return out.val;
  }
  inline static void transfer(void *buf, size_t count) {
    if (count == 0) return;
    uint8_t *p = (uint8_t *)buf;
    (*(volatile uint8_t *)((0x2E) + 0x20)) = *p;
    while (--count > 0) {
      uint8_t out = *(p + 1);
      while (!((*(volatile uint8_t *)((0x2D) + 0x20)) & (1 << (7)))) ;
      uint8_t in = (*(volatile uint8_t *)((0x2E) + 0x20));
      (*(volatile uint8_t *)((0x2E) + 0x20)) = out;
      *p++ = in;
    }
    while (!((*(volatile uint8_t *)((0x2D) + 0x20)) & (1 << (7)))) ;
    *p = (*(volatile uint8_t *)((0x2E) + 0x20));
  }


  inline static void endTransaction(void) {
# 269 "/home/yvonne/water_depth/SPI.h"
    if (interruptMode > 0) {

      uint8_t sreg = (*(volatile uint8_t *)((0x3F) + 0x20));

      __asm__ __volatile__ ("cli" ::: "memory");

      if (interruptMode == 1) {
        (*(volatile uint8_t *)((0x1D) + 0x20)) = interruptSave;
        (*(volatile uint8_t *)((0x3F) + 0x20)) = sreg;
      } else

      {
        (*(volatile uint8_t *)((0x3F) + 0x20)) = interruptSave;
      }
    }
  }


  static void end();



  inline static void setBitOrder(uint8_t bitOrder) {
    if (bitOrder == 0) (*(volatile uint8_t *)((0x2C) + 0x20)) |= (1 << (5));
    else (*(volatile uint8_t *)((0x2C) + 0x20)) &= ~((1 << (5)));
  }


  inline static void setDataMode(uint8_t dataMode) {
    (*(volatile uint8_t *)((0x2C) + 0x20)) = ((*(volatile uint8_t *)((0x2C) + 0x20)) & ~0x0C) | dataMode;
  }


  inline static void setClockDivider(uint8_t clockDiv) {
    (*(volatile uint8_t *)((0x2C) + 0x20)) = ((*(volatile uint8_t *)((0x2C) + 0x20)) & ~0x03) | (clockDiv & 0x03);
    (*(volatile uint8_t *)((0x2D) + 0x20)) = ((*(volatile uint8_t *)((0x2D) + 0x20)) & ~0x01) | ((clockDiv >> 2) & 0x01);
  }



  inline static void attachInterrupt() { (*(volatile uint8_t *)((0x2C) + 0x20)) |= (1 << (7)); }
  inline static void detachInterrupt() { (*(volatile uint8_t *)((0x2C) + 0x20)) &= ~(1 << (7)); }

private:
  static uint8_t initialized;
  static uint8_t interruptMode;
  static uint8_t interruptMask;
  static uint8_t interruptSave;



};

extern SPIClass SPI;
# 53 "/home/yvonne/water_depth/mcp_can_dfs.h" 2
# 51 "/home/yvonne/water_depth/mcp_can.h" 2




class MCP_CAN
{
    private:

    byte ext_flg;

    unsigned long can_id;
    byte rtr;
    byte SPICS;
    SPIClass *pSPI;
    byte nReservedTx;





private:

    void mcp2515_reset(void);

    byte mcp2515_readRegister(const byte address);

    void mcp2515_readRegisterS(const byte address,
                        byte values[],
                               const byte n);
    void mcp2515_setRegister(const byte address,
                             const byte value);

    void mcp2515_setRegisterS(const byte address,
                              const byte values[],
                              const byte n);

    void mcp2515_initCANBuffers(void);

    void mcp2515_modifyRegister(const byte address,
                                const byte mask,
                                const byte data);

    byte mcp2515_readStatus(void);
    byte mcp2515_setCANCTRL_Mode(const byte newmode);
    byte mcp2515_configRate(const byte canSpeed, const byte clock);
    byte mcp2515_init(const byte canSpeed, const byte clock);

    void mcp2515_write_id( const byte mcp_addr,
                               const byte ext,
                               const unsigned long id );

    void mcp2515_read_id( const byte mcp_addr,
                                    byte* ext,
                                    unsigned long* id );

    void mcp2515_write_canMsg( const byte buffer_sidh_addr, unsigned long id, byte ext, byte rtr, byte len, volatile const byte *buf);
    void mcp2515_read_canMsg( const byte buffer_load_addr, volatile unsigned long *id, volatile byte *ext, volatile byte *rtr, volatile byte *len, volatile byte *buf);
    void mcp2515_start_transmit(const byte mcp_addr);
    byte mcp2515_getNextFreeTXBuf(byte *txbuf_n);
    byte mcp2515_isTXBufFree(byte *txbuf_n, byte iBuf);





    byte sendMsg(unsigned long id, byte ext, byte rtrBit, byte len, const byte *buf, bool wait_sent=true);

public:
    MCP_CAN(byte _CS=0);
    void init_CS(byte _CS);
    void setSPI(SPIClass *_pSPI) { pSPI=_pSPI; }
    void enableTxInterrupt(bool enable=true);
    void reserveTxBuffers(byte nTxBuf=0) { nReservedTx=(nTxBuf<(3)?nTxBuf:(3)-1); }
    byte getLastTxBuffer() { return (3)-1; }

    byte begin(byte speedset, const byte clockset = 1);
    byte init_Mask(byte num, byte ext, unsigned long ulData);
    byte init_Filt(byte num, byte ext, unsigned long ulData);
    byte sendMsgBuf(unsigned long id, byte ext, byte rtrBit, byte len, const byte *buf, bool wait_sent=true);
    byte sendMsgBuf(unsigned long id, byte ext, byte len, const byte *buf, bool wait_sent=true);
    byte readMsgBuf(byte *len, byte *buf);
    byte readMsgBufID(unsigned long *ID, byte *len, byte *buf);
    byte checkReceive(void);
    byte checkError(void);
    unsigned long getCanId(void);
    byte isRemoteRequest(void);
    byte isExtendedFrame(void);

    byte readMsgBufID(byte status, volatile unsigned long *id, volatile byte *ext, volatile byte *rtr, volatile byte *len, volatile byte *buf);
    byte trySendMsgBuf(unsigned long id, byte ext, byte rtrBit, byte len, const byte *buf, byte iTxBuf=0xff);
    byte sendMsgBuf(byte status, unsigned long id, byte ext, byte rtrBit, byte len, volatile const byte *buf);
    inline byte trySendExtMsgBuf(unsigned long id, byte len, const byte *buf, byte iTxBuf=0xff) {
      return trySendMsgBuf(id,1,0,len,buf,iTxBuf);
    }
    inline byte sendExtMsgBuf(byte status, unsigned long id, byte len, volatile const byte *buf) {
      return sendMsgBuf(status,id,1,0,len,buf);
    }
    void clearBufferTransmitIfFlags(byte flags=0);
    byte readRxTxStatus(void);
    byte checkClearRxStatus(byte *status);
    byte checkClearTxStatus(byte *status, byte iTxBuf=0xff);

};
# 49 "/home/yvonne/water_depth/mcp_can.cpp" 2
# 61 "/home/yvonne/water_depth/mcp_can.cpp"
byte txCtrlReg(byte i) {
  switch (i) {
    case 0: return 0x30;
    case 1: return 0x40;
    case 2: return 0x50;
  }
  return 0x50;
}





byte statusToTxBuffer(byte status)
{
  switch ( status ) {
    case 0x04 : return 0;
    case 0x08 : return 1;
    case 0x10 : return 2;
  }

  return 0xff;
}





byte statusToTxSidh(byte status)
{
  switch ( status ) {
    case 0x04 : return 0x31;
    case 0x08 : return 0x41;
    case 0x10 : return 0x51;
  }

  return 0;
}





byte txSidhToRTS(byte sidh) {
  switch (sidh) {
    case 0x31: return 0x81;
    case 0x41: return 0x82;
    case 0x51: return 0x84;
  }
  return 0;
}





byte txSidhToTxLoad(byte sidh) {
  switch (sidh) {
    case 0x31: return 0x40;
    case 0x41: return 0x42;
    case 0x51: return 0x44;
  }
  return 0;
}





byte txIfFlag(byte i) {
  switch (i) {
    case 0: return 0x04;
    case 1: return 0x08;
    case 2: return 0x10;
  }
  return 0;
}





byte txStatusPendingFlag(byte i) {
  switch (i) {
    case 0: return (0x04);
    case 1: return (0x10);
    case 2: return (0x40);
  }
  return 0xff;
}





void MCP_CAN::mcp2515_reset(void)
{

    pSPI->beginTransaction(SPISettings(10000000, 1, 0x00));

    digitalWrite(SPICS, 0x0);
    pSPI->transfer(0xC0);
    digitalWrite(SPICS, 0x1);

    pSPI->endTransaction();

    delay(10);
}





byte MCP_CAN::mcp2515_readRegister(const byte address)
{
    byte ret;


    pSPI->beginTransaction(SPISettings(10000000, 1, 0x00));

    digitalWrite(SPICS, 0x0);
    pSPI->transfer(0x03);
    pSPI->transfer(address);
    ret = pSPI->transfer(0x00);
    digitalWrite(SPICS, 0x1);

    pSPI->endTransaction();


    return ret;
}





void MCP_CAN::mcp2515_readRegisterS(const byte address, byte values[], const byte n)
{
    byte i;

    pSPI->beginTransaction(SPISettings(10000000, 1, 0x00));

    digitalWrite(SPICS, 0x0);
    pSPI->transfer(0x03);
    pSPI->transfer(address);

    for (i=0; i<n && i<(8); i++)
    {
      values[i] = pSPI->transfer(0x00);
    }
    digitalWrite(SPICS, 0x1);

    pSPI->endTransaction();

}





void MCP_CAN::mcp2515_setRegister(const byte address, const byte value)
{

    pSPI->beginTransaction(SPISettings(10000000, 1, 0x00));

    digitalWrite(SPICS, 0x0);
    pSPI->transfer(0x02);
    pSPI->transfer(address);
    pSPI->transfer(value);
    digitalWrite(SPICS, 0x1);

    pSPI->endTransaction();

}





void MCP_CAN::mcp2515_setRegisterS(const byte address, const byte values[], const byte n)
{
    byte i;

    pSPI->beginTransaction(SPISettings(10000000, 1, 0x00));

    digitalWrite(SPICS, 0x0);
    pSPI->transfer(0x02);
    pSPI->transfer(address);

    for (i=0; i<n; i++)
    {
      pSPI->transfer(values[i]);
    }
    digitalWrite(SPICS, 0x1);

    pSPI->endTransaction();

}





void MCP_CAN::mcp2515_modifyRegister(const byte address, const byte mask, const byte data)
{

    pSPI->beginTransaction(SPISettings(10000000, 1, 0x00));

    digitalWrite(SPICS, 0x0);
    pSPI->transfer(0x05);
    pSPI->transfer(address);
    pSPI->transfer(mask);
    pSPI->transfer(data);
    digitalWrite(SPICS, 0x1);

    pSPI->endTransaction();

}





byte MCP_CAN::mcp2515_readStatus(void)
{
    byte i;

    pSPI->beginTransaction(SPISettings(10000000, 1, 0x00));

    digitalWrite(SPICS, 0x0);
    pSPI->transfer(0xA0);
    i = pSPI->transfer(0x00);
    digitalWrite(SPICS, 0x1);

    pSPI->endTransaction();


    return i;
}





byte MCP_CAN::mcp2515_setCANCTRL_Mode(const byte newmode)
{
    byte i;

    mcp2515_modifyRegister(0x0F, 0xE0, newmode);

    i = mcp2515_readRegister(0x0F);
    i &= 0xE0;

    if ( i == newmode )
    {
      return (0);
    }

    return (1);
}





byte MCP_CAN::mcp2515_configRate(const byte canSpeed, const byte clock)
{
  byte set, cfg1, cfg2, cfg3;
  set = 1;
  switch (clock)
  {
    case (1) :
      switch (canSpeed)
      {
        case (1):
          cfg1 = (0x3F);
          cfg2 = (0xFF);
          cfg3 = (0x87);
          break;

        case (2):
          cfg1 = (0x1F);
          cfg2 = (0xFF);
          cfg3 = (0x87);
          break;

        case (3):
          cfg1 = (0x0F);
          cfg2 = (0xFF);
          cfg3 = (0x87);
          break;

        case (4):
          cfg1 = (0X0F);
          cfg2 = (0XBA);
          cfg3 = (0X07);
          break;

        case (5):
          cfg1 = (0x0F);
          cfg2 = (0xF1);
          cfg3 = (0x85);
          break;

        case (6):
          cfg1 = (0x09);
          cfg2 = (0xBE);
          cfg3 = (0x07);
          break;

        case (7):
          cfg1 = (0x07);
          cfg2 = (0xFF);
          cfg3 = (0x87);
          break;

        case (8):
          cfg1 = (0x07);
          cfg2 = (0xFA);
          cfg3 = (0x87);
          break;

        case (9):
          cfg1 = (0x03);
          cfg2 = (0xFF);
          cfg3 = (0x87);
          break;

        case (10):
          cfg1 = (0x03);
          cfg2 = (0xBE);
          cfg3 = (0x07);
          break;

        case (11):
          cfg1 = (0x03);
          cfg2 = (0xAD);
          cfg3 = (0x07);
          break;

        case (12):
          cfg1 = (0x03);
          cfg2 = (0xFA);
          cfg3 = (0x87);
          break;

        case (13):
          cfg1 = (0x03);
          cfg2 = (0xF0);
          cfg3 = (0x86);
          break;

        case (14):
          cfg1 = (0x01);
          cfg2 = (0xFA);
          cfg3 = (0x87);
          break;

        case (15):
          cfg1 = (0x41);
          cfg2 = (0xF1);
          cfg3 = (0x85);
          break;

        case (16):
          cfg1 = (0x00);
          cfg2 = (0xF0);
          cfg3 = (0x86);
          break;

        case (17):
          cfg1 = (0x00);
          cfg2 = (0xA0);
          cfg3 = (0x04);
          break;

        case (18):
          cfg1 = (0x00);
          cfg2 = (0xD0);
          cfg3 = (0x82);
          break;

        default:
          set = 0;
          break;
      }
      break;

    case (2) :
      switch (canSpeed)
      {
        case (1) :
          cfg1 = (0x1f);
          cfg2 = (0xbf);
          cfg3 = (0x07);
          break;

        case (2) :
          cfg1 = (0x0f);
          cfg2 = (0xbf);
          cfg3 = (0x07);
          break;

        case (3) :
          cfg1 = (0x07);
          cfg2 = (0xbf);
          cfg3 = (0x07);
          break;

        case (5) :
          cfg1 = (0x07);
          cfg2 = (0xa4);
          cfg3 = (0x04);
          break;

        case (7) :
          cfg1 = (0x03);
          cfg2 = (0xbf);
          cfg3 = (0x07);
          break;

        case (8) :
          cfg1 = (0x03);
          cfg2 = (0xb4);
          cfg3 = (0x06);
          break;

        case (9) :
          cfg1 = (0x01);
          cfg2 = (0xbf);
          cfg3 = (0x07);
          break;

        case (12) :
          cfg1 = (0x01);
          cfg2 = (0xb4);
          cfg3 = (0x06);
          break;

        case (13) :
          cfg1 = (0x01);
          cfg2 = (0xb1);
          cfg3 = (0x05);
          break;

        case (14) :
          cfg1 = (0x00);
          cfg2 = (0xb4);
          cfg3 = (0x06);
          break;

        case (15) :
          cfg1 = (0x00);
          cfg2 = (0xb1);
          cfg3 = (0x05);
          break;

        case (16) :
          cfg1 = (0x00);
          cfg2 = (0x90);
          cfg3 = (0x02);
          break;

        case (18) :
          cfg1 = (0x00);
          cfg2 = (0x80);
          cfg3 = (0x00);
          break;

        default:
          set = 0;
          break;
      }
      break;

    default:
      set = 0;
      break;
  }

  if (set) {
    mcp2515_setRegister(0x2A, cfg1);
    mcp2515_setRegister(0x29, cfg2);
    mcp2515_setRegister(0x28, cfg3);
    return (0);
  }
  else {
    return (1);
  }
}





void MCP_CAN::mcp2515_initCANBuffers(void)
{
    byte i, a1, a2, a3;

    a1 = 0x30;
    a2 = 0x40;
    a3 = 0x50;
    for (i = 0; i < 14; i++)
    {
      mcp2515_setRegister(a1, 0);
      mcp2515_setRegister(a2, 0);
      mcp2515_setRegister(a3, 0);
      a1++;
      a2++;
      a3++;
    }
    mcp2515_setRegister(0x60, 0);
    mcp2515_setRegister(0x70, 0);
}





byte MCP_CAN::mcp2515_init(const byte canSpeed, const byte clock)
{

    byte res;

    mcp2515_reset();

    res = mcp2515_setCANCTRL_Mode(0x80);
    if (res > 0)
    {

      Serial.print("Enter setting mode fail\r\n");



      return res;
    }

    Serial.print("Enter setting mode success \r\n");





    if (mcp2515_configRate(canSpeed, clock))
    {

      Serial.print("set rate fall!!\r\n");



      return res;
    }

    Serial.print("set rate success!!\r\n");




    if ( res == (0) ) {


      mcp2515_initCANBuffers();


      mcp2515_setRegister(0x2B, 0x01 | 0x02);
# 636 "/home/yvonne/water_depth/mcp_can.cpp"
      mcp2515_modifyRegister(0x60,
                             0x60 | (1<<2),
                             0x00 | (1<<2));
      mcp2515_modifyRegister(0x70, 0x60,
                             0x00);


      res = mcp2515_setCANCTRL_Mode(0x00);
      if (res)
      {

        Serial.print("Enter Normal Mode Fail!!\r\n");



        return res;
      }



      Serial.print("Enter Normal Mode Success!!\r\n");




    }
    return res;

}





void mcp2515_id_to_buf(const byte ext, const unsigned long id, byte *tbufdata)
{
  uint16_t canid;

  canid = (uint16_t)(id & 0x0FFFF);

  if ( ext == 1)
  {
    tbufdata[3] = (byte) (canid & 0xFF);
    tbufdata[2] = (byte) (canid >> 8);
    canid = (uint16_t)(id >> 16);
    tbufdata[1] = (byte) (canid & 0x03);
    tbufdata[1] += (byte) ((canid & 0x1C) << 3);
    tbufdata[1] |= 0x08;
    tbufdata[0] = (byte) (canid >> 5 );
  }
  else
  {
    tbufdata[0] = (byte) (canid >> 3 );
    tbufdata[1] = (byte) ((canid & 0x07 ) << 5);
    tbufdata[3] = 0;
    tbufdata[2] = 0;
  }
}





void MCP_CAN::mcp2515_write_id(const byte mcp_addr, const byte ext, const unsigned long id)
{
    byte tbufdata[4];

    mcp2515_id_to_buf(ext,id,tbufdata);
    mcp2515_setRegisterS(mcp_addr, tbufdata, 4);
}





void MCP_CAN::mcp2515_read_id(const byte mcp_addr, byte* ext, unsigned long* id)
{
    byte tbufdata[4];

    *ext = 0;
    *id = 0;

    mcp2515_readRegisterS(mcp_addr, tbufdata, 4);

    *id = (tbufdata[0] << 3) + (tbufdata[1] >> 5);

    if ( (tbufdata[1] & 0x08) == 0x08 )
    {

      *id = (*id << 2) + (tbufdata[1] & 0x03);
      *id = (*id << 8) + tbufdata[2];
      *id = (*id << 8) + tbufdata[3];
      *ext = 1;
    }
}






void MCP_CAN::mcp2515_write_canMsg(const byte buffer_sidh_addr, unsigned long id, byte ext, byte rtrBit, byte len, volatile const byte *buf)
{
  byte load_addr=txSidhToTxLoad(buffer_sidh_addr);

  byte tbufdata[4];
  byte dlc = len | ( rtrBit ? 0x40 : 0 ) ;
  byte i;

  mcp2515_id_to_buf(ext,id,tbufdata);


    pSPI->beginTransaction(SPISettings(10000000, 1, 0x00));

  digitalWrite(SPICS, 0x0);
  pSPI->transfer(load_addr);
  for (i = 0; i < 4; i++) pSPI->transfer(tbufdata[i]);
  pSPI->transfer(dlc);
  for (i = 0; i < len && i<(8); i++) pSPI->transfer(buf[i]);

  digitalWrite(SPICS, 0x1);

    pSPI->endTransaction();


  mcp2515_start_transmit( buffer_sidh_addr );

}





void MCP_CAN::mcp2515_read_canMsg( const byte buffer_load_addr, volatile unsigned long *id, volatile byte *ext, volatile byte *rtrBit, volatile byte *len, volatile byte *buf)
{
  byte tbufdata[4];
  byte i;

  digitalWrite(SPICS, 0x0);
  pSPI->transfer(buffer_load_addr);

  for (i = 0; i < 4; i++) tbufdata[i] = pSPI->transfer(0x00);

  *rtrBit=(tbufdata[3]&0x08 ? 1 : 0 );

  *id = (tbufdata[0] << 3) + (tbufdata[1] >> 5);

  if ( (tbufdata[1] & 0x08) == 0x08 )
  {

    *id = (*id << 2) + (tbufdata[1] & 0x03);
    *id = (*id << 8) + tbufdata[2];
    *id = (*id << 8) + tbufdata[3];
    *ext = 1;
  }

  *len=pSPI->transfer(0x00) & 0x0F;
  for (i = 0; i < *len && i<(8); i++) {
    buf[i] = pSPI->transfer(0x00);
  }

  digitalWrite(SPICS, 0x1);
}





void MCP_CAN::mcp2515_start_transmit(const byte mcp_addr)
{

    pSPI->beginTransaction(SPISettings(10000000, 1, 0x00));

  digitalWrite(SPICS, 0x0);
  pSPI->transfer(txSidhToRTS(mcp_addr));
  digitalWrite(SPICS, 0x1);

    pSPI->endTransaction();

}





byte MCP_CAN::mcp2515_isTXBufFree(byte *txbuf_n, byte iBuf)
{
  *txbuf_n = 0x00;

  if ( iBuf>=(3) ||
      (mcp2515_readStatus() & txStatusPendingFlag(iBuf))!=0 ) return (2);

  *txbuf_n = txCtrlReg(iBuf) + 1;
  mcp2515_modifyRegister(0x2C, txIfFlag(iBuf), 0);

  return (0);
}





byte MCP_CAN::mcp2515_getNextFreeTXBuf(byte *txbuf_n)
{
    byte status=mcp2515_readStatus() & (0x54);
    byte i;

    *txbuf_n = 0x00;

    if ( status==(0x54) ) return (2);


    for (i = 0; i < (3)-nReservedTx; i++)
    {
      if ( (status & txStatusPendingFlag(i) ) == 0 ) {
        *txbuf_n = txCtrlReg(i) + 1;
        mcp2515_modifyRegister(0x2C, txIfFlag(i), 0);
        return (0);
      }
    }

    return (2);
}





MCP_CAN::MCP_CAN(byte _CS) : nReservedTx(0)
{
  pSPI=&SPI; init_CS(_CS);
}





void MCP_CAN::init_CS(byte _CS)
{
  if (_CS == 0) return;
  SPICS = _CS;
  pinMode(SPICS, 0x1);
  digitalWrite(SPICS, 0x1);
}





byte MCP_CAN::begin(byte speedset, const byte clockset)
{
    pSPI->begin();
    byte res = mcp2515_init(speedset, clockset);
    return ((res == (0)) ? (0) : (1));
}





void MCP_CAN::enableTxInterrupt(bool enable)
{
  byte interruptStatus=mcp2515_readRegister(0x2B);

  if ( enable ) {
    interruptStatus |= 0x1C;
  } else {
    interruptStatus &= ~0x1C;
  }

  mcp2515_setRegister(0x2B, interruptStatus);
}





byte MCP_CAN::init_Mask(byte num, byte ext, unsigned long ulData)
{
    byte res = (0);

    Serial.print("Begin to set Mask!!\r\n");



    res = mcp2515_setCANCTRL_Mode(0x80);
    if (res > 0) {

        Serial.print("Enter setting mode fall\r\n");



        return res;
    }

    if (num == 0) {
        mcp2515_write_id(0x20, ext, ulData);

    }
    else if (num == 1) {
        mcp2515_write_id(0x24, ext, ulData);
    }
    else res = (1);

    res = mcp2515_setCANCTRL_Mode(0x00);
    if (res > 0) {

        Serial.print("Enter normal mode fall\r\n");



        return res;
    }

    Serial.print("set Mask success!!\r\n");



    return res;
}





byte MCP_CAN::init_Filt(byte num, byte ext, unsigned long ulData)
{
    byte res = (0);

    Serial.print("Begin to set Filter!!\r\n");



    res = mcp2515_setCANCTRL_Mode(0x80);
    if (res > 0)
    {

        Serial.print("Enter setting mode fall\r\n");



        return res;
    }

    switch ( num )
    {
      case 0:
        mcp2515_write_id(0x00, ext, ulData);
        break;

      case 1:
        mcp2515_write_id(0x04, ext, ulData);
        break;

      case 2:
        mcp2515_write_id(0x08, ext, ulData);
        break;

      case 3:
        mcp2515_write_id(0x10, ext, ulData);
        break;

      case 4:
        mcp2515_write_id(0x14, ext, ulData);
        break;

      case 5:
        mcp2515_write_id(0x18, ext, ulData);
        break;

      default:
        res = (1);
    }

    res = mcp2515_setCANCTRL_Mode(0x00);
    if (res > 0)
    {

        Serial.print("Enter normal mode fall\r\nSet filter fail!!\r\n");



        return res;
    }

    Serial.print("set Filter success!!\r\n");




    return res;
}






byte MCP_CAN::sendMsgBuf(byte status, unsigned long id, byte ext, byte rtrBit, byte len, volatile const byte *buf)
{
  byte txbuf_n=statusToTxSidh(status);

  if ( txbuf_n==0 ) return (2);

  mcp2515_modifyRegister(0x2C, status, 0);
  mcp2515_write_canMsg(txbuf_n, id, ext, rtrBit, len, buf);

  return (0);
}





byte MCP_CAN::trySendMsgBuf(unsigned long id, byte ext, byte rtrBit, byte len, const byte *buf, byte iTxBuf)
{
  byte txbuf_n;

  if ( iTxBuf<(3) ) {
    if ( mcp2515_isTXBufFree(&txbuf_n,iTxBuf) != (0) ) return (2);
  } else {
    if ( mcp2515_getNextFreeTXBuf(&txbuf_n) != (0) ) return (2);
  }

  mcp2515_write_canMsg(txbuf_n, id, ext, rtrBit, len, buf);

  return (0);
}





byte MCP_CAN::sendMsg(unsigned long id, byte ext, byte rtrBit, byte len, const byte *buf, bool wait_sent)
{
    byte res, res1, txbuf_n;
    uint16_t uiTimeOut = 0;

    can_id=id;
    ext_flg=ext;
    rtr=rtrBit;

    do {
        if (uiTimeOut > 0) delayMicroseconds(10);
        res = mcp2515_getNextFreeTXBuf(&txbuf_n);
        uiTimeOut++;
    } while (res == (2) && (uiTimeOut < 50));

    if (uiTimeOut == 50)
    {
        return (6);
    }
    mcp2515_write_canMsg(txbuf_n, id, ext, rtrBit, len, buf);

    if (wait_sent) {
      uiTimeOut = 0;
      do
      {
        if (uiTimeOut > 0) delayMicroseconds(10);
          uiTimeOut++;
          res1 = mcp2515_readRegister(txbuf_n - 1);
          res1 = res1 & 0x08;
      } while (res1 && (uiTimeOut < 50));

      if (uiTimeOut == 50)
      {
          return (7);
      }
    }

    return (0);

}





byte MCP_CAN::sendMsgBuf(unsigned long id, byte ext, byte rtrBit, byte len, const byte *buf, bool wait_sent)
{
    return sendMsg(id,ext,rtrBit,len,buf,wait_sent);
}





byte MCP_CAN::sendMsgBuf(unsigned long id, byte ext, byte len, const byte *buf, bool wait_sent)
{
    return sendMsg(id,ext,0,len,buf,wait_sent);
}






byte MCP_CAN::readMsgBuf(byte *len, byte buf[])
{
    return readMsgBufID(readRxTxStatus(),&can_id,&ext_flg,&rtr,len,buf);
}





byte MCP_CAN::readMsgBufID(unsigned long *ID, byte *len, byte buf[])
{
    return readMsgBufID(readRxTxStatus(),ID,&ext_flg,&rtr,len,buf);
}






byte MCP_CAN::readMsgBufID(byte status, volatile unsigned long *id, volatile byte *ext, volatile byte *rtrBit, volatile byte *len, volatile byte *buf)
{
  byte rc=(4);

  if ( status & 0x01 )
  {
    mcp2515_read_canMsg( 0x90, id, ext, rtrBit, len, buf);
    rc = (0);
  }
  else if ( status & 0x02 )
  {
    mcp2515_read_canMsg( 0x94, id, ext, rtrBit, len, buf);
    rc = (0);
  }

  if (rc==(0)) {
    rtr=*rtrBit;

    ext_flg=*ext;
    can_id=*id;
  } else {
    *len=0;
  }

  return rc;
}
# 1186 "/home/yvonne/water_depth/mcp_can.cpp"
byte MCP_CAN::readRxTxStatus(void)
{
  byte ret=( mcp2515_readStatus() & ( (0xA8) | (0x03) ) );
  ret=(ret & (0x08) ? 0x04 : 0) |
      (ret & (0x20) ? 0x08 : 0) |
      (ret & (0x80) ? 0x10 : 0) |
      (ret & (0x03));
  return ret;
}







byte MCP_CAN::checkClearRxStatus(byte *status)
{
  byte ret;

  ret = *status & 0x01; *status &= ~0x01;

  if ( ret==0 ) { ret = *status & 0x02; *status &= ~0x02; }

  return ret;
}







byte MCP_CAN::checkClearTxStatus(byte *status, byte iTxBuf)
{
  byte ret;

  if ( iTxBuf<(3) ) {
    ret = *status & txIfFlag(iTxBuf); *status &= ~txIfFlag(iTxBuf);
  } else {
    ret=0;
    for (byte i = 0; i < (3)-nReservedTx; i++) {
      ret = *status & txIfFlag(i);
      if ( ret!=0 ) {
        *status &= ~txIfFlag(i);
        return ret;
      }
    };
  }

  return ret;
}







void MCP_CAN::clearBufferTransmitIfFlags(byte flags)
{
  flags &= 0x1C;
  if ( flags==0 ) return;
  mcp2515_modifyRegister(0x2C, flags, 0);
}





byte MCP_CAN::checkReceive(void)
{
    byte res;
    res = mcp2515_readStatus();
    return ((res & (0x03))?(3):(4));
}





byte MCP_CAN::checkError(void)
{
    byte eflg = mcp2515_readRegister(0x2D);
    return ((eflg & (0xF8)) ? (5) : (0));
}





unsigned long MCP_CAN::getCanId(void)
{
    return can_id;
}





byte MCP_CAN::isRemoteRequest(void)
{
    return rtr;
}





byte MCP_CAN::isExtendedFrame(void)
{
    return ext_flg;
}
