
arduino.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000214  00800100  00001d8e  00001e22  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001d8e  00000000  00000000  00000094  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000000cf  00800314  00800314  00002036  2**0
                  ALLOC
  3 .comment      00000011  00000000  00000000  00002036  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00002048  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000458  00000000  00000000  00002088  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000c649  00000000  00000000  000024e0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00002556  00000000  00000000  0000eb29  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00002d54  00000000  00000000  0001107f  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000ba8  00000000  00000000  00013dd4  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000314d  00000000  00000000  0001497c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00004c79  00000000  00000000  00017ac9  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000003f0  00000000  00000000  0001c742  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 87 00 	jmp	0x10e	; 0x10e <__ctors_end>
       4:	0c 94 af 00 	jmp	0x15e	; 0x15e <__bad_interrupt>
       8:	0c 94 af 00 	jmp	0x15e	; 0x15e <__bad_interrupt>
       c:	0c 94 af 00 	jmp	0x15e	; 0x15e <__bad_interrupt>
      10:	0c 94 af 00 	jmp	0x15e	; 0x15e <__bad_interrupt>
      14:	0c 94 af 00 	jmp	0x15e	; 0x15e <__bad_interrupt>
      18:	0c 94 af 00 	jmp	0x15e	; 0x15e <__bad_interrupt>
      1c:	0c 94 af 00 	jmp	0x15e	; 0x15e <__bad_interrupt>
      20:	0c 94 af 00 	jmp	0x15e	; 0x15e <__bad_interrupt>
      24:	0c 94 af 00 	jmp	0x15e	; 0x15e <__bad_interrupt>
      28:	0c 94 af 00 	jmp	0x15e	; 0x15e <__bad_interrupt>
      2c:	0c 94 af 00 	jmp	0x15e	; 0x15e <__bad_interrupt>
      30:	0c 94 af 00 	jmp	0x15e	; 0x15e <__bad_interrupt>
      34:	0c 94 af 00 	jmp	0x15e	; 0x15e <__bad_interrupt>
      38:	0c 94 af 00 	jmp	0x15e	; 0x15e <__bad_interrupt>
      3c:	0c 94 af 00 	jmp	0x15e	; 0x15e <__bad_interrupt>
      40:	0c 94 c7 06 	jmp	0xd8e	; 0xd8e <__vector_16>
      44:	0c 94 af 00 	jmp	0x15e	; 0x15e <__bad_interrupt>
      48:	0c 94 b9 09 	jmp	0x1372	; 0x1372 <__vector_18>
      4c:	0c 94 eb 09 	jmp	0x13d6	; 0x13d6 <__vector_19>
      50:	0c 94 af 00 	jmp	0x15e	; 0x15e <__bad_interrupt>
      54:	0c 94 af 00 	jmp	0x15e	; 0x15e <__bad_interrupt>
      58:	0c 94 af 00 	jmp	0x15e	; 0x15e <__bad_interrupt>
      5c:	0c 94 af 00 	jmp	0x15e	; 0x15e <__bad_interrupt>
      60:	0c 94 af 00 	jmp	0x15e	; 0x15e <__bad_interrupt>
      64:	0c 94 af 00 	jmp	0x15e	; 0x15e <__bad_interrupt>
      68:	61 04       	cpc	r6, r1
      6a:	fa 03       	fmulsu	r23, r18
      6c:	65 04       	cpc	r6, r5
      6e:	fd 03       	fmulsu	r23, r21
      70:	00 04       	cpc	r0, r0
      72:	03 04       	cpc	r0, r3
      74:	07 04       	cpc	r0, r7
      76:	0a 04       	cpc	r0, r10
      78:	0d 04       	cpc	r0, r13
      7a:	10 04       	cpc	r1, r0
      7c:	13 04       	cpc	r1, r3
      7e:	16 04       	cpc	r1, r6
      80:	19 04       	cpc	r1, r9
      82:	1c 04       	cpc	r1, r12
      84:	1f 04       	cpc	r1, r15
      86:	23 04       	cpc	r2, r3
      88:	26 04       	cpc	r2, r6
      8a:	29 04       	cpc	r2, r9
      8c:	69 04       	cpc	r6, r9
      8e:	37 04       	cpc	r3, r7
      90:	3a 04       	cpc	r3, r10
      92:	5f 04       	cpc	r5, r15
      94:	3d 04       	cpc	r3, r13
      96:	5f 04       	cpc	r5, r15
      98:	41 04       	cpc	r4, r1
      9a:	44 04       	cpc	r4, r4
      9c:	48 04       	cpc	r4, r8
      9e:	5f 04       	cpc	r5, r15
      a0:	5f 04       	cpc	r5, r15
      a2:	4b 04       	cpc	r4, r11
      a4:	4f 04       	cpc	r4, r15
      a6:	52 04       	cpc	r5, r2
      a8:	56 04       	cpc	r5, r6
      aa:	59 04       	cpc	r5, r9
      ac:	5f 04       	cpc	r5, r15
      ae:	5c 04       	cpc	r5, r12

000000b0 <__trampolines_end>:
      b0:	00 00       	nop
      b2:	00 08       	sbc	r0, r0
      b4:	00 02       	muls	r16, r16
      b6:	01 00       	.word	0x0001	; ????
      b8:	00 03       	mulsu	r16, r16
      ba:	04 07       	cpc	r16, r20
	...

000000c4 <digital_pin_to_bit_mask_PGM>:
      c4:	01 02 04 08 10 20 40 80 01 02 04 08 10 20 01 02     ..... @...... ..
      d4:	04 08 10 20                                         ... 

000000d8 <digital_pin_to_port_PGM>:
      d8:	04 04 04 04 04 04 04 04 02 02 02 02 02 02 03 03     ................
      e8:	03 03 03 03                                         ....

000000ec <port_to_input_PGM>:
      ec:	00 00 00 00 23 00 26 00 29 00                       ....#.&.).

000000f6 <port_to_output_PGM>:
      f6:	00 00 00 00 25 00 28 00 2b 00                       ....%.(.+.

00000100 <port_to_mode_PGM>:
     100:	00 00 00 00 24 00 27 00 2a 00                       ....$.'.*.

0000010a <__ctors_start>:
     10a:	0e 02       	muls	r16, r30
     10c:	1b 0a       	sbc	r1, r27

0000010e <__ctors_end>:
     10e:	11 24       	eor	r1, r1
     110:	1f be       	out	0x3f, r1	; 63
     112:	cf ef       	ldi	r28, 0xFF	; 255
     114:	d8 e0       	ldi	r29, 0x08	; 8
     116:	de bf       	out	0x3e, r29	; 62
     118:	cd bf       	out	0x3d, r28	; 61

0000011a <__do_copy_data>:
     11a:	13 e0       	ldi	r17, 0x03	; 3
     11c:	a0 e0       	ldi	r26, 0x00	; 0
     11e:	b1 e0       	ldi	r27, 0x01	; 1
     120:	ee e8       	ldi	r30, 0x8E	; 142
     122:	fd e1       	ldi	r31, 0x1D	; 29
     124:	02 c0       	rjmp	.+4      	; 0x12a <__do_copy_data+0x10>
     126:	05 90       	lpm	r0, Z+
     128:	0d 92       	st	X+, r0
     12a:	a4 31       	cpi	r26, 0x14	; 20
     12c:	b1 07       	cpc	r27, r17
     12e:	d9 f7       	brne	.-10     	; 0x126 <__do_copy_data+0xc>

00000130 <__do_clear_bss>:
     130:	23 e0       	ldi	r18, 0x03	; 3
     132:	a4 e1       	ldi	r26, 0x14	; 20
     134:	b3 e0       	ldi	r27, 0x03	; 3
     136:	01 c0       	rjmp	.+2      	; 0x13a <.do_clear_bss_start>

00000138 <.do_clear_bss_loop>:
     138:	1d 92       	st	X+, r1

0000013a <.do_clear_bss_start>:
     13a:	a3 3e       	cpi	r26, 0xE3	; 227
     13c:	b2 07       	cpc	r27, r18
     13e:	e1 f7       	brne	.-8      	; 0x138 <.do_clear_bss_loop>

00000140 <__do_global_ctors>:
     140:	10 e0       	ldi	r17, 0x00	; 0
     142:	c7 e8       	ldi	r28, 0x87	; 135
     144:	d0 e0       	ldi	r29, 0x00	; 0
     146:	04 c0       	rjmp	.+8      	; 0x150 <__do_global_ctors+0x10>
     148:	21 97       	sbiw	r28, 0x01	; 1
     14a:	fe 01       	movw	r30, r28
     14c:	0e 94 bf 0e 	call	0x1d7e	; 0x1d7e <__tablejump2__>
     150:	c5 38       	cpi	r28, 0x85	; 133
     152:	d1 07       	cpc	r29, r17
     154:	c9 f7       	brne	.-14     	; 0x148 <__do_global_ctors+0x8>
     156:	0e 94 04 02 	call	0x408	; 0x408 <main>
     15a:	0c 94 c5 0e 	jmp	0x1d8a	; 0x1d8a <_exit>

0000015e <__bad_interrupt>:
     15e:	0c 94 3d 0c 	jmp	0x187a	; 0x187a <__vector_default>

00000162 <countPulseASM>:

countPulseASM:

.LM0:
.LFBB1:
    push r12   ;   ;  130 pushqi1/1 [length = 1]
     162:	cf 92       	push	r12
    push r13   ;   ;  131 pushqi1/1 [length = 1]
     164:	df 92       	push	r13
    push r14   ;   ;  132 pushqi1/1 [length = 1]
     166:	ef 92       	push	r14
    push r15   ;   ;  133 pushqi1/1 [length = 1]
     168:	ff 92       	push	r15
    push r16   ;   ;  134 pushqi1/1 [length = 1]
     16a:	0f 93       	push	r16
    push r17   ;   ;  135 pushqi1/1 [length = 1]
     16c:	1f 93       	push	r17
/* prologue: function */
/* frame size = 0 */
/* stack size = 6 */
.L__stack_usage = 6
    mov r30,r24  ;  port, port   ;  2 *movhi/1  [length = 2]
     16e:	e8 2f       	mov	r30, r24
    mov r31,r25  ;  port, port
     170:	f9 2f       	mov	r31, r25
/*     unsigned long width = 0;
***     // wait for any previous pulse to end
***     while ((*port & bit) == stateMask)
*/
.LM1:
    rjmp .L2   ;   ;  181 jump  [length = 1]
     172:	05 c0       	rjmp	.+10     	; 0x17e <countPulseASM+0x1c>
.L4:
/*         if (--maxloops == 0) */
.LM2:
    subi r16,1   ;  maxloops,  ;  17  addsi3/2  [length = 4]
     174:	01 50       	subi	r16, 0x01	; 1
    sbc r17, r1   ;  maxloops
     176:	11 09       	sbc	r17, r1
    sbc r18, r1   ;  maxloops
     178:	21 09       	sbc	r18, r1
    sbc r19, r1   ;  maxloops
     17a:	31 09       	sbc	r19, r1
    breq .L13  ; ,   ;  19  branch  [length = 1]
     17c:	61 f1       	breq	.+88     	; 0x1d6 <countPulseASM+0x74>
.L2:
/*         if (--maxloops == 0) */
.LM3:
    ld r25,Z   ;  D.1554, *port_7(D)   ;  22  movqi_insn/4  [length = 1]
     17e:	90 81       	ld	r25, Z
    and r25,r22  ;  D.1554, bit  ;  24  andqi3/1  [length = 1]
     180:	96 23       	and	r25, r22
    cp r25,r20   ;  D.1554, stateMask  ;  25  *cmpqi/2  [length = 1]
     182:	94 17       	cp	r25, r20
    breq .L4   ; ,   ;  26  branch  [length = 1]
     184:	b9 f3       	breq	.-18     	; 0x174 <countPulseASM+0x12>
    rjmp .L6   ;   ;  184 jump  [length = 1]
     186:	05 c0       	rjmp	.+10     	; 0x192 <countPulseASM+0x30>
***     // wait for the pulse to start
***     while ((*port & bit) != stateMask)
***         if (--maxloops == 0)
*/
.LM4:
    subi r16,1   ;  maxloops,  ;  31  addsi3/2  [length = 4]
     188:	01 50       	subi	r16, 0x01	; 1
    sbc r17, r1   ;  maxloops
     18a:	11 09       	sbc	r17, r1
    sbc r18, r1   ;  maxloops
     18c:	21 09       	sbc	r18, r1
    sbc r19, r1   ;  maxloops
     18e:	31 09       	sbc	r19, r1
    breq .L13  ; ,   ;  33  branch  [length = 1]
     190:	11 f1       	breq	.+68     	; 0x1d6 <countPulseASM+0x74>
.L6:
/*         if (--maxloops == 0) */
.LM5:
    ld r25,Z   ;  D.1554, *port_7(D)   ;  41  movqi_insn/4  [length = 1]
     192:	90 81       	ld	r25, Z
    and r25,r22  ;  D.1554, bit  ;  43  andqi3/1  [length = 1]
     194:	96 23       	and	r25, r22
    cpse r25,r20   ;  D.1554, stateMask  ;  44  enable_interrupt-3  [length = 1]
     196:	94 13       	cpse	r25, r20
    rjmp .L7   ;
     198:	f7 cf       	rjmp	.-18     	; 0x188 <countPulseASM+0x26>
    mov r12, r1   ;  width  ;  7 *movsi/2  [length = 4]
     19a:	c1 2c       	mov	r12, r1
    mov r13, r1   ;  width
     19c:	d1 2c       	mov	r13, r1
    mov r14, r1   ;  width
     19e:	e1 2c       	mov	r14, r1
    mov r15, r1   ;  width
     1a0:	f1 2c       	mov	r15, r1
    rjmp .L9   ;   ;  186 jump  [length = 1]
     1a2:	0a c0       	rjmp	.+20     	; 0x1b8 <countPulseASM+0x56>
***     // wait for the pulse to stop
***     while ((*port & bit) == stateMask) {
***         if (++width == maxloops)
*/
.LM6:
    ldi r24,-1   ; ,   ;  50  addsi3/3  [length = 5]
     1a4:	8f ef       	ldi	r24, 0xFF	; 255
    sub r12,r24  ;  width,
     1a6:	c8 1a       	sub	r12, r24
    sbc r13,r24  ;  width,
     1a8:	d8 0a       	sbc	r13, r24
    sbc r14,r24  ;  width,
     1aa:	e8 0a       	sbc	r14, r24
    sbc r15,r24  ;  width,
     1ac:	f8 0a       	sbc	r15, r24
    cp r16,r12   ;  maxloops, width  ;  51  *cmpsi/2  [length = 4]
     1ae:	0c 15       	cp	r16, r12
    cpc r17,r13  ;  maxloops, width
     1b0:	1d 05       	cpc	r17, r13
    cpc r18,r14  ;  maxloops, width
     1b2:	2e 05       	cpc	r18, r14
    cpc r19,r15  ;  maxloops, width
     1b4:	3f 05       	cpc	r19, r15
    breq .L13  ; ,   ;  52  branch  [length = 1]
     1b6:	79 f0       	breq	.+30     	; 0x1d6 <countPulseASM+0x74>
.L9:
/*         if (++width == maxloops) */
.LM7:
    ld r24,Z   ;  D.1554, *port_7(D)   ;  60  movqi_insn/4  [length = 1]
     1b8:	80 81       	ld	r24, Z
    and r24,r22  ;  D.1554, bit  ;  62  andqi3/1  [length = 1]
     1ba:	86 23       	and	r24, r22
    cp r24,r20   ;  D.1554, stateMask  ;  63  *cmpqi/2  [length = 1]
     1bc:	84 17       	cp	r24, r20
    breq .L10  ; ,   ;  64  branch  [length = 1]
     1be:	91 f3       	breq	.-28     	; 0x1a4 <countPulseASM+0x42>
/*             return 0;
***     }
***     return width;
*/
.LM8:
    mov r22,r12  ;  D.1553, width  ;  108 movqi_insn/1  [length = 1]
     1c0:	6c 2d       	mov	r22, r12
    mov r23,r13  ;  D.1553, width  ;  109 movqi_insn/1  [length = 1]
     1c2:	7d 2d       	mov	r23, r13
    mov r24,r14  ;  D.1553, width  ;  110 movqi_insn/1  [length = 1]
     1c4:	8e 2d       	mov	r24, r14
    mov r25,r15  ;  D.1553, width  ;  111 movqi_insn/1  [length = 1]
     1c6:	9f 2d       	mov	r25, r15
/* epilogue start */
.LM9:
    pop r17  ;   ;  171 popqi [length = 1]
     1c8:	1f 91       	pop	r17
    pop r16  ;   ;  172 popqi [length = 1]
     1ca:	0f 91       	pop	r16
    pop r15  ;   ;  173 popqi [length = 1]
     1cc:	ff 90       	pop	r15
    pop r14  ;   ;  174 popqi [length = 1]
     1ce:	ef 90       	pop	r14
    pop r13  ;   ;  175 popqi [length = 1]
     1d0:	df 90       	pop	r13
    pop r12  ;   ;  176 popqi [length = 1]
     1d2:	cf 90       	pop	r12
    ret  ;  177 return_from_epilogue  [length = 1]
     1d4:	08 95       	ret
.L13:
.LM10:
    ldi r22,0  ;  D.1553   ;  120 movqi_insn/1  [length = 1]
     1d6:	60 e0       	ldi	r22, 0x00	; 0
    ldi r23,0  ;  D.1553   ;  121 movqi_insn/1  [length = 1]
     1d8:	70 e0       	ldi	r23, 0x00	; 0
    ldi r24,0  ;  D.1553   ;  122 movqi_insn/1  [length = 1]
     1da:	80 e0       	ldi	r24, 0x00	; 0
    ldi r25,0  ;  D.1553   ;  123 movqi_insn/1  [length = 1]
     1dc:	90 e0       	ldi	r25, 0x00	; 0
/* epilogue start */
.LM11:
    pop r17  ;   ;  138 popqi [length = 1]
     1de:	1f 91       	pop	r17
    pop r16  ;   ;  139 popqi [length = 1]
     1e0:	0f 91       	pop	r16
    pop r15  ;   ;  140 popqi [length = 1]
     1e2:	ff 90       	pop	r15
    pop r14  ;   ;  141 popqi [length = 1]
     1e4:	ef 90       	pop	r14
    pop r13  ;   ;  142 popqi [length = 1]
     1e6:	df 90       	pop	r13
    pop r12  ;   ;  143 popqi [length = 1]
     1e8:	cf 90       	pop	r12
    ret  ;  144 return_from_epilogue  [length = 1]
     1ea:	08 95       	ret

000001ec <osEE_hal_save_ctx_and_restore_ctx>:
  .type osEE_hal_save_ctx_and_restore_ctx, @function
osEE_hal_save_ctx_and_restore_ctx:
  /*  r25:r24 parameter:  OsEE_TDB * p_to_tdb
      r23:r22 parameter:  OsEE_SCB * p_to_scb
      r21:r20 parameter:  OsEE_SCB * p_from_scb */
    osEE_hal_save_vcontext_m r21 r20
     1ec:	2f 92       	push	r2
     1ee:	3f 92       	push	r3
     1f0:	4f 92       	push	r4
     1f2:	5f 92       	push	r5
     1f4:	6f 92       	push	r6
     1f6:	7f 92       	push	r7
     1f8:	8f 92       	push	r8
     1fa:	9f 92       	push	r9
     1fc:	af 92       	push	r10
     1fe:	bf 92       	push	r11
     200:	cf 92       	push	r12
     202:	df 92       	push	r13
     204:	ef 92       	push	r14
     206:	ff 92       	push	r15
     208:	0f 93       	push	r16
     20a:	1f 93       	push	r17
     20c:	cf 93       	push	r28
     20e:	df 93       	push	r29
     210:	e4 2f       	mov	r30, r20
     212:	f5 2f       	mov	r31, r21
     214:	41 90       	ld	r4, Z+
     216:	50 80       	ld	r5, Z
     218:	4f 92       	push	r4
     21a:	5f 92       	push	r5
     21c:	e4 2f       	mov	r30, r20
     21e:	f5 2f       	mov	r31, r21
     220:	4d b6       	in	r4, 0x3d	; 61
     222:	5e b6       	in	r5, 0x3e	; 62
     224:	41 92       	st	Z+, r4
     226:	50 82       	st	Z, r5

/* Unconditional brach to restore context */
    jmp osEE_hal_restore_ctx
     228:	0c 94 16 01 	jmp	0x22c	; 0x22c <osEE_hal_restore_ctx>

0000022c <osEE_hal_restore_ctx>:
  .globl osEE_hal_restore_ctx
  .type osEE_hal_restore_ctx, @function
osEE_hal_restore_ctx:
  /*  r25:r24 parameter:  OsEE_TDB * p_to_tdb
      r23:r22 parameter:  OsEE_SCB * p_to_scb */
    osEE_hal_restore_vcontext_m r23 r22
     22c:	e6 2f       	mov	r30, r22
     22e:	f7 2f       	mov	r31, r23
     230:	41 90       	ld	r4, Z+
     232:	50 80       	ld	r5, Z
     234:	4d be       	out	0x3d, r4	; 61
     236:	5e be       	out	0x3e, r5	; 62
     238:	5f 90       	pop	r5
     23a:	4f 90       	pop	r4
     23c:	e6 2f       	mov	r30, r22
     23e:	f7 2f       	mov	r31, r23
     240:	41 92       	st	Z+, r4
     242:	50 82       	st	Z, r5
     244:	df 91       	pop	r29
     246:	cf 91       	pop	r28
     248:	1f 91       	pop	r17
     24a:	0f 91       	pop	r16
     24c:	ff 90       	pop	r15
     24e:	ef 90       	pop	r14
     250:	df 90       	pop	r13
     252:	cf 90       	pop	r12
     254:	bf 90       	pop	r11
     256:	af 90       	pop	r10
     258:	9f 90       	pop	r9
     25a:	8f 90       	pop	r8
     25c:	7f 90       	pop	r7
     25e:	6f 90       	pop	r6
     260:	5f 90       	pop	r5
     262:	4f 90       	pop	r4
     264:	3f 90       	pop	r3
     266:	2f 90       	pop	r2
    jmp osEE_scheduler_task_wrapper_restore
     268:	0c 94 29 0b 	jmp	0x1652	; 0x1652 <osEE_scheduler_task_wrapper_restore>

0000026c <osEE_hal_ready2stacked>:
  .type   osEE_hal_ready2stacked, @function
osEE_hal_ready2stacked:
  /*  r25:r24 parameter:  OsEE_TDB * p_to_tdb
      r23:r22 parameter:  OsEE_SCB * p_to_scb
      r21:r20 local       p_to_scb->p_tos */
    mov r30, r22
     26c:	e6 2f       	mov	r30, r22
    mov r31, r23
     26e:	f7 2f       	mov	r31, r23
    ld  r20, z+
     270:	41 91       	ld	r20, Z+
    ld  r21, z
     272:	50 81       	ld	r21, Z
/* sp = 21:20 */
    out 0x3D, r20
     274:	4d bf       	out	0x3d, r20	; 61
    out 0x3E, r21
     276:	5e bf       	out	0x3e, r21	; 62

    jmp osEE_scheduler_task_wrapper_run
     278:	0c 94 2a 0b 	jmp	0x1654	; 0x1654 <osEE_scheduler_task_wrapper_run>

0000027c <osEE_hal_save_ctx_and_ready2stacked>:
  .type osEE_hal_save_ctx_and_ready2stacked, @function
osEE_hal_save_ctx_and_ready2stacked:
  /*  r25:r24 parameter:  OsEE_TDB * p_to_tdb
      r23:r22 parameter:  OsEE_SCB * p_to_scb
      r21:r20 parameter:  OsEE_SCB * p_from_scb */
    osEE_hal_save_vcontext_m r21 r20
     27c:	2f 92       	push	r2
     27e:	3f 92       	push	r3
     280:	4f 92       	push	r4
     282:	5f 92       	push	r5
     284:	6f 92       	push	r6
     286:	7f 92       	push	r7
     288:	8f 92       	push	r8
     28a:	9f 92       	push	r9
     28c:	af 92       	push	r10
     28e:	bf 92       	push	r11
     290:	cf 92       	push	r12
     292:	df 92       	push	r13
     294:	ef 92       	push	r14
     296:	ff 92       	push	r15
     298:	0f 93       	push	r16
     29a:	1f 93       	push	r17
     29c:	cf 93       	push	r28
     29e:	df 93       	push	r29
     2a0:	e4 2f       	mov	r30, r20
     2a2:	f5 2f       	mov	r31, r21
     2a4:	41 90       	ld	r4, Z+
     2a6:	50 80       	ld	r5, Z
     2a8:	4f 92       	push	r4
     2aa:	5f 92       	push	r5
     2ac:	e4 2f       	mov	r30, r20
     2ae:	f5 2f       	mov	r31, r21
     2b0:	4d b6       	in	r4, 0x3d	; 61
     2b2:	5e b6       	in	r5, 0x3e	; 62
     2b4:	41 92       	st	Z+, r4
     2b6:	50 82       	st	Z, r5
    jmp osEE_hal_ready2stacked
     2b8:	0c 94 36 01 	jmp	0x26c	; 0x26c <osEE_hal_ready2stacked>

000002bc <osEE_hal_terminate_ctx>:
  .type osEE_hal_terminate_ctx, @function
osEE_hal_terminate_ctx:
  /*  r25:r24 parameter:  OsEE_SCB * p_term_scb
      r23:r22 parameter:  kernel_cb
      r21:r20 local       p_term_scb->p_tos */
    mov r30, r24
     2bc:	e8 2f       	mov	r30, r24
    mov r31, r25
     2be:	f9 2f       	mov	r31, r25
    ld  r20, z+
     2c0:	41 91       	ld	r20, Z+
    ld  r21, z
     2c2:	50 81       	ld	r21, Z

/* Unwind SP */
    out 0x3D, r20 /* r20 -> spl */
     2c4:	4d bf       	out	0x3d, r20	; 61
    out 0x3E, r21 /* r21 -> sph */
     2c6:	5e bf       	out	0x3e, r21	; 62

/*  Jump to kern_callback (that schedule) */
    mov r30, r22
     2c8:	e6 2f       	mov	r30, r22
    mov r31, r23
     2ca:	f7 2f       	mov	r31, r23

    ijmp
     2cc:	09 94       	ijmp
	...

000002d0 <_ZN8SPIClass5beginEv>:
     2d0:	cf 93       	push	r28
     2d2:	cf b7       	in	r28, 0x3f	; 63
     2d4:	f8 94       	cli
     2d6:	80 91 17 03 	lds	r24, 0x0317	; 0x800317 <_ZN8SPIClass11initializedE>
     2da:	81 11       	cpse	r24, r1
     2dc:	27 c0       	rjmp	.+78     	; 0x32c <_ZN8SPIClass5beginEv+0x5c>
     2de:	e2 ee       	ldi	r30, 0xE2	; 226
     2e0:	f0 e0       	ldi	r31, 0x00	; 0
     2e2:	84 91       	lpm	r24, Z
     2e4:	ee ec       	ldi	r30, 0xCE	; 206
     2e6:	f0 e0       	ldi	r31, 0x00	; 0
     2e8:	94 91       	lpm	r25, Z
     2ea:	e8 2f       	mov	r30, r24
     2ec:	f0 e0       	ldi	r31, 0x00	; 0
     2ee:	ee 0f       	add	r30, r30
     2f0:	ff 1f       	adc	r31, r31
     2f2:	e0 50       	subi	r30, 0x00	; 0
     2f4:	ff 4f       	sbci	r31, 0xFF	; 255
     2f6:	a5 91       	lpm	r26, Z+
     2f8:	b4 91       	lpm	r27, Z
     2fa:	ec 91       	ld	r30, X
     2fc:	e9 23       	and	r30, r25
     2fe:	21 f4       	brne	.+8      	; 0x308 <_ZN8SPIClass5beginEv+0x38>
     300:	61 e0       	ldi	r22, 0x01	; 1
     302:	8a e0       	ldi	r24, 0x0A	; 10
     304:	0e 94 1d 08 	call	0x103a	; 0x103a <digitalWrite>
     308:	61 e0       	ldi	r22, 0x01	; 1
     30a:	8a e0       	ldi	r24, 0x0A	; 10
     30c:	0e 94 e1 07 	call	0xfc2	; 0xfc2 <pinMode>
     310:	8c b5       	in	r24, 0x2c	; 44
     312:	80 61       	ori	r24, 0x10	; 16
     314:	8c bd       	out	0x2c, r24	; 44
     316:	8c b5       	in	r24, 0x2c	; 44
     318:	80 64       	ori	r24, 0x40	; 64
     31a:	8c bd       	out	0x2c, r24	; 44
     31c:	61 e0       	ldi	r22, 0x01	; 1
     31e:	8d e0       	ldi	r24, 0x0D	; 13
     320:	0e 94 e1 07 	call	0xfc2	; 0xfc2 <pinMode>
     324:	61 e0       	ldi	r22, 0x01	; 1
     326:	8b e0       	ldi	r24, 0x0B	; 11
     328:	0e 94 e1 07 	call	0xfc2	; 0xfc2 <pinMode>
     32c:	80 91 17 03 	lds	r24, 0x0317	; 0x800317 <_ZN8SPIClass11initializedE>
     330:	8f 5f       	subi	r24, 0xFF	; 255
     332:	80 93 17 03 	sts	0x0317, r24	; 0x800317 <_ZN8SPIClass11initializedE>
     336:	cf bf       	out	0x3f, r28	; 63
     338:	cf 91       	pop	r28
     33a:	08 95       	ret

0000033c <loop>:
     33c:	80 e0       	ldi	r24, 0x00	; 0
     33e:	0e 94 da 0a 	call	0x15b4	; 0x15b4 <ActivateTask>
     342:	80 91 27 03 	lds	r24, 0x0327	; 0x800327 <stk_wrong>
     346:	81 11       	cpse	r24, r1
     348:	1e c0       	rjmp	.+60     	; 0x386 <loop+0x4a>
     34a:	80 91 25 03 	lds	r24, 0x0325	; 0x800325 <old_sp>
     34e:	90 91 26 03 	lds	r25, 0x0326	; 0x800326 <old_sp+0x1>
     352:	89 2b       	or	r24, r25
     354:	39 f4       	brne	.+14     	; 0x364 <loop+0x28>
     356:	8d b7       	in	r24, 0x3d	; 61
     358:	9e b7       	in	r25, 0x3e	; 62
     35a:	90 93 26 03 	sts	0x0326, r25	; 0x800326 <old_sp+0x1>
     35e:	80 93 25 03 	sts	0x0325, r24	; 0x800325 <old_sp>
     362:	08 95       	ret
     364:	20 91 25 03 	lds	r18, 0x0325	; 0x800325 <old_sp>
     368:	30 91 26 03 	lds	r19, 0x0326	; 0x800326 <old_sp+0x1>
     36c:	8d b7       	in	r24, 0x3d	; 61
     36e:	9e b7       	in	r25, 0x3e	; 62
     370:	28 17       	cp	r18, r24
     372:	39 07       	cpc	r19, r25
     374:	41 f0       	breq	.+16     	; 0x386 <loop+0x4a>
     376:	81 e0       	ldi	r24, 0x01	; 1
     378:	80 93 27 03 	sts	0x0327, r24	; 0x800327 <stk_wrong>
     37c:	61 e0       	ldi	r22, 0x01	; 1
     37e:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
     382:	0c 94 1d 08 	jmp	0x103a	; 0x103a <digitalWrite>
     386:	08 95       	ret

00000388 <setup>:
     388:	61 e0       	ldi	r22, 0x01	; 1
     38a:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
     38e:	0e 94 e1 07 	call	0xfc2	; 0xfc2 <pinMode>
     392:	26 e0       	ldi	r18, 0x06	; 6
     394:	40 e0       	ldi	r20, 0x00	; 0
     396:	52 ec       	ldi	r21, 0xC2	; 194
     398:	61 e0       	ldi	r22, 0x01	; 1
     39a:	70 e0       	ldi	r23, 0x00	; 0
     39c:	85 e4       	ldi	r24, 0x45	; 69
     39e:	93 e0       	ldi	r25, 0x03	; 3
     3a0:	0e 94 54 09 	call	0x12a8	; 0x12a8 <_ZN14HardwareSerial5beginEmh>
     3a4:	41 e0       	ldi	r20, 0x01	; 1
     3a6:	60 e1       	ldi	r22, 0x10	; 16
     3a8:	89 e1       	ldi	r24, 0x19	; 25
     3aa:	93 e0       	ldi	r25, 0x03	; 3
     3ac:	0e 94 20 06 	call	0xc40	; 0xc40 <_ZN7MCP_CAN5beginEhh>
     3b0:	88 23       	and	r24, r24
     3b2:	99 f0       	breq	.+38     	; 0x3da <setup+0x52>
     3b4:	6c e1       	ldi	r22, 0x1C	; 28
     3b6:	71 e0       	ldi	r23, 0x01	; 1
     3b8:	85 e4       	ldi	r24, 0x45	; 69
     3ba:	93 e0       	ldi	r25, 0x03	; 3
     3bc:	0e 94 8e 0a 	call	0x151c	; 0x151c <_ZN5Print7printlnEPKc>
     3c0:	65 e3       	ldi	r22, 0x35	; 53
     3c2:	71 e0       	ldi	r23, 0x01	; 1
     3c4:	85 e4       	ldi	r24, 0x45	; 69
     3c6:	93 e0       	ldi	r25, 0x03	; 3
     3c8:	0e 94 8e 0a 	call	0x151c	; 0x151c <_ZN5Print7printlnEPKc>
     3cc:	64 e6       	ldi	r22, 0x64	; 100
     3ce:	70 e0       	ldi	r23, 0x00	; 0
     3d0:	80 e0       	ldi	r24, 0x00	; 0
     3d2:	90 e0       	ldi	r25, 0x00	; 0
     3d4:	0e 94 36 07 	call	0xe6c	; 0xe6c <delay>
     3d8:	e5 cf       	rjmp	.-54     	; 0x3a4 <setup+0x1c>
     3da:	60 e5       	ldi	r22, 0x50	; 80
     3dc:	71 e0       	ldi	r23, 0x01	; 1
     3de:	85 e4       	ldi	r24, 0x45	; 69
     3e0:	93 e0       	ldi	r25, 0x03	; 3
     3e2:	0e 94 8e 0a 	call	0x151c	; 0x151c <_ZN5Print7printlnEPKc>
     3e6:	61 e0       	ldi	r22, 0x01	; 1
     3e8:	85 e0       	ldi	r24, 0x05	; 5
     3ea:	0e 94 e1 07 	call	0xfc2	; 0xfc2 <pinMode>
     3ee:	60 e0       	ldi	r22, 0x00	; 0
     3f0:	86 e0       	ldi	r24, 0x06	; 6
     3f2:	0c 94 e1 07 	jmp	0xfc2	; 0xfc2 <pinMode>

000003f6 <idle_hook>:
     3f6:	0e 94 9e 01 	call	0x33c	; 0x33c <loop>
     3fa:	8c eb       	ldi	r24, 0xBC	; 188
     3fc:	98 e0       	ldi	r25, 0x08	; 8
     3fe:	89 2b       	or	r24, r25
     400:	11 f0       	breq	.+4      	; 0x406 <__LOCK_REGION_LENGTH__+0x6>
     402:	0c 94 bc 08 	jmp	0x1178	; 0x1178 <_Z14serialEventRunv>
     406:	08 95       	ret

00000408 <main>:
     408:	0e 94 7d 07 	call	0xefa	; 0xefa <init>
     40c:	0e 94 c4 01 	call	0x388	; 0x388 <setup>
     410:	80 e0       	ldi	r24, 0x00	; 0
     412:	0e 94 a1 0a 	call	0x1542	; 0x1542 <StartOS>
     416:	80 e0       	ldi	r24, 0x00	; 0
     418:	90 e0       	ldi	r25, 0x00	; 0
     41a:	08 95       	ret

0000041c <_GLOBAL__sub_I_led>:
     41c:	6a e0       	ldi	r22, 0x0A	; 10
     41e:	89 e1       	ldi	r24, 0x19	; 25
     420:	93 e0       	ldi	r25, 0x03	; 3
     422:	0c 94 18 06 	jmp	0xc30	; 0xc30 <_ZN7MCP_CANC1Eh>

00000426 <FuncTaskL1>:
     426:	cf 92       	push	r12
     428:	ef 92       	push	r14
     42a:	ff 92       	push	r15
     42c:	0f 93       	push	r16
     42e:	cf 93       	push	r28
     430:	df 93       	push	r29
     432:	60 e0       	ldi	r22, 0x00	; 0
     434:	85 e0       	ldi	r24, 0x05	; 5
     436:	0e 94 1d 08 	call	0x103a	; 0x103a <digitalWrite>
     43a:	82 e0       	ldi	r24, 0x02	; 2
     43c:	90 e0       	ldi	r25, 0x00	; 0
     43e:	0e 94 72 07 	call	0xee4	; 0xee4 <delayMicroseconds>
     442:	61 e0       	ldi	r22, 0x01	; 1
     444:	85 e0       	ldi	r24, 0x05	; 5
     446:	0e 94 1d 08 	call	0x103a	; 0x103a <digitalWrite>
     44a:	8a e0       	ldi	r24, 0x0A	; 10
     44c:	90 e0       	ldi	r25, 0x00	; 0
     44e:	0e 94 72 07 	call	0xee4	; 0xee4 <delayMicroseconds>
     452:	60 e0       	ldi	r22, 0x00	; 0
     454:	85 e0       	ldi	r24, 0x05	; 5
     456:	0e 94 1d 08 	call	0x103a	; 0x103a <digitalWrite>
     45a:	20 e4       	ldi	r18, 0x40	; 64
     45c:	32 e4       	ldi	r19, 0x42	; 66
     45e:	4f e0       	ldi	r20, 0x0F	; 15
     460:	50 e0       	ldi	r21, 0x00	; 0
     462:	61 e0       	ldi	r22, 0x01	; 1
     464:	86 e0       	ldi	r24, 0x06	; 6
     466:	0e 94 4d 08 	call	0x109a	; 0x109a <pulseIn>
     46a:	60 93 32 03 	sts	0x0332, r22	; 0x800332 <duration>
     46e:	70 93 33 03 	sts	0x0333, r23	; 0x800333 <duration+0x1>
     472:	80 93 34 03 	sts	0x0334, r24	; 0x800334 <duration+0x2>
     476:	90 93 35 03 	sts	0x0335, r25	; 0x800335 <duration+0x3>
     47a:	0e 94 a4 0d 	call	0x1b48	; 0x1b48 <__floatsisf>
     47e:	26 e9       	ldi	r18, 0x96	; 150
     480:	33 e4       	ldi	r19, 0x43	; 67
     482:	4b e0       	ldi	r20, 0x0B	; 11
     484:	5d e3       	ldi	r21, 0x3D	; 61
     486:	0e 94 30 0e 	call	0x1c60	; 0x1c60 <__mulsf3>
     48a:	20 e0       	ldi	r18, 0x00	; 0
     48c:	30 e0       	ldi	r19, 0x00	; 0
     48e:	40 e0       	ldi	r20, 0x00	; 0
     490:	5f e3       	ldi	r21, 0x3F	; 63
     492:	0e 94 30 0e 	call	0x1c60	; 0x1c60 <__mulsf3>
     496:	0e 94 6c 0d 	call	0x1ad8	; 0x1ad8 <__fixsfsi>
     49a:	70 93 31 03 	sts	0x0331, r23	; 0x800331 <distance+0x1>
     49e:	60 93 30 03 	sts	0x0330, r22	; 0x800330 <distance>
     4a2:	9b 01       	movw	r18, r22
     4a4:	33 0f       	add	r19, r19
     4a6:	22 0b       	sbc	r18, r18
     4a8:	32 2f       	mov	r19, r18
     4aa:	20 93 28 03 	sts	0x0328, r18	; 0x800328 <stmp>
     4ae:	9b 01       	movw	r18, r22
     4b0:	33 0f       	add	r19, r19
     4b2:	22 0b       	sbc	r18, r18
     4b4:	32 2f       	mov	r19, r18
     4b6:	20 93 29 03 	sts	0x0329, r18	; 0x800329 <stmp+0x1>
     4ba:	9b 01       	movw	r18, r22
     4bc:	33 0f       	add	r19, r19
     4be:	22 0b       	sbc	r18, r18
     4c0:	32 2f       	mov	r19, r18
     4c2:	20 93 2a 03 	sts	0x032A, r18	; 0x80032a <stmp+0x2>
     4c6:	9b 01       	movw	r18, r22
     4c8:	33 0f       	add	r19, r19
     4ca:	22 0b       	sbc	r18, r18
     4cc:	32 2f       	mov	r19, r18
     4ce:	20 93 2b 03 	sts	0x032B, r18	; 0x80032b <stmp+0x3>
     4d2:	33 0f       	add	r19, r19
     4d4:	22 0b       	sbc	r18, r18
     4d6:	32 2f       	mov	r19, r18
     4d8:	20 93 2c 03 	sts	0x032C, r18	; 0x80032c <stmp+0x4>
     4dc:	33 0f       	add	r19, r19
     4de:	22 0b       	sbc	r18, r18
     4e0:	32 2f       	mov	r19, r18
     4e2:	20 93 2d 03 	sts	0x032D, r18	; 0x80032d <stmp+0x5>
     4e6:	70 93 2e 03 	sts	0x032E, r23	; 0x80032e <stmp+0x6>
     4ea:	60 93 2f 03 	sts	0x032F, r22	; 0x80032f <stmp+0x7>
     4ee:	48 e0       	ldi	r20, 0x08	; 8
     4f0:	50 e0       	ldi	r21, 0x00	; 0
     4f2:	68 e2       	ldi	r22, 0x28	; 40
     4f4:	73 e0       	ldi	r23, 0x03	; 3
     4f6:	85 e4       	ldi	r24, 0x45	; 69
     4f8:	93 e0       	ldi	r25, 0x03	; 3
     4fa:	0e 94 48 0a 	call	0x1490	; 0x1490 <_ZN5Print5writeEPKhj>
     4fe:	41 e0       	ldi	r20, 0x01	; 1
     500:	50 e0       	ldi	r21, 0x00	; 0
     502:	62 ed       	ldi	r22, 0xD2	; 210
     504:	71 e0       	ldi	r23, 0x01	; 1
     506:	85 e4       	ldi	r24, 0x45	; 69
     508:	93 e0       	ldi	r25, 0x03	; 3
     50a:	0e 94 48 0a 	call	0x1490	; 0x1490 <_ZN5Print5writeEPKhj>
     50e:	64 e6       	ldi	r22, 0x64	; 100
     510:	70 e0       	ldi	r23, 0x00	; 0
     512:	80 e0       	ldi	r24, 0x00	; 0
     514:	90 e0       	ldi	r25, 0x00	; 0
     516:	0e 94 36 07 	call	0xe6c	; 0xe6c <delay>
     51a:	85 e4       	ldi	r24, 0x45	; 69
     51c:	93 e0       	ldi	r25, 0x03	; 3
     51e:	0e 94 99 08 	call	0x1132	; 0x1132 <_ZN14HardwareSerial4readEv>
     522:	89 36       	cpi	r24, 0x69	; 105
     524:	91 05       	cpc	r25, r1
     526:	61 f4       	brne	.+24     	; 0x540 <FuncTaskL1+0x11a>
     528:	c8 e2       	ldi	r28, 0x28	; 40
     52a:	d3 e0       	ldi	r29, 0x03	; 3
     52c:	85 e4       	ldi	r24, 0x45	; 69
     52e:	93 e0       	ldi	r25, 0x03	; 3
     530:	0e 94 99 08 	call	0x1132	; 0x1132 <_ZN14HardwareSerial4readEv>
     534:	89 93       	st	Y+, r24
     536:	83 e0       	ldi	r24, 0x03	; 3
     538:	c0 33       	cpi	r28, 0x30	; 48
     53a:	d8 07       	cpc	r29, r24
     53c:	b9 f7       	brne	.-18     	; 0x52c <FuncTaskL1+0x106>
     53e:	ed cf       	rjmp	.-38     	; 0x51a <FuncTaskL1+0xf4>
     540:	cc 24       	eor	r12, r12
     542:	c3 94       	inc	r12
     544:	88 e2       	ldi	r24, 0x28	; 40
     546:	e8 2e       	mov	r14, r24
     548:	83 e0       	ldi	r24, 0x03	; 3
     54a:	f8 2e       	mov	r15, r24
     54c:	08 e0       	ldi	r16, 0x08	; 8
     54e:	20 e0       	ldi	r18, 0x00	; 0
     550:	40 e0       	ldi	r20, 0x00	; 0
     552:	50 e0       	ldi	r21, 0x00	; 0
     554:	ba 01       	movw	r22, r20
     556:	89 e1       	ldi	r24, 0x19	; 25
     558:	93 e0       	ldi	r25, 0x03	; 3
     55a:	0e 94 b4 06 	call	0xd68	; 0xd68 <_ZN7MCP_CAN10sendMsgBufEmhhPKhb>
     55e:	68 ee       	ldi	r22, 0xE8	; 232
     560:	73 e0       	ldi	r23, 0x03	; 3
     562:	80 e0       	ldi	r24, 0x00	; 0
     564:	90 e0       	ldi	r25, 0x00	; 0
     566:	0e 94 36 07 	call	0xe6c	; 0xe6c <delay>
     56a:	80 91 23 03 	lds	r24, 0x0323	; 0x800323 <TaskL1_count>
     56e:	90 91 24 03 	lds	r25, 0x0324	; 0x800324 <TaskL1_count+0x1>
     572:	01 96       	adiw	r24, 0x01	; 1
     574:	90 93 24 03 	sts	0x0324, r25	; 0x800324 <TaskL1_count+0x1>
     578:	80 93 23 03 	sts	0x0323, r24	; 0x800323 <TaskL1_count>
     57c:	df 91       	pop	r29
     57e:	cf 91       	pop	r28
     580:	0f 91       	pop	r16
     582:	ff 90       	pop	r15
     584:	ef 90       	pop	r14
     586:	cf 90       	pop	r12
     588:	0c 94 02 0b 	jmp	0x1604	; 0x1604 <TerminateTask>

0000058c <_ZN8SPIClass16beginTransactionE11SPISettings>:
     58c:	20 91 16 03 	lds	r18, 0x0316	; 0x800316 <_ZN8SPIClass13interruptModeE>
     590:	22 23       	and	r18, r18
     592:	99 f0       	breq	.+38     	; 0x5ba <_ZN8SPIClass16beginTransactionE11SPISettings+0x2e>
     594:	4f b7       	in	r20, 0x3f	; 63
     596:	f8 94       	cli
     598:	20 91 16 03 	lds	r18, 0x0316	; 0x800316 <_ZN8SPIClass13interruptModeE>
     59c:	21 30       	cpi	r18, 0x01	; 1
     59e:	59 f4       	brne	.+22     	; 0x5b6 <_ZN8SPIClass16beginTransactionE11SPISettings+0x2a>
     5a0:	2d b3       	in	r18, 0x1d	; 29
     5a2:	20 93 14 03 	sts	0x0314, r18	; 0x800314 <__data_end>
     5a6:	3d b3       	in	r19, 0x1d	; 29
     5a8:	20 91 15 03 	lds	r18, 0x0315	; 0x800315 <_ZN8SPIClass13interruptMaskE>
     5ac:	20 95       	com	r18
     5ae:	23 23       	and	r18, r19
     5b0:	2d bb       	out	0x1d, r18	; 29
     5b2:	4f bf       	out	0x3f, r20	; 63
     5b4:	02 c0       	rjmp	.+4      	; 0x5ba <_ZN8SPIClass16beginTransactionE11SPISettings+0x2e>
     5b6:	40 93 14 03 	sts	0x0314, r20	; 0x800314 <__data_end>
     5ba:	8c bd       	out	0x2c, r24	; 44
     5bc:	9d bd       	out	0x2d, r25	; 45
     5be:	08 95       	ret

000005c0 <_ZN8SPIClass8transferEh>:
     5c0:	8e bd       	out	0x2e, r24	; 46
     5c2:	00 00       	nop
     5c4:	0d b4       	in	r0, 0x2d	; 45
     5c6:	07 fe       	sbrs	r0, 7
     5c8:	fd cf       	rjmp	.-6      	; 0x5c4 <_ZN8SPIClass8transferEh+0x4>
     5ca:	8e b5       	in	r24, 0x2e	; 46
     5cc:	08 95       	ret

000005ce <_ZN8SPIClass14endTransactionEv>:
     5ce:	80 91 16 03 	lds	r24, 0x0316	; 0x800316 <_ZN8SPIClass13interruptModeE>
     5d2:	88 23       	and	r24, r24
     5d4:	61 f0       	breq	.+24     	; 0x5ee <_ZN8SPIClass14endTransactionEv+0x20>
     5d6:	9f b7       	in	r25, 0x3f	; 63
     5d8:	f8 94       	cli
     5da:	20 91 16 03 	lds	r18, 0x0316	; 0x800316 <_ZN8SPIClass13interruptModeE>
     5de:	80 91 14 03 	lds	r24, 0x0314	; 0x800314 <__data_end>
     5e2:	21 30       	cpi	r18, 0x01	; 1
     5e4:	19 f4       	brne	.+6      	; 0x5ec <_ZN8SPIClass14endTransactionEv+0x1e>
     5e6:	8d bb       	out	0x1d, r24	; 29
     5e8:	9f bf       	out	0x3f, r25	; 63
     5ea:	08 95       	ret
     5ec:	8f bf       	out	0x3f, r24	; 63
     5ee:	08 95       	ret

000005f0 <_Z11txSidhToRTSh>:
     5f0:	81 34       	cpi	r24, 0x41	; 65
     5f2:	31 f0       	breq	.+12     	; 0x600 <_Z11txSidhToRTSh+0x10>
     5f4:	81 35       	cpi	r24, 0x51	; 81
     5f6:	31 f0       	breq	.+12     	; 0x604 <_Z11txSidhToRTSh+0x14>
     5f8:	81 33       	cpi	r24, 0x31	; 49
     5fa:	31 f0       	breq	.+12     	; 0x608 <_Z11txSidhToRTSh+0x18>
     5fc:	80 e0       	ldi	r24, 0x00	; 0
     5fe:	08 95       	ret
     600:	82 e8       	ldi	r24, 0x82	; 130
     602:	08 95       	ret
     604:	84 e8       	ldi	r24, 0x84	; 132
     606:	08 95       	ret
     608:	81 e8       	ldi	r24, 0x81	; 129
     60a:	08 95       	ret

0000060c <_Z14txSidhToTxLoadh>:
     60c:	81 34       	cpi	r24, 0x41	; 65
     60e:	31 f0       	breq	.+12     	; 0x61c <_Z14txSidhToTxLoadh+0x10>
     610:	81 35       	cpi	r24, 0x51	; 81
     612:	31 f0       	breq	.+12     	; 0x620 <_Z14txSidhToTxLoadh+0x14>
     614:	81 33       	cpi	r24, 0x31	; 49
     616:	31 f0       	breq	.+12     	; 0x624 <_Z14txSidhToTxLoadh+0x18>
     618:	80 e0       	ldi	r24, 0x00	; 0
     61a:	08 95       	ret
     61c:	82 e4       	ldi	r24, 0x42	; 66
     61e:	08 95       	ret
     620:	84 e4       	ldi	r24, 0x44	; 68
     622:	08 95       	ret
     624:	80 e4       	ldi	r24, 0x40	; 64
     626:	08 95       	ret

00000628 <_ZN7MCP_CAN13mcp2515_resetEv>:
     628:	cf 93       	push	r28
     62a:	df 93       	push	r29
     62c:	ec 01       	movw	r28, r24
     62e:	80 e5       	ldi	r24, 0x50	; 80
     630:	91 e0       	ldi	r25, 0x01	; 1
     632:	0e 94 c6 02 	call	0x58c	; 0x58c <_ZN8SPIClass16beginTransactionE11SPISettings>
     636:	60 e0       	ldi	r22, 0x00	; 0
     638:	8e 81       	ldd	r24, Y+6	; 0x06
     63a:	0e 94 1d 08 	call	0x103a	; 0x103a <digitalWrite>
     63e:	80 ec       	ldi	r24, 0xC0	; 192
     640:	0e 94 e0 02 	call	0x5c0	; 0x5c0 <_ZN8SPIClass8transferEh>
     644:	61 e0       	ldi	r22, 0x01	; 1
     646:	8e 81       	ldd	r24, Y+6	; 0x06
     648:	0e 94 1d 08 	call	0x103a	; 0x103a <digitalWrite>
     64c:	0e 94 e7 02 	call	0x5ce	; 0x5ce <_ZN8SPIClass14endTransactionEv>
     650:	6a e0       	ldi	r22, 0x0A	; 10
     652:	70 e0       	ldi	r23, 0x00	; 0
     654:	80 e0       	ldi	r24, 0x00	; 0
     656:	90 e0       	ldi	r25, 0x00	; 0
     658:	df 91       	pop	r29
     65a:	cf 91       	pop	r28
     65c:	0c 94 36 07 	jmp	0xe6c	; 0xe6c <delay>

00000660 <_ZN7MCP_CAN20mcp2515_readRegisterEh>:
     660:	1f 93       	push	r17
     662:	cf 93       	push	r28
     664:	df 93       	push	r29
     666:	ec 01       	movw	r28, r24
     668:	16 2f       	mov	r17, r22
     66a:	80 e5       	ldi	r24, 0x50	; 80
     66c:	91 e0       	ldi	r25, 0x01	; 1
     66e:	0e 94 c6 02 	call	0x58c	; 0x58c <_ZN8SPIClass16beginTransactionE11SPISettings>
     672:	60 e0       	ldi	r22, 0x00	; 0
     674:	8e 81       	ldd	r24, Y+6	; 0x06
     676:	0e 94 1d 08 	call	0x103a	; 0x103a <digitalWrite>
     67a:	83 e0       	ldi	r24, 0x03	; 3
     67c:	0e 94 e0 02 	call	0x5c0	; 0x5c0 <_ZN8SPIClass8transferEh>
     680:	81 2f       	mov	r24, r17
     682:	0e 94 e0 02 	call	0x5c0	; 0x5c0 <_ZN8SPIClass8transferEh>
     686:	80 e0       	ldi	r24, 0x00	; 0
     688:	0e 94 e0 02 	call	0x5c0	; 0x5c0 <_ZN8SPIClass8transferEh>
     68c:	18 2f       	mov	r17, r24
     68e:	61 e0       	ldi	r22, 0x01	; 1
     690:	8e 81       	ldd	r24, Y+6	; 0x06
     692:	0e 94 1d 08 	call	0x103a	; 0x103a <digitalWrite>
     696:	0e 94 e7 02 	call	0x5ce	; 0x5ce <_ZN8SPIClass14endTransactionEv>
     69a:	81 2f       	mov	r24, r17
     69c:	df 91       	pop	r29
     69e:	cf 91       	pop	r28
     6a0:	1f 91       	pop	r17
     6a2:	08 95       	ret

000006a4 <_ZN7MCP_CAN19mcp2515_setRegisterEhh>:
     6a4:	ef 92       	push	r14
     6a6:	ff 92       	push	r15
     6a8:	1f 93       	push	r17
     6aa:	cf 93       	push	r28
     6ac:	df 93       	push	r29
     6ae:	1f 92       	push	r1
     6b0:	cd b7       	in	r28, 0x3d	; 61
     6b2:	de b7       	in	r29, 0x3e	; 62
     6b4:	7c 01       	movw	r14, r24
     6b6:	16 2f       	mov	r17, r22
     6b8:	80 e5       	ldi	r24, 0x50	; 80
     6ba:	91 e0       	ldi	r25, 0x01	; 1
     6bc:	49 83       	std	Y+1, r20	; 0x01
     6be:	0e 94 c6 02 	call	0x58c	; 0x58c <_ZN8SPIClass16beginTransactionE11SPISettings>
     6c2:	60 e0       	ldi	r22, 0x00	; 0
     6c4:	f7 01       	movw	r30, r14
     6c6:	86 81       	ldd	r24, Z+6	; 0x06
     6c8:	0e 94 1d 08 	call	0x103a	; 0x103a <digitalWrite>
     6cc:	82 e0       	ldi	r24, 0x02	; 2
     6ce:	0e 94 e0 02 	call	0x5c0	; 0x5c0 <_ZN8SPIClass8transferEh>
     6d2:	81 2f       	mov	r24, r17
     6d4:	0e 94 e0 02 	call	0x5c0	; 0x5c0 <_ZN8SPIClass8transferEh>
     6d8:	49 81       	ldd	r20, Y+1	; 0x01
     6da:	84 2f       	mov	r24, r20
     6dc:	0e 94 e0 02 	call	0x5c0	; 0x5c0 <_ZN8SPIClass8transferEh>
     6e0:	61 e0       	ldi	r22, 0x01	; 1
     6e2:	f7 01       	movw	r30, r14
     6e4:	86 81       	ldd	r24, Z+6	; 0x06
     6e6:	0e 94 1d 08 	call	0x103a	; 0x103a <digitalWrite>
     6ea:	0f 90       	pop	r0
     6ec:	df 91       	pop	r29
     6ee:	cf 91       	pop	r28
     6f0:	1f 91       	pop	r17
     6f2:	ff 90       	pop	r15
     6f4:	ef 90       	pop	r14
     6f6:	0c 94 e7 02 	jmp	0x5ce	; 0x5ce <_ZN8SPIClass14endTransactionEv>

000006fa <_ZN7MCP_CAN22mcp2515_modifyRegisterEhhh>:
     6fa:	ef 92       	push	r14
     6fc:	ff 92       	push	r15
     6fe:	1f 93       	push	r17
     700:	cf 93       	push	r28
     702:	df 93       	push	r29
     704:	00 d0       	rcall	.+0      	; 0x706 <_ZN7MCP_CAN22mcp2515_modifyRegisterEhhh+0xc>
     706:	cd b7       	in	r28, 0x3d	; 61
     708:	de b7       	in	r29, 0x3e	; 62
     70a:	7c 01       	movw	r14, r24
     70c:	16 2f       	mov	r17, r22
     70e:	80 e5       	ldi	r24, 0x50	; 80
     710:	91 e0       	ldi	r25, 0x01	; 1
     712:	2a 83       	std	Y+2, r18	; 0x02
     714:	49 83       	std	Y+1, r20	; 0x01
     716:	0e 94 c6 02 	call	0x58c	; 0x58c <_ZN8SPIClass16beginTransactionE11SPISettings>
     71a:	60 e0       	ldi	r22, 0x00	; 0
     71c:	f7 01       	movw	r30, r14
     71e:	86 81       	ldd	r24, Z+6	; 0x06
     720:	0e 94 1d 08 	call	0x103a	; 0x103a <digitalWrite>
     724:	85 e0       	ldi	r24, 0x05	; 5
     726:	0e 94 e0 02 	call	0x5c0	; 0x5c0 <_ZN8SPIClass8transferEh>
     72a:	81 2f       	mov	r24, r17
     72c:	0e 94 e0 02 	call	0x5c0	; 0x5c0 <_ZN8SPIClass8transferEh>
     730:	49 81       	ldd	r20, Y+1	; 0x01
     732:	84 2f       	mov	r24, r20
     734:	0e 94 e0 02 	call	0x5c0	; 0x5c0 <_ZN8SPIClass8transferEh>
     738:	2a 81       	ldd	r18, Y+2	; 0x02
     73a:	82 2f       	mov	r24, r18
     73c:	0e 94 e0 02 	call	0x5c0	; 0x5c0 <_ZN8SPIClass8transferEh>
     740:	61 e0       	ldi	r22, 0x01	; 1
     742:	f7 01       	movw	r30, r14
     744:	86 81       	ldd	r24, Z+6	; 0x06
     746:	0e 94 1d 08 	call	0x103a	; 0x103a <digitalWrite>
     74a:	0f 90       	pop	r0
     74c:	0f 90       	pop	r0
     74e:	df 91       	pop	r29
     750:	cf 91       	pop	r28
     752:	1f 91       	pop	r17
     754:	ff 90       	pop	r15
     756:	ef 90       	pop	r14
     758:	0c 94 e7 02 	jmp	0x5ce	; 0x5ce <_ZN8SPIClass14endTransactionEv>

0000075c <_ZN7MCP_CAN18mcp2515_readStatusEv>:
     75c:	1f 93       	push	r17
     75e:	cf 93       	push	r28
     760:	df 93       	push	r29
     762:	ec 01       	movw	r28, r24
     764:	80 e5       	ldi	r24, 0x50	; 80
     766:	91 e0       	ldi	r25, 0x01	; 1
     768:	0e 94 c6 02 	call	0x58c	; 0x58c <_ZN8SPIClass16beginTransactionE11SPISettings>
     76c:	60 e0       	ldi	r22, 0x00	; 0
     76e:	8e 81       	ldd	r24, Y+6	; 0x06
     770:	0e 94 1d 08 	call	0x103a	; 0x103a <digitalWrite>
     774:	80 ea       	ldi	r24, 0xA0	; 160
     776:	0e 94 e0 02 	call	0x5c0	; 0x5c0 <_ZN8SPIClass8transferEh>
     77a:	80 e0       	ldi	r24, 0x00	; 0
     77c:	0e 94 e0 02 	call	0x5c0	; 0x5c0 <_ZN8SPIClass8transferEh>
     780:	18 2f       	mov	r17, r24
     782:	61 e0       	ldi	r22, 0x01	; 1
     784:	8e 81       	ldd	r24, Y+6	; 0x06
     786:	0e 94 1d 08 	call	0x103a	; 0x103a <digitalWrite>
     78a:	0e 94 e7 02 	call	0x5ce	; 0x5ce <_ZN8SPIClass14endTransactionEv>
     78e:	81 2f       	mov	r24, r17
     790:	df 91       	pop	r29
     792:	cf 91       	pop	r28
     794:	1f 91       	pop	r17
     796:	08 95       	ret

00000798 <_ZN7MCP_CAN23mcp2515_setCANCTRL_ModeEh>:
     798:	0f 93       	push	r16
     79a:	1f 93       	push	r17
     79c:	cf 93       	push	r28
     79e:	8c 01       	movw	r16, r24
     7a0:	c6 2f       	mov	r28, r22
     7a2:	26 2f       	mov	r18, r22
     7a4:	40 ee       	ldi	r20, 0xE0	; 224
     7a6:	6f e0       	ldi	r22, 0x0F	; 15
     7a8:	0e 94 7d 03 	call	0x6fa	; 0x6fa <_ZN7MCP_CAN22mcp2515_modifyRegisterEhhh>
     7ac:	6f e0       	ldi	r22, 0x0F	; 15
     7ae:	c8 01       	movw	r24, r16
     7b0:	0e 94 30 03 	call	0x660	; 0x660 <_ZN7MCP_CAN20mcp2515_readRegisterEh>
     7b4:	98 2f       	mov	r25, r24
     7b6:	90 7e       	andi	r25, 0xE0	; 224
     7b8:	81 e0       	ldi	r24, 0x01	; 1
     7ba:	9c 13       	cpse	r25, r28
     7bc:	01 c0       	rjmp	.+2      	; 0x7c0 <_ZN7MCP_CAN23mcp2515_setCANCTRL_ModeEh+0x28>
     7be:	80 e0       	ldi	r24, 0x00	; 0
     7c0:	cf 91       	pop	r28
     7c2:	1f 91       	pop	r17
     7c4:	0f 91       	pop	r16
     7c6:	08 95       	ret

000007c8 <_ZN7MCP_CAN18mcp2515_configRateEhh>:
     7c8:	0f 93       	push	r16
     7ca:	1f 93       	push	r17
     7cc:	cf 93       	push	r28
     7ce:	df 93       	push	r29
     7d0:	41 30       	cpi	r20, 0x01	; 1
     7d2:	21 f0       	breq	.+8      	; 0x7dc <_ZN7MCP_CAN18mcp2515_configRateEhh+0x14>
     7d4:	42 30       	cpi	r20, 0x02	; 2
     7d6:	09 f4       	brne	.+2      	; 0x7da <_ZN7MCP_CAN18mcp2515_configRateEhh+0x12>
     7d8:	3f c0       	rjmp	.+126    	; 0x858 <_ZN7MCP_CAN18mcp2515_configRateEhh+0x90>
     7da:	71 c0       	rjmp	.+226    	; 0x8be <_ZN7MCP_CAN18mcp2515_configRateEhh+0xf6>
     7dc:	46 2f       	mov	r20, r22
     7de:	50 e0       	ldi	r21, 0x00	; 0
     7e0:	fa 01       	movw	r30, r20
     7e2:	31 97       	sbiw	r30, 0x01	; 1
     7e4:	e2 31       	cpi	r30, 0x12	; 18
     7e6:	f1 05       	cpc	r31, r1
     7e8:	08 f0       	brcs	.+2      	; 0x7ec <_ZN7MCP_CAN18mcp2515_configRateEhh+0x24>
     7ea:	69 c0       	rjmp	.+210    	; 0x8be <_ZN7MCP_CAN18mcp2515_configRateEhh+0xf6>
     7ec:	ec 5c       	subi	r30, 0xCC	; 204
     7ee:	ff 4f       	sbci	r31, 0xFF	; 255
     7f0:	0c 94 bf 0e 	jmp	0x1d7e	; 0x1d7e <__tablejump2__>
     7f4:	c7 e8       	ldi	r28, 0x87	; 135
     7f6:	df ef       	ldi	r29, 0xFF	; 255
     7f8:	6e c0       	rjmp	.+220    	; 0x8d6 <_ZN7MCP_CAN18mcp2515_configRateEhh+0x10e>
     7fa:	c7 e0       	ldi	r28, 0x07	; 7
     7fc:	da eb       	ldi	r29, 0xBA	; 186
     7fe:	67 c0       	rjmp	.+206    	; 0x8ce <_ZN7MCP_CAN18mcp2515_configRateEhh+0x106>
     800:	c5 e8       	ldi	r28, 0x85	; 133
     802:	d1 ef       	ldi	r29, 0xF1	; 241
     804:	64 c0       	rjmp	.+200    	; 0x8ce <_ZN7MCP_CAN18mcp2515_configRateEhh+0x106>
     806:	c7 e0       	ldi	r28, 0x07	; 7
     808:	de eb       	ldi	r29, 0xBE	; 190
     80a:	49 e0       	ldi	r20, 0x09	; 9
     80c:	65 c0       	rjmp	.+202    	; 0x8d8 <_ZN7MCP_CAN18mcp2515_configRateEhh+0x110>
     80e:	c7 e8       	ldi	r28, 0x87	; 135
     810:	df ef       	ldi	r29, 0xFF	; 255
     812:	35 c0       	rjmp	.+106    	; 0x87e <_ZN7MCP_CAN18mcp2515_configRateEhh+0xb6>
     814:	c7 e8       	ldi	r28, 0x87	; 135
     816:	da ef       	ldi	r29, 0xFA	; 250
     818:	32 c0       	rjmp	.+100    	; 0x87e <_ZN7MCP_CAN18mcp2515_configRateEhh+0xb6>
     81a:	c7 e8       	ldi	r28, 0x87	; 135
     81c:	df ef       	ldi	r29, 0xFF	; 255
     81e:	36 c0       	rjmp	.+108    	; 0x88c <_ZN7MCP_CAN18mcp2515_configRateEhh+0xc4>
     820:	c7 e0       	ldi	r28, 0x07	; 7
     822:	de eb       	ldi	r29, 0xBE	; 190
     824:	33 c0       	rjmp	.+102    	; 0x88c <_ZN7MCP_CAN18mcp2515_configRateEhh+0xc4>
     826:	c7 e0       	ldi	r28, 0x07	; 7
     828:	dd ea       	ldi	r29, 0xAD	; 173
     82a:	30 c0       	rjmp	.+96     	; 0x88c <_ZN7MCP_CAN18mcp2515_configRateEhh+0xc4>
     82c:	c7 e8       	ldi	r28, 0x87	; 135
     82e:	da ef       	ldi	r29, 0xFA	; 250
     830:	2d c0       	rjmp	.+90     	; 0x88c <_ZN7MCP_CAN18mcp2515_configRateEhh+0xc4>
     832:	c6 e8       	ldi	r28, 0x86	; 134
     834:	d0 ef       	ldi	r29, 0xF0	; 240
     836:	2a c0       	rjmp	.+84     	; 0x88c <_ZN7MCP_CAN18mcp2515_configRateEhh+0xc4>
     838:	c7 e8       	ldi	r28, 0x87	; 135
     83a:	da ef       	ldi	r29, 0xFA	; 250
     83c:	2e c0       	rjmp	.+92     	; 0x89a <_ZN7MCP_CAN18mcp2515_configRateEhh+0xd2>
     83e:	c5 e8       	ldi	r28, 0x85	; 133
     840:	d1 ef       	ldi	r29, 0xF1	; 241
     842:	41 e4       	ldi	r20, 0x41	; 65
     844:	49 c0       	rjmp	.+146    	; 0x8d8 <_ZN7MCP_CAN18mcp2515_configRateEhh+0x110>
     846:	c6 e8       	ldi	r28, 0x86	; 134
     848:	d0 ef       	ldi	r29, 0xF0	; 240
     84a:	2e c0       	rjmp	.+92     	; 0x8a8 <_ZN7MCP_CAN18mcp2515_configRateEhh+0xe0>
     84c:	c4 e0       	ldi	r28, 0x04	; 4
     84e:	d0 ea       	ldi	r29, 0xA0	; 160
     850:	2b c0       	rjmp	.+86     	; 0x8a8 <_ZN7MCP_CAN18mcp2515_configRateEhh+0xe0>
     852:	c2 e8       	ldi	r28, 0x82	; 130
     854:	d0 ed       	ldi	r29, 0xD0	; 208
     856:	28 c0       	rjmp	.+80     	; 0x8a8 <_ZN7MCP_CAN18mcp2515_configRateEhh+0xe0>
     858:	46 2f       	mov	r20, r22
     85a:	50 e0       	ldi	r21, 0x00	; 0
     85c:	fa 01       	movw	r30, r20
     85e:	31 97       	sbiw	r30, 0x01	; 1
     860:	e2 31       	cpi	r30, 0x12	; 18
     862:	f1 05       	cpc	r31, r1
     864:	60 f5       	brcc	.+88     	; 0x8be <_ZN7MCP_CAN18mcp2515_configRateEhh+0xf6>
     866:	ea 5b       	subi	r30, 0xBA	; 186
     868:	ff 4f       	sbci	r31, 0xFF	; 255
     86a:	0c 94 bf 0e 	jmp	0x1d7e	; 0x1d7e <__tablejump2__>
     86e:	c7 e0       	ldi	r28, 0x07	; 7
     870:	df eb       	ldi	r29, 0xBF	; 191
     872:	2d c0       	rjmp	.+90     	; 0x8ce <_ZN7MCP_CAN18mcp2515_configRateEhh+0x106>
     874:	c7 e0       	ldi	r28, 0x07	; 7
     876:	df eb       	ldi	r29, 0xBF	; 191
     878:	02 c0       	rjmp	.+4      	; 0x87e <_ZN7MCP_CAN18mcp2515_configRateEhh+0xb6>
     87a:	c4 e0       	ldi	r28, 0x04	; 4
     87c:	d4 ea       	ldi	r29, 0xA4	; 164
     87e:	47 e0       	ldi	r20, 0x07	; 7
     880:	2b c0       	rjmp	.+86     	; 0x8d8 <_ZN7MCP_CAN18mcp2515_configRateEhh+0x110>
     882:	c7 e0       	ldi	r28, 0x07	; 7
     884:	df eb       	ldi	r29, 0xBF	; 191
     886:	02 c0       	rjmp	.+4      	; 0x88c <_ZN7MCP_CAN18mcp2515_configRateEhh+0xc4>
     888:	c6 e0       	ldi	r28, 0x06	; 6
     88a:	d4 eb       	ldi	r29, 0xB4	; 180
     88c:	43 e0       	ldi	r20, 0x03	; 3
     88e:	24 c0       	rjmp	.+72     	; 0x8d8 <_ZN7MCP_CAN18mcp2515_configRateEhh+0x110>
     890:	c7 e0       	ldi	r28, 0x07	; 7
     892:	df eb       	ldi	r29, 0xBF	; 191
     894:	02 c0       	rjmp	.+4      	; 0x89a <_ZN7MCP_CAN18mcp2515_configRateEhh+0xd2>
     896:	c6 e0       	ldi	r28, 0x06	; 6
     898:	d4 eb       	ldi	r29, 0xB4	; 180
     89a:	41 e0       	ldi	r20, 0x01	; 1
     89c:	1d c0       	rjmp	.+58     	; 0x8d8 <_ZN7MCP_CAN18mcp2515_configRateEhh+0x110>
     89e:	c5 e0       	ldi	r28, 0x05	; 5
     8a0:	d1 eb       	ldi	r29, 0xB1	; 177
     8a2:	fb cf       	rjmp	.-10     	; 0x89a <_ZN7MCP_CAN18mcp2515_configRateEhh+0xd2>
     8a4:	c6 e0       	ldi	r28, 0x06	; 6
     8a6:	d4 eb       	ldi	r29, 0xB4	; 180
     8a8:	40 e0       	ldi	r20, 0x00	; 0
     8aa:	16 c0       	rjmp	.+44     	; 0x8d8 <_ZN7MCP_CAN18mcp2515_configRateEhh+0x110>
     8ac:	c5 e0       	ldi	r28, 0x05	; 5
     8ae:	d1 eb       	ldi	r29, 0xB1	; 177
     8b0:	fb cf       	rjmp	.-10     	; 0x8a8 <_ZN7MCP_CAN18mcp2515_configRateEhh+0xe0>
     8b2:	c2 e0       	ldi	r28, 0x02	; 2
     8b4:	d0 e9       	ldi	r29, 0x90	; 144
     8b6:	f8 cf       	rjmp	.-16     	; 0x8a8 <_ZN7MCP_CAN18mcp2515_configRateEhh+0xe0>
     8b8:	c0 e0       	ldi	r28, 0x00	; 0
     8ba:	d0 e8       	ldi	r29, 0x80	; 128
     8bc:	f5 cf       	rjmp	.-22     	; 0x8a8 <_ZN7MCP_CAN18mcp2515_configRateEhh+0xe0>
     8be:	81 e0       	ldi	r24, 0x01	; 1
     8c0:	1a c0       	rjmp	.+52     	; 0x8f6 <_ZN7MCP_CAN18mcp2515_configRateEhh+0x12e>
     8c2:	c7 e8       	ldi	r28, 0x87	; 135
     8c4:	df ef       	ldi	r29, 0xFF	; 255
     8c6:	4f e3       	ldi	r20, 0x3F	; 63
     8c8:	07 c0       	rjmp	.+14     	; 0x8d8 <_ZN7MCP_CAN18mcp2515_configRateEhh+0x110>
     8ca:	c7 e8       	ldi	r28, 0x87	; 135
     8cc:	df ef       	ldi	r29, 0xFF	; 255
     8ce:	4f e0       	ldi	r20, 0x0F	; 15
     8d0:	03 c0       	rjmp	.+6      	; 0x8d8 <_ZN7MCP_CAN18mcp2515_configRateEhh+0x110>
     8d2:	c7 e0       	ldi	r28, 0x07	; 7
     8d4:	df eb       	ldi	r29, 0xBF	; 191
     8d6:	4f e1       	ldi	r20, 0x1F	; 31
     8d8:	8c 01       	movw	r16, r24
     8da:	6a e2       	ldi	r22, 0x2A	; 42
     8dc:	0e 94 52 03 	call	0x6a4	; 0x6a4 <_ZN7MCP_CAN19mcp2515_setRegisterEhh>
     8e0:	4d 2f       	mov	r20, r29
     8e2:	69 e2       	ldi	r22, 0x29	; 41
     8e4:	c8 01       	movw	r24, r16
     8e6:	0e 94 52 03 	call	0x6a4	; 0x6a4 <_ZN7MCP_CAN19mcp2515_setRegisterEhh>
     8ea:	4c 2f       	mov	r20, r28
     8ec:	68 e2       	ldi	r22, 0x28	; 40
     8ee:	c8 01       	movw	r24, r16
     8f0:	0e 94 52 03 	call	0x6a4	; 0x6a4 <_ZN7MCP_CAN19mcp2515_setRegisterEhh>
     8f4:	80 e0       	ldi	r24, 0x00	; 0
     8f6:	df 91       	pop	r29
     8f8:	cf 91       	pop	r28
     8fa:	1f 91       	pop	r17
     8fc:	0f 91       	pop	r16
     8fe:	08 95       	ret

00000900 <_ZN7MCP_CAN22mcp2515_initCANBuffersEv>:
     900:	0f 93       	push	r16
     902:	1f 93       	push	r17
     904:	cf 93       	push	r28
     906:	8c 01       	movw	r16, r24
     908:	c0 e3       	ldi	r28, 0x30	; 48
     90a:	40 e0       	ldi	r20, 0x00	; 0
     90c:	6c 2f       	mov	r22, r28
     90e:	c8 01       	movw	r24, r16
     910:	0e 94 52 03 	call	0x6a4	; 0x6a4 <_ZN7MCP_CAN19mcp2515_setRegisterEhh>
     914:	60 e1       	ldi	r22, 0x10	; 16
     916:	6c 0f       	add	r22, r28
     918:	40 e0       	ldi	r20, 0x00	; 0
     91a:	c8 01       	movw	r24, r16
     91c:	0e 94 52 03 	call	0x6a4	; 0x6a4 <_ZN7MCP_CAN19mcp2515_setRegisterEhh>
     920:	60 e2       	ldi	r22, 0x20	; 32
     922:	6c 0f       	add	r22, r28
     924:	40 e0       	ldi	r20, 0x00	; 0
     926:	c8 01       	movw	r24, r16
     928:	0e 94 52 03 	call	0x6a4	; 0x6a4 <_ZN7MCP_CAN19mcp2515_setRegisterEhh>
     92c:	cf 5f       	subi	r28, 0xFF	; 255
     92e:	ce 33       	cpi	r28, 0x3E	; 62
     930:	61 f7       	brne	.-40     	; 0x90a <_ZN7MCP_CAN22mcp2515_initCANBuffersEv+0xa>
     932:	40 e0       	ldi	r20, 0x00	; 0
     934:	60 e6       	ldi	r22, 0x60	; 96
     936:	c8 01       	movw	r24, r16
     938:	0e 94 52 03 	call	0x6a4	; 0x6a4 <_ZN7MCP_CAN19mcp2515_setRegisterEhh>
     93c:	40 e0       	ldi	r20, 0x00	; 0
     93e:	60 e7       	ldi	r22, 0x70	; 112
     940:	c8 01       	movw	r24, r16
     942:	cf 91       	pop	r28
     944:	1f 91       	pop	r17
     946:	0f 91       	pop	r16
     948:	0c 94 52 03 	jmp	0x6a4	; 0x6a4 <_ZN7MCP_CAN19mcp2515_setRegisterEhh>

0000094c <_ZN7MCP_CAN12mcp2515_initEhh>:
     94c:	ef 92       	push	r14
     94e:	ff 92       	push	r15
     950:	0f 93       	push	r16
     952:	1f 93       	push	r17
     954:	cf 93       	push	r28
     956:	df 93       	push	r29
     958:	1f 92       	push	r1
     95a:	cd b7       	in	r28, 0x3d	; 61
     95c:	de b7       	in	r29, 0x3e	; 62
     95e:	7c 01       	movw	r14, r24
     960:	06 2f       	mov	r16, r22
     962:	49 83       	std	Y+1, r20	; 0x01
     964:	0e 94 14 03 	call	0x628	; 0x628 <_ZN7MCP_CAN13mcp2515_resetEv>
     968:	60 e8       	ldi	r22, 0x80	; 128
     96a:	c7 01       	movw	r24, r14
     96c:	0e 94 cc 03 	call	0x798	; 0x798 <_ZN7MCP_CAN23mcp2515_setCANCTRL_ModeEh>
     970:	18 2f       	mov	r17, r24
     972:	49 81       	ldd	r20, Y+1	; 0x01
     974:	88 23       	and	r24, r24
     976:	19 f0       	breq	.+6      	; 0x97e <_ZN7MCP_CAN12mcp2515_initEhh+0x32>
     978:	6c e9       	ldi	r22, 0x9C	; 156
     97a:	71 e0       	ldi	r23, 0x01	; 1
     97c:	37 c0       	rjmp	.+110    	; 0x9ec <_ZN7MCP_CAN12mcp2515_initEhh+0xa0>
     97e:	66 eb       	ldi	r22, 0xB6	; 182
     980:	71 e0       	ldi	r23, 0x01	; 1
     982:	85 e4       	ldi	r24, 0x45	; 69
     984:	93 e0       	ldi	r25, 0x03	; 3
     986:	49 83       	std	Y+1, r20	; 0x01
     988:	0e 94 88 0a 	call	0x1510	; 0x1510 <_ZN5Print5printEPKc>
     98c:	49 81       	ldd	r20, Y+1	; 0x01
     98e:	60 2f       	mov	r22, r16
     990:	c7 01       	movw	r24, r14
     992:	0e 94 e4 03 	call	0x7c8	; 0x7c8 <_ZN7MCP_CAN18mcp2515_configRateEhh>
     996:	88 23       	and	r24, r24
     998:	19 f0       	breq	.+6      	; 0x9a0 <_ZN7MCP_CAN12mcp2515_initEhh+0x54>
     99a:	64 ed       	ldi	r22, 0xD4	; 212
     99c:	71 e0       	ldi	r23, 0x01	; 1
     99e:	26 c0       	rjmp	.+76     	; 0x9ec <_ZN7MCP_CAN12mcp2515_initEhh+0xa0>
     9a0:	66 ee       	ldi	r22, 0xE6	; 230
     9a2:	71 e0       	ldi	r23, 0x01	; 1
     9a4:	85 e4       	ldi	r24, 0x45	; 69
     9a6:	93 e0       	ldi	r25, 0x03	; 3
     9a8:	0e 94 88 0a 	call	0x1510	; 0x1510 <_ZN5Print5printEPKc>
     9ac:	c7 01       	movw	r24, r14
     9ae:	0e 94 80 04 	call	0x900	; 0x900 <_ZN7MCP_CAN22mcp2515_initCANBuffersEv>
     9b2:	43 e0       	ldi	r20, 0x03	; 3
     9b4:	6b e2       	ldi	r22, 0x2B	; 43
     9b6:	c7 01       	movw	r24, r14
     9b8:	0e 94 52 03 	call	0x6a4	; 0x6a4 <_ZN7MCP_CAN19mcp2515_setRegisterEhh>
     9bc:	24 e0       	ldi	r18, 0x04	; 4
     9be:	44 e6       	ldi	r20, 0x64	; 100
     9c0:	60 e6       	ldi	r22, 0x60	; 96
     9c2:	c7 01       	movw	r24, r14
     9c4:	0e 94 7d 03 	call	0x6fa	; 0x6fa <_ZN7MCP_CAN22mcp2515_modifyRegisterEhhh>
     9c8:	20 e0       	ldi	r18, 0x00	; 0
     9ca:	40 e6       	ldi	r20, 0x60	; 96
     9cc:	60 e7       	ldi	r22, 0x70	; 112
     9ce:	c7 01       	movw	r24, r14
     9d0:	0e 94 7d 03 	call	0x6fa	; 0x6fa <_ZN7MCP_CAN22mcp2515_modifyRegisterEhhh>
     9d4:	60 e0       	ldi	r22, 0x00	; 0
     9d6:	c7 01       	movw	r24, r14
     9d8:	0e 94 cc 03 	call	0x798	; 0x798 <_ZN7MCP_CAN23mcp2515_setCANCTRL_ModeEh>
     9dc:	18 2f       	mov	r17, r24
     9de:	88 23       	and	r24, r24
     9e0:	19 f0       	breq	.+6      	; 0x9e8 <_ZN7MCP_CAN12mcp2515_initEhh+0x9c>
     9e2:	6b ef       	ldi	r22, 0xFB	; 251
     9e4:	71 e0       	ldi	r23, 0x01	; 1
     9e6:	02 c0       	rjmp	.+4      	; 0x9ec <_ZN7MCP_CAN12mcp2515_initEhh+0xa0>
     9e8:	66 e1       	ldi	r22, 0x16	; 22
     9ea:	72 e0       	ldi	r23, 0x02	; 2
     9ec:	85 e4       	ldi	r24, 0x45	; 69
     9ee:	93 e0       	ldi	r25, 0x03	; 3
     9f0:	0e 94 88 0a 	call	0x1510	; 0x1510 <_ZN5Print5printEPKc>
     9f4:	81 2f       	mov	r24, r17
     9f6:	0f 90       	pop	r0
     9f8:	df 91       	pop	r29
     9fa:	cf 91       	pop	r28
     9fc:	1f 91       	pop	r17
     9fe:	0f 91       	pop	r16
     a00:	ff 90       	pop	r15
     a02:	ef 90       	pop	r14
     a04:	08 95       	ret

00000a06 <_Z17mcp2515_id_to_bufhmPh>:
     a06:	f9 01       	movw	r30, r18
     a08:	81 30       	cpi	r24, 0x01	; 1
     a0a:	b1 f4       	brne	.+44     	; 0xa38 <_Z17mcp2515_id_to_bufhmPh+0x32>
     a0c:	43 83       	std	Z+3, r20	; 0x03
     a0e:	52 83       	std	Z+2, r21	; 0x02
     a10:	ab 01       	movw	r20, r22
     a12:	66 27       	eor	r22, r22
     a14:	77 27       	eor	r23, r23
     a16:	94 2f       	mov	r25, r20
     a18:	9c 71       	andi	r25, 0x1C	; 28
     a1a:	84 2f       	mov	r24, r20
     a1c:	83 70       	andi	r24, 0x03	; 3
     a1e:	28 e0       	ldi	r18, 0x08	; 8
     a20:	92 9f       	mul	r25, r18
     a22:	80 0d       	add	r24, r0
     a24:	11 24       	eor	r1, r1
     a26:	88 60       	ori	r24, 0x08	; 8
     a28:	81 83       	std	Z+1, r24	; 0x01
     a2a:	65 e0       	ldi	r22, 0x05	; 5
     a2c:	56 95       	lsr	r21
     a2e:	47 95       	ror	r20
     a30:	6a 95       	dec	r22
     a32:	e1 f7       	brne	.-8      	; 0xa2c <_Z17mcp2515_id_to_bufhmPh+0x26>
     a34:	40 83       	st	Z, r20
     a36:	08 95       	ret
     a38:	ca 01       	movw	r24, r20
     a3a:	23 e0       	ldi	r18, 0x03	; 3
     a3c:	96 95       	lsr	r25
     a3e:	87 95       	ror	r24
     a40:	2a 95       	dec	r18
     a42:	e1 f7       	brne	.-8      	; 0xa3c <_Z17mcp2515_id_to_bufhmPh+0x36>
     a44:	80 83       	st	Z, r24
     a46:	42 95       	swap	r20
     a48:	44 0f       	add	r20, r20
     a4a:	40 7e       	andi	r20, 0xE0	; 224
     a4c:	41 83       	std	Z+1, r20	; 0x01
     a4e:	13 82       	std	Z+3, r1	; 0x03
     a50:	12 82       	std	Z+2, r1	; 0x02
     a52:	08 95       	ret

00000a54 <_ZN7MCP_CAN22mcp2515_start_transmitEh>:
     a54:	1f 93       	push	r17
     a56:	cf 93       	push	r28
     a58:	df 93       	push	r29
     a5a:	ec 01       	movw	r28, r24
     a5c:	16 2f       	mov	r17, r22
     a5e:	80 e5       	ldi	r24, 0x50	; 80
     a60:	91 e0       	ldi	r25, 0x01	; 1
     a62:	0e 94 c6 02 	call	0x58c	; 0x58c <_ZN8SPIClass16beginTransactionE11SPISettings>
     a66:	60 e0       	ldi	r22, 0x00	; 0
     a68:	8e 81       	ldd	r24, Y+6	; 0x06
     a6a:	0e 94 1d 08 	call	0x103a	; 0x103a <digitalWrite>
     a6e:	81 2f       	mov	r24, r17
     a70:	0e 94 f8 02 	call	0x5f0	; 0x5f0 <_Z11txSidhToRTSh>
     a74:	0e 94 e0 02 	call	0x5c0	; 0x5c0 <_ZN8SPIClass8transferEh>
     a78:	61 e0       	ldi	r22, 0x01	; 1
     a7a:	8e 81       	ldd	r24, Y+6	; 0x06
     a7c:	0e 94 1d 08 	call	0x103a	; 0x103a <digitalWrite>
     a80:	df 91       	pop	r29
     a82:	cf 91       	pop	r28
     a84:	1f 91       	pop	r17
     a86:	0c 94 e7 02 	jmp	0x5ce	; 0x5ce <_ZN8SPIClass14endTransactionEv>

00000a8a <_ZN7MCP_CAN20mcp2515_write_canMsgEhmhhhPVKh>:
     a8a:	8f 92       	push	r8
     a8c:	9f 92       	push	r9
     a8e:	af 92       	push	r10
     a90:	bf 92       	push	r11
     a92:	cf 92       	push	r12
     a94:	df 92       	push	r13
     a96:	ef 92       	push	r14
     a98:	ff 92       	push	r15
     a9a:	0f 93       	push	r16
     a9c:	1f 93       	push	r17
     a9e:	cf 93       	push	r28
     aa0:	df 93       	push	r29
     aa2:	cd b7       	in	r28, 0x3d	; 61
     aa4:	de b7       	in	r29, 0x3e	; 62
     aa6:	28 97       	sbiw	r28, 0x08	; 8
     aa8:	0f b6       	in	r0, 0x3f	; 63
     aaa:	f8 94       	cli
     aac:	de bf       	out	0x3e, r29	; 62
     aae:	0f be       	out	0x3f, r0	; 63
     ab0:	cd bf       	out	0x3d, r28	; 61
     ab2:	4c 01       	movw	r8, r24
     ab4:	d6 2e       	mov	r13, r22
     ab6:	ba 01       	movw	r22, r20
     ab8:	a9 01       	movw	r20, r18
     aba:	8d 2d       	mov	r24, r13
     abc:	4d 83       	std	Y+5, r20	; 0x05
     abe:	5e 83       	std	Y+6, r21	; 0x06
     ac0:	6f 83       	std	Y+7, r22	; 0x07
     ac2:	78 87       	std	Y+8, r23	; 0x08
     ac4:	0e 94 06 03 	call	0x60c	; 0x60c <_Z14txSidhToTxLoadh>
     ac8:	18 2f       	mov	r17, r24
     aca:	4d 81       	ldd	r20, Y+5	; 0x05
     acc:	5e 81       	ldd	r21, Y+6	; 0x06
     ace:	6f 81       	ldd	r22, Y+7	; 0x07
     ad0:	78 85       	ldd	r23, Y+8	; 0x08
     ad2:	e1 10       	cpse	r14, r1
     ad4:	02 c0       	rjmp	.+4      	; 0xada <_ZN7MCP_CAN20mcp2515_write_canMsgEhmhhhPVKh+0x50>
     ad6:	f1 2c       	mov	r15, r1
     ad8:	02 c0       	rjmp	.+4      	; 0xade <_ZN7MCP_CAN20mcp2515_write_canMsgEhmhhhPVKh+0x54>
     ada:	90 e4       	ldi	r25, 0x40	; 64
     adc:	f9 2e       	mov	r15, r25
     ade:	9e 01       	movw	r18, r28
     ae0:	2f 5f       	subi	r18, 0xFF	; 255
     ae2:	3f 4f       	sbci	r19, 0xFF	; 255
     ae4:	80 2f       	mov	r24, r16
     ae6:	0e 94 03 05 	call	0xa06	; 0xa06 <_Z17mcp2515_id_to_bufhmPh>
     aea:	80 e5       	ldi	r24, 0x50	; 80
     aec:	91 e0       	ldi	r25, 0x01	; 1
     aee:	0e 94 c6 02 	call	0x58c	; 0x58c <_ZN8SPIClass16beginTransactionE11SPISettings>
     af2:	60 e0       	ldi	r22, 0x00	; 0
     af4:	f4 01       	movw	r30, r8
     af6:	86 81       	ldd	r24, Z+6	; 0x06
     af8:	0e 94 1d 08 	call	0x103a	; 0x103a <digitalWrite>
     afc:	81 2f       	mov	r24, r17
     afe:	0e 94 e0 02 	call	0x5c0	; 0x5c0 <_ZN8SPIClass8transferEh>
     b02:	8e 01       	movw	r16, r28
     b04:	0f 5f       	subi	r16, 0xFF	; 255
     b06:	1f 4f       	sbci	r17, 0xFF	; 255
     b08:	84 e0       	ldi	r24, 0x04	; 4
     b0a:	e8 2e       	mov	r14, r24
     b0c:	e0 0e       	add	r14, r16
     b0e:	f8 01       	movw	r30, r16
     b10:	81 91       	ld	r24, Z+
     b12:	8f 01       	movw	r16, r30
     b14:	0e 94 e0 02 	call	0x5c0	; 0x5c0 <_ZN8SPIClass8transferEh>
     b18:	e0 12       	cpse	r14, r16
     b1a:	f9 cf       	rjmp	.-14     	; 0xb0e <_ZN7MCP_CAN20mcp2515_write_canMsgEhmhhhPVKh+0x84>
     b1c:	8f 2d       	mov	r24, r15
     b1e:	8c 29       	or	r24, r12
     b20:	0e 94 e0 02 	call	0x5c0	; 0x5c0 <_ZN8SPIClass8transferEh>
     b24:	75 01       	movw	r14, r10
     b26:	10 e0       	ldi	r17, 0x00	; 0
     b28:	1c 15       	cp	r17, r12
     b2a:	49 f0       	breq	.+18     	; 0xb3e <_ZN7MCP_CAN20mcp2515_write_canMsgEhmhhhPVKh+0xb4>
     b2c:	18 30       	cpi	r17, 0x08	; 8
     b2e:	39 f0       	breq	.+14     	; 0xb3e <_ZN7MCP_CAN20mcp2515_write_canMsgEhmhhhPVKh+0xb4>
     b30:	f7 01       	movw	r30, r14
     b32:	81 91       	ld	r24, Z+
     b34:	7f 01       	movw	r14, r30
     b36:	0e 94 e0 02 	call	0x5c0	; 0x5c0 <_ZN8SPIClass8transferEh>
     b3a:	1f 5f       	subi	r17, 0xFF	; 255
     b3c:	f5 cf       	rjmp	.-22     	; 0xb28 <_ZN7MCP_CAN20mcp2515_write_canMsgEhmhhhPVKh+0x9e>
     b3e:	61 e0       	ldi	r22, 0x01	; 1
     b40:	f4 01       	movw	r30, r8
     b42:	86 81       	ldd	r24, Z+6	; 0x06
     b44:	0e 94 1d 08 	call	0x103a	; 0x103a <digitalWrite>
     b48:	0e 94 e7 02 	call	0x5ce	; 0x5ce <_ZN8SPIClass14endTransactionEv>
     b4c:	6d 2d       	mov	r22, r13
     b4e:	c4 01       	movw	r24, r8
     b50:	0e 94 2a 05 	call	0xa54	; 0xa54 <_ZN7MCP_CAN22mcp2515_start_transmitEh>
     b54:	28 96       	adiw	r28, 0x08	; 8
     b56:	0f b6       	in	r0, 0x3f	; 63
     b58:	f8 94       	cli
     b5a:	de bf       	out	0x3e, r29	; 62
     b5c:	0f be       	out	0x3f, r0	; 63
     b5e:	cd bf       	out	0x3d, r28	; 61
     b60:	df 91       	pop	r29
     b62:	cf 91       	pop	r28
     b64:	1f 91       	pop	r17
     b66:	0f 91       	pop	r16
     b68:	ff 90       	pop	r15
     b6a:	ef 90       	pop	r14
     b6c:	df 90       	pop	r13
     b6e:	cf 90       	pop	r12
     b70:	bf 90       	pop	r11
     b72:	af 90       	pop	r10
     b74:	9f 90       	pop	r9
     b76:	8f 90       	pop	r8
     b78:	08 95       	ret

00000b7a <_ZN7MCP_CAN24mcp2515_getNextFreeTXBufEPh>:
     b7a:	ef 92       	push	r14
     b7c:	ff 92       	push	r15
     b7e:	0f 93       	push	r16
     b80:	1f 93       	push	r17
     b82:	cf 93       	push	r28
     b84:	8c 01       	movw	r16, r24
     b86:	7b 01       	movw	r14, r22
     b88:	0e 94 ae 03 	call	0x75c	; 0x75c <_ZN7MCP_CAN18mcp2515_readStatusEv>
     b8c:	84 75       	andi	r24, 0x54	; 84
     b8e:	f7 01       	movw	r30, r14
     b90:	10 82       	st	Z, r1
     b92:	84 35       	cpi	r24, 0x54	; 84
     b94:	91 f1       	breq	.+100    	; 0xbfa <_ZN7MCP_CAN24mcp2515_getNextFreeTXBufEPh+0x80>
     b96:	f8 01       	movw	r30, r16
     b98:	91 85       	ldd	r25, Z+9	; 0x09
     b9a:	23 e0       	ldi	r18, 0x03	; 3
     b9c:	30 e0       	ldi	r19, 0x00	; 0
     b9e:	29 1b       	sub	r18, r25
     ba0:	31 09       	sbc	r19, r1
     ba2:	6d ee       	ldi	r22, 0xED	; 237
     ba4:	72 e0       	ldi	r23, 0x02	; 2
     ba6:	fb 01       	movw	r30, r22
     ba8:	9e 2f       	mov	r25, r30
     baa:	96 1b       	sub	r25, r22
     bac:	49 2f       	mov	r20, r25
     bae:	50 e0       	ldi	r21, 0x00	; 0
     bb0:	42 17       	cp	r20, r18
     bb2:	53 07       	cpc	r21, r19
     bb4:	14 f5       	brge	.+68     	; 0xbfa <_ZN7MCP_CAN24mcp2515_getNextFreeTXBufEPh+0x80>
     bb6:	93 30       	cpi	r25, 0x03	; 3
     bb8:	10 f4       	brcc	.+4      	; 0xbbe <_ZN7MCP_CAN24mcp2515_getNextFreeTXBufEPh+0x44>
     bba:	c0 81       	ld	r28, Z
     bbc:	01 c0       	rjmp	.+2      	; 0xbc0 <_ZN7MCP_CAN24mcp2515_getNextFreeTXBufEPh+0x46>
     bbe:	cf ef       	ldi	r28, 0xFF	; 255
     bc0:	c8 23       	and	r28, r24
     bc2:	31 96       	adiw	r30, 0x01	; 1
     bc4:	c1 11       	cpse	r28, r1
     bc6:	f0 cf       	rjmp	.-32     	; 0xba8 <_ZN7MCP_CAN24mcp2515_getNextFreeTXBufEPh+0x2e>
     bc8:	93 30       	cpi	r25, 0x03	; 3
     bca:	28 f4       	brcc	.+10     	; 0xbd6 <_ZN7MCP_CAN24mcp2515_getNextFreeTXBufEPh+0x5c>
     bcc:	fa 01       	movw	r30, r20
     bce:	ed 50       	subi	r30, 0x0D	; 13
     bd0:	fd 4f       	sbci	r31, 0xFD	; 253
     bd2:	20 81       	ld	r18, Z
     bd4:	01 c0       	rjmp	.+2      	; 0xbd8 <_ZN7MCP_CAN24mcp2515_getNextFreeTXBufEPh+0x5e>
     bd6:	20 e5       	ldi	r18, 0x50	; 80
     bd8:	2f 5f       	subi	r18, 0xFF	; 255
     bda:	f7 01       	movw	r30, r14
     bdc:	20 83       	st	Z, r18
     bde:	93 30       	cpi	r25, 0x03	; 3
     be0:	28 f4       	brcc	.+10     	; 0xbec <_ZN7MCP_CAN24mcp2515_getNextFreeTXBufEPh+0x72>
     be2:	fa 01       	movw	r30, r20
     be4:	e0 51       	subi	r30, 0x10	; 16
     be6:	fd 4f       	sbci	r31, 0xFD	; 253
     be8:	40 81       	ld	r20, Z
     bea:	01 c0       	rjmp	.+2      	; 0xbee <_ZN7MCP_CAN24mcp2515_getNextFreeTXBufEPh+0x74>
     bec:	40 e0       	ldi	r20, 0x00	; 0
     bee:	20 e0       	ldi	r18, 0x00	; 0
     bf0:	6c e2       	ldi	r22, 0x2C	; 44
     bf2:	c8 01       	movw	r24, r16
     bf4:	0e 94 7d 03 	call	0x6fa	; 0x6fa <_ZN7MCP_CAN22mcp2515_modifyRegisterEhhh>
     bf8:	01 c0       	rjmp	.+2      	; 0xbfc <_ZN7MCP_CAN24mcp2515_getNextFreeTXBufEPh+0x82>
     bfa:	c2 e0       	ldi	r28, 0x02	; 2
     bfc:	8c 2f       	mov	r24, r28
     bfe:	cf 91       	pop	r28
     c00:	1f 91       	pop	r17
     c02:	0f 91       	pop	r16
     c04:	ff 90       	pop	r15
     c06:	ef 90       	pop	r14
     c08:	08 95       	ret

00000c0a <_ZN7MCP_CAN7init_CSEh>:
     c0a:	cf 93       	push	r28
     c0c:	df 93       	push	r29
     c0e:	ec 01       	movw	r28, r24
     c10:	66 23       	and	r22, r22
     c12:	59 f0       	breq	.+22     	; 0xc2a <_ZN7MCP_CAN7init_CSEh+0x20>
     c14:	86 2f       	mov	r24, r22
     c16:	6e 83       	std	Y+6, r22	; 0x06
     c18:	61 e0       	ldi	r22, 0x01	; 1
     c1a:	0e 94 e1 07 	call	0xfc2	; 0xfc2 <pinMode>
     c1e:	61 e0       	ldi	r22, 0x01	; 1
     c20:	8e 81       	ldd	r24, Y+6	; 0x06
     c22:	df 91       	pop	r29
     c24:	cf 91       	pop	r28
     c26:	0c 94 1d 08 	jmp	0x103a	; 0x103a <digitalWrite>
     c2a:	df 91       	pop	r29
     c2c:	cf 91       	pop	r28
     c2e:	08 95       	ret

00000c30 <_ZN7MCP_CANC1Eh>:
     c30:	fc 01       	movw	r30, r24
     c32:	11 86       	std	Z+9, r1	; 0x09
     c34:	28 e1       	ldi	r18, 0x18	; 24
     c36:	33 e0       	ldi	r19, 0x03	; 3
     c38:	30 87       	std	Z+8, r19	; 0x08
     c3a:	27 83       	std	Z+7, r18	; 0x07
     c3c:	0c 94 05 06 	jmp	0xc0a	; 0xc0a <_ZN7MCP_CAN7init_CSEh>

00000c40 <_ZN7MCP_CAN5beginEhh>:
     c40:	cf 93       	push	r28
     c42:	df 93       	push	r29
     c44:	00 d0       	rcall	.+0      	; 0xc46 <_ZN7MCP_CAN5beginEhh+0x6>
     c46:	00 d0       	rcall	.+0      	; 0xc48 <_ZN7MCP_CAN5beginEhh+0x8>
     c48:	cd b7       	in	r28, 0x3d	; 61
     c4a:	de b7       	in	r29, 0x3e	; 62
     c4c:	4c 83       	std	Y+4, r20	; 0x04
     c4e:	6b 83       	std	Y+3, r22	; 0x03
     c50:	89 83       	std	Y+1, r24	; 0x01
     c52:	9a 83       	std	Y+2, r25	; 0x02
     c54:	0e 94 68 01 	call	0x2d0	; 0x2d0 <_ZN8SPIClass5beginEv>
     c58:	4c 81       	ldd	r20, Y+4	; 0x04
     c5a:	6b 81       	ldd	r22, Y+3	; 0x03
     c5c:	89 81       	ldd	r24, Y+1	; 0x01
     c5e:	9a 81       	ldd	r25, Y+2	; 0x02
     c60:	0e 94 a6 04 	call	0x94c	; 0x94c <_ZN7MCP_CAN12mcp2515_initEhh>
     c64:	91 e0       	ldi	r25, 0x01	; 1
     c66:	81 11       	cpse	r24, r1
     c68:	01 c0       	rjmp	.+2      	; 0xc6c <_ZN7MCP_CAN5beginEhh+0x2c>
     c6a:	90 e0       	ldi	r25, 0x00	; 0
     c6c:	89 2f       	mov	r24, r25
     c6e:	0f 90       	pop	r0
     c70:	0f 90       	pop	r0
     c72:	0f 90       	pop	r0
     c74:	0f 90       	pop	r0
     c76:	df 91       	pop	r29
     c78:	cf 91       	pop	r28
     c7a:	08 95       	ret

00000c7c <_ZN7MCP_CAN7sendMsgEmhhhPKhb>:
     c7c:	2f 92       	push	r2
     c7e:	3f 92       	push	r3
     c80:	4f 92       	push	r4
     c82:	5f 92       	push	r5
     c84:	6f 92       	push	r6
     c86:	7f 92       	push	r7
     c88:	8f 92       	push	r8
     c8a:	9f 92       	push	r9
     c8c:	af 92       	push	r10
     c8e:	bf 92       	push	r11
     c90:	cf 92       	push	r12
     c92:	df 92       	push	r13
     c94:	ef 92       	push	r14
     c96:	ff 92       	push	r15
     c98:	0f 93       	push	r16
     c9a:	1f 93       	push	r17
     c9c:	cf 93       	push	r28
     c9e:	df 93       	push	r29
     ca0:	1f 92       	push	r1
     ca2:	cd b7       	in	r28, 0x3d	; 61
     ca4:	de b7       	in	r29, 0x3e	; 62
     ca6:	4c 01       	movw	r8, r24
     ca8:	1a 01       	movw	r2, r20
     caa:	2b 01       	movw	r4, r22
     cac:	12 2f       	mov	r17, r18
     cae:	fa 2c       	mov	r15, r10
     cb0:	fc 01       	movw	r30, r24
     cb2:	41 83       	std	Z+1, r20	; 0x01
     cb4:	52 83       	std	Z+2, r21	; 0x02
     cb6:	63 83       	std	Z+3, r22	; 0x03
     cb8:	74 83       	std	Z+4, r23	; 0x04
     cba:	20 83       	st	Z, r18
     cbc:	05 83       	std	Z+5, r16	; 0x05
     cbe:	61 2c       	mov	r6, r1
     cc0:	71 2c       	mov	r7, r1
     cc2:	be 01       	movw	r22, r28
     cc4:	6f 5f       	subi	r22, 0xFF	; 255
     cc6:	7f 4f       	sbci	r23, 0xFF	; 255
     cc8:	c4 01       	movw	r24, r8
     cca:	0e 94 bd 05 	call	0xb7a	; 0xb7a <_ZN7MCP_CAN24mcp2515_getNextFreeTXBufEPh>
     cce:	ff ef       	ldi	r31, 0xFF	; 255
     cd0:	6f 1a       	sub	r6, r31
     cd2:	7f 0a       	sbc	r7, r31
     cd4:	82 30       	cpi	r24, 0x02	; 2
     cd6:	49 f4       	brne	.+18     	; 0xcea <_ZN7MCP_CAN7sendMsgEmhhhPKhb+0x6e>
     cd8:	82 e3       	ldi	r24, 0x32	; 50
     cda:	68 16       	cp	r6, r24
     cdc:	71 04       	cpc	r7, r1
     cde:	69 f1       	breq	.+90     	; 0xd3a <_ZN7MCP_CAN7sendMsgEmhhhPKhb+0xbe>
     ce0:	8a e0       	ldi	r24, 0x0A	; 10
     ce2:	90 e0       	ldi	r25, 0x00	; 0
     ce4:	0e 94 72 07 	call	0xee4	; 0xee4 <delayMicroseconds>
     ce8:	ec cf       	rjmp	.-40     	; 0xcc2 <_ZN7MCP_CAN7sendMsgEmhhhPKhb+0x46>
     cea:	92 e3       	ldi	r25, 0x32	; 50
     cec:	69 16       	cp	r6, r25
     cee:	71 04       	cpc	r7, r1
     cf0:	21 f1       	breq	.+72     	; 0xd3a <_ZN7MCP_CAN7sendMsgEmhhhPKhb+0xbe>
     cf2:	56 01       	movw	r10, r12
     cf4:	ce 2c       	mov	r12, r14
     cf6:	e0 2e       	mov	r14, r16
     cf8:	01 2f       	mov	r16, r17
     cfa:	a2 01       	movw	r20, r4
     cfc:	91 01       	movw	r18, r2
     cfe:	69 81       	ldd	r22, Y+1	; 0x01
     d00:	c4 01       	movw	r24, r8
     d02:	0e 94 45 05 	call	0xa8a	; 0xa8a <_ZN7MCP_CAN20mcp2515_write_canMsgEhmhhhPVKh>
     d06:	ff 20       	and	r15, r15
     d08:	b1 f0       	breq	.+44     	; 0xd36 <_ZN7MCP_CAN7sendMsgEmhhhPKhb+0xba>
     d0a:	00 e0       	ldi	r16, 0x00	; 0
     d0c:	10 e0       	ldi	r17, 0x00	; 0
     d0e:	0f 5f       	subi	r16, 0xFF	; 255
     d10:	1f 4f       	sbci	r17, 0xFF	; 255
     d12:	69 81       	ldd	r22, Y+1	; 0x01
     d14:	61 50       	subi	r22, 0x01	; 1
     d16:	c4 01       	movw	r24, r8
     d18:	0e 94 30 03 	call	0x660	; 0x660 <_ZN7MCP_CAN20mcp2515_readRegisterEh>
     d1c:	83 ff       	sbrs	r24, 3
     d1e:	08 c0       	rjmp	.+16     	; 0xd30 <_ZN7MCP_CAN7sendMsgEmhhhPKhb+0xb4>
     d20:	02 33       	cpi	r16, 0x32	; 50
     d22:	11 05       	cpc	r17, r1
     d24:	61 f0       	breq	.+24     	; 0xd3e <_ZN7MCP_CAN7sendMsgEmhhhPKhb+0xc2>
     d26:	8a e0       	ldi	r24, 0x0A	; 10
     d28:	90 e0       	ldi	r25, 0x00	; 0
     d2a:	0e 94 72 07 	call	0xee4	; 0xee4 <delayMicroseconds>
     d2e:	ef cf       	rjmp	.-34     	; 0xd0e <_ZN7MCP_CAN7sendMsgEmhhhPKhb+0x92>
     d30:	02 33       	cpi	r16, 0x32	; 50
     d32:	11 05       	cpc	r17, r1
     d34:	21 f0       	breq	.+8      	; 0xd3e <_ZN7MCP_CAN7sendMsgEmhhhPKhb+0xc2>
     d36:	80 e0       	ldi	r24, 0x00	; 0
     d38:	03 c0       	rjmp	.+6      	; 0xd40 <_ZN7MCP_CAN7sendMsgEmhhhPKhb+0xc4>
     d3a:	86 e0       	ldi	r24, 0x06	; 6
     d3c:	01 c0       	rjmp	.+2      	; 0xd40 <_ZN7MCP_CAN7sendMsgEmhhhPKhb+0xc4>
     d3e:	87 e0       	ldi	r24, 0x07	; 7
     d40:	0f 90       	pop	r0
     d42:	df 91       	pop	r29
     d44:	cf 91       	pop	r28
     d46:	1f 91       	pop	r17
     d48:	0f 91       	pop	r16
     d4a:	ff 90       	pop	r15
     d4c:	ef 90       	pop	r14
     d4e:	df 90       	pop	r13
     d50:	cf 90       	pop	r12
     d52:	bf 90       	pop	r11
     d54:	af 90       	pop	r10
     d56:	9f 90       	pop	r9
     d58:	8f 90       	pop	r8
     d5a:	7f 90       	pop	r7
     d5c:	6f 90       	pop	r6
     d5e:	5f 90       	pop	r5
     d60:	4f 90       	pop	r4
     d62:	3f 90       	pop	r3
     d64:	2f 90       	pop	r2
     d66:	08 95       	ret

00000d68 <_ZN7MCP_CAN10sendMsgBufEmhhPKhb>:
     d68:	af 92       	push	r10
     d6a:	cf 92       	push	r12
     d6c:	df 92       	push	r13
     d6e:	ef 92       	push	r14
     d70:	ff 92       	push	r15
     d72:	0f 93       	push	r16
     d74:	ac 2c       	mov	r10, r12
     d76:	67 01       	movw	r12, r14
     d78:	e0 2e       	mov	r14, r16
     d7a:	00 e0       	ldi	r16, 0x00	; 0
     d7c:	0e 94 3e 06 	call	0xc7c	; 0xc7c <_ZN7MCP_CAN7sendMsgEmhhhPKhb>
     d80:	0f 91       	pop	r16
     d82:	ff 90       	pop	r15
     d84:	ef 90       	pop	r14
     d86:	df 90       	pop	r13
     d88:	cf 90       	pop	r12
     d8a:	af 90       	pop	r10
     d8c:	08 95       	ret

00000d8e <__vector_16>:
	cli();
	m = timer0_millis;
	SREG = oldSREG;

	return m;
}
     d8e:	1f 92       	push	r1
     d90:	0f 92       	push	r0
     d92:	0f b6       	in	r0, 0x3f	; 63
     d94:	0f 92       	push	r0
     d96:	11 24       	eor	r1, r1
     d98:	2f 93       	push	r18
     d9a:	3f 93       	push	r19
     d9c:	8f 93       	push	r24
     d9e:	9f 93       	push	r25
     da0:	af 93       	push	r26
     da2:	bf 93       	push	r27
     da4:	80 91 3d 03 	lds	r24, 0x033D	; 0x80033d <timer0_millis>
     da8:	90 91 3e 03 	lds	r25, 0x033E	; 0x80033e <timer0_millis+0x1>
     dac:	a0 91 3f 03 	lds	r26, 0x033F	; 0x80033f <timer0_millis+0x2>
     db0:	b0 91 40 03 	lds	r27, 0x0340	; 0x800340 <timer0_millis+0x3>
     db4:	30 91 3c 03 	lds	r19, 0x033C	; 0x80033c <timer0_fract>
     db8:	23 e0       	ldi	r18, 0x03	; 3
     dba:	23 0f       	add	r18, r19
     dbc:	2d 37       	cpi	r18, 0x7D	; 125
     dbe:	20 f4       	brcc	.+8      	; 0xdc8 <__vector_16+0x3a>
     dc0:	01 96       	adiw	r24, 0x01	; 1
     dc2:	a1 1d       	adc	r26, r1
     dc4:	b1 1d       	adc	r27, r1
     dc6:	05 c0       	rjmp	.+10     	; 0xdd2 <__vector_16+0x44>
     dc8:	26 e8       	ldi	r18, 0x86	; 134
     dca:	23 0f       	add	r18, r19
     dcc:	02 96       	adiw	r24, 0x02	; 2
     dce:	a1 1d       	adc	r26, r1
     dd0:	b1 1d       	adc	r27, r1
     dd2:	20 93 3c 03 	sts	0x033C, r18	; 0x80033c <timer0_fract>
     dd6:	80 93 3d 03 	sts	0x033D, r24	; 0x80033d <timer0_millis>
     dda:	90 93 3e 03 	sts	0x033E, r25	; 0x80033e <timer0_millis+0x1>
     dde:	a0 93 3f 03 	sts	0x033F, r26	; 0x80033f <timer0_millis+0x2>
     de2:	b0 93 40 03 	sts	0x0340, r27	; 0x800340 <timer0_millis+0x3>
     de6:	80 91 41 03 	lds	r24, 0x0341	; 0x800341 <timer0_overflow_count>
     dea:	90 91 42 03 	lds	r25, 0x0342	; 0x800342 <timer0_overflow_count+0x1>
     dee:	a0 91 43 03 	lds	r26, 0x0343	; 0x800343 <timer0_overflow_count+0x2>
     df2:	b0 91 44 03 	lds	r27, 0x0344	; 0x800344 <timer0_overflow_count+0x3>
     df6:	01 96       	adiw	r24, 0x01	; 1
     df8:	a1 1d       	adc	r26, r1
     dfa:	b1 1d       	adc	r27, r1
     dfc:	80 93 41 03 	sts	0x0341, r24	; 0x800341 <timer0_overflow_count>
     e00:	90 93 42 03 	sts	0x0342, r25	; 0x800342 <timer0_overflow_count+0x1>
     e04:	a0 93 43 03 	sts	0x0343, r26	; 0x800343 <timer0_overflow_count+0x2>
     e08:	b0 93 44 03 	sts	0x0344, r27	; 0x800344 <timer0_overflow_count+0x3>
     e0c:	bf 91       	pop	r27
     e0e:	af 91       	pop	r26
     e10:	9f 91       	pop	r25
     e12:	8f 91       	pop	r24
     e14:	3f 91       	pop	r19
     e16:	2f 91       	pop	r18
     e18:	0f 90       	pop	r0
     e1a:	0f be       	out	0x3f, r0	; 63
     e1c:	0f 90       	pop	r0
     e1e:	1f 90       	pop	r1
     e20:	18 95       	reti

00000e22 <micros>:

unsigned long micros() {
	unsigned long m;
	uint8_t oldSREG = SREG, t;
     e22:	3f b7       	in	r19, 0x3f	; 63
	
	cli();
     e24:	f8 94       	cli
	m = timer0_overflow_count;
     e26:	80 91 41 03 	lds	r24, 0x0341	; 0x800341 <timer0_overflow_count>
     e2a:	90 91 42 03 	lds	r25, 0x0342	; 0x800342 <timer0_overflow_count+0x1>
     e2e:	a0 91 43 03 	lds	r26, 0x0343	; 0x800343 <timer0_overflow_count+0x2>
     e32:	b0 91 44 03 	lds	r27, 0x0344	; 0x800344 <timer0_overflow_count+0x3>
#if defined(TCNT0)
	t = TCNT0;
     e36:	26 b5       	in	r18, 0x26	; 38
#else
	#error TIMER 0 not defined
#endif

#ifdef TIFR0
	if ((TIFR0 & _BV(TOV0)) && (t < 255))
     e38:	a8 9b       	sbis	0x15, 0	; 21
     e3a:	05 c0       	rjmp	.+10     	; 0xe46 <micros+0x24>
     e3c:	2f 3f       	cpi	r18, 0xFF	; 255
     e3e:	19 f0       	breq	.+6      	; 0xe46 <micros+0x24>
		m++;
     e40:	01 96       	adiw	r24, 0x01	; 1
     e42:	a1 1d       	adc	r26, r1
     e44:	b1 1d       	adc	r27, r1
#else
	if ((TIFR & _BV(TOV0)) && (t < 255))
		m++;
#endif

	SREG = oldSREG;
     e46:	3f bf       	out	0x3f, r19	; 63
	
	return ((m << 8) + t) * (64 / clockCyclesPerMicrosecond());
     e48:	ba 2f       	mov	r27, r26
     e4a:	a9 2f       	mov	r26, r25
     e4c:	98 2f       	mov	r25, r24
     e4e:	88 27       	eor	r24, r24
     e50:	82 0f       	add	r24, r18
     e52:	91 1d       	adc	r25, r1
     e54:	a1 1d       	adc	r26, r1
     e56:	b1 1d       	adc	r27, r1
     e58:	bc 01       	movw	r22, r24
     e5a:	cd 01       	movw	r24, r26
     e5c:	42 e0       	ldi	r20, 0x02	; 2
     e5e:	66 0f       	add	r22, r22
     e60:	77 1f       	adc	r23, r23
     e62:	88 1f       	adc	r24, r24
     e64:	99 1f       	adc	r25, r25
     e66:	4a 95       	dec	r20
     e68:	d1 f7       	brne	.-12     	; 0xe5e <micros+0x3c>
}
     e6a:	08 95       	ret

00000e6c <delay>:

void delay(unsigned long ms)
{
     e6c:	8f 92       	push	r8
     e6e:	9f 92       	push	r9
     e70:	af 92       	push	r10
     e72:	bf 92       	push	r11
     e74:	cf 92       	push	r12
     e76:	df 92       	push	r13
     e78:	ef 92       	push	r14
     e7a:	ff 92       	push	r15
     e7c:	6b 01       	movw	r12, r22
     e7e:	7c 01       	movw	r14, r24
	uint32_t start = micros();
     e80:	0e 94 11 07 	call	0xe22	; 0xe22 <micros>
     e84:	4b 01       	movw	r8, r22
     e86:	5c 01       	movw	r10, r24

	while (ms > 0) {
     e88:	c1 14       	cp	r12, r1
     e8a:	d1 04       	cpc	r13, r1
     e8c:	e1 04       	cpc	r14, r1
     e8e:	f1 04       	cpc	r15, r1
     e90:	01 f1       	breq	.+64     	; 0xed2 <delay+0x66>
		yield();
     e92:	0e 94 a0 0a 	call	0x1540	; 0x1540 <yield>
		while ( ms > 0 && (micros() - start) >= 1000) {
     e96:	0e 94 11 07 	call	0xe22	; 0xe22 <micros>
     e9a:	dc 01       	movw	r26, r24
     e9c:	cb 01       	movw	r24, r22
     e9e:	88 19       	sub	r24, r8
     ea0:	99 09       	sbc	r25, r9
     ea2:	aa 09       	sbc	r26, r10
     ea4:	bb 09       	sbc	r27, r11
     ea6:	88 3e       	cpi	r24, 0xE8	; 232
     ea8:	93 40       	sbci	r25, 0x03	; 3
     eaa:	a1 05       	cpc	r26, r1
     eac:	b1 05       	cpc	r27, r1
     eae:	60 f3       	brcs	.-40     	; 0xe88 <delay+0x1c>
			ms--;
     eb0:	21 e0       	ldi	r18, 0x01	; 1
     eb2:	c2 1a       	sub	r12, r18
     eb4:	d1 08       	sbc	r13, r1
     eb6:	e1 08       	sbc	r14, r1
     eb8:	f1 08       	sbc	r15, r1
			start += 1000;
     eba:	88 ee       	ldi	r24, 0xE8	; 232
     ebc:	88 0e       	add	r8, r24
     ebe:	83 e0       	ldi	r24, 0x03	; 3
     ec0:	98 1e       	adc	r9, r24
     ec2:	a1 1c       	adc	r10, r1
     ec4:	b1 1c       	adc	r11, r1
{
	uint32_t start = micros();

	while (ms > 0) {
		yield();
		while ( ms > 0 && (micros() - start) >= 1000) {
     ec6:	c1 14       	cp	r12, r1
     ec8:	d1 04       	cpc	r13, r1
     eca:	e1 04       	cpc	r14, r1
     ecc:	f1 04       	cpc	r15, r1
     ece:	19 f7       	brne	.-58     	; 0xe96 <delay+0x2a>
     ed0:	db cf       	rjmp	.-74     	; 0xe88 <delay+0x1c>
			ms--;
			start += 1000;
		}
	}
}
     ed2:	ff 90       	pop	r15
     ed4:	ef 90       	pop	r14
     ed6:	df 90       	pop	r13
     ed8:	cf 90       	pop	r12
     eda:	bf 90       	pop	r11
     edc:	af 90       	pop	r10
     ede:	9f 90       	pop	r9
     ee0:	8f 90       	pop	r8
     ee2:	08 95       	ret

00000ee4 <delayMicroseconds>:
#elif F_CPU >= 16000000L
	// for the 16 MHz clock on most Arduino boards

	// for a one-microsecond delay, simply return.  the overhead
	// of the function call takes 14 (16) cycles, which is 1us
	if (us <= 1) return; //  = 3 cycles, (4 when true)
     ee4:	82 30       	cpi	r24, 0x02	; 2
     ee6:	91 05       	cpc	r25, r1
     ee8:	38 f0       	brcs	.+14     	; 0xef8 <delayMicroseconds+0x14>

	// the following loop takes 1/4 of a microsecond (4 cycles)
	// per iteration, so execute it four times for each microsecond of
	// delay requested.
	us <<= 2; // x4 us, = 4 cycles
     eea:	88 0f       	add	r24, r24
     eec:	99 1f       	adc	r25, r25
     eee:	88 0f       	add	r24, r24
     ef0:	99 1f       	adc	r25, r25

	// account for the time taken in the preceeding commands.
	// we just burned 19 (21) cycles above, remove 5, (5*4=20)
	// us is at least 8 so we can substract 5
	us -= 5; // = 2 cycles,
     ef2:	05 97       	sbiw	r24, 0x05	; 5
	

#endif

	// busy wait
	__asm__ __volatile__ (
     ef4:	01 97       	sbiw	r24, 0x01	; 1
     ef6:	f1 f7       	brne	.-4      	; 0xef4 <delayMicroseconds+0x10>
     ef8:	08 95       	ret

00000efa <init>:

void init()
{
	// this needs to be called before setup() or some functions won't
	// work there
	sei();
     efa:	78 94       	sei
	
	// on the ATmega168, timer 0 is also used for fast hardware pwm
	// (using phase-correct PWM would mean that timer 0 overflowed half as often
	// resulting in different millis() behavior on the ATmega8 and ATmega168)
#if defined(TCCR0A) && defined(WGM01)
	sbi(TCCR0A, WGM01);
     efc:	84 b5       	in	r24, 0x24	; 36
     efe:	82 60       	ori	r24, 0x02	; 2
     f00:	84 bd       	out	0x24, r24	; 36
	sbi(TCCR0A, WGM00);
     f02:	84 b5       	in	r24, 0x24	; 36
     f04:	81 60       	ori	r24, 0x01	; 1
     f06:	84 bd       	out	0x24, r24	; 36
	// this combination is for the standard atmega8
	sbi(TCCR0, CS01);
	sbi(TCCR0, CS00);
#elif defined(TCCR0B) && defined(CS01) && defined(CS00)
	// this combination is for the standard 168/328/1280/2560
	sbi(TCCR0B, CS01);
     f08:	85 b5       	in	r24, 0x25	; 37
     f0a:	82 60       	ori	r24, 0x02	; 2
     f0c:	85 bd       	out	0x25, r24	; 37
	sbi(TCCR0B, CS00);
     f0e:	85 b5       	in	r24, 0x25	; 37
     f10:	81 60       	ori	r24, 0x01	; 1
     f12:	85 bd       	out	0x25, r24	; 37

	// enable timer 0 overflow interrupt
#if defined(TIMSK) && defined(TOIE0)
	sbi(TIMSK, TOIE0);
#elif defined(TIMSK0) && defined(TOIE0)
	sbi(TIMSK0, TOIE0);
     f14:	ee e6       	ldi	r30, 0x6E	; 110
     f16:	f0 e0       	ldi	r31, 0x00	; 0
     f18:	80 81       	ld	r24, Z
     f1a:	81 60       	ori	r24, 0x01	; 1
     f1c:	80 83       	st	Z, r24
	// this is better for motors as it ensures an even waveform
	// note, however, that fast pwm mode can achieve a frequency of up
	// 8 MHz (with a 16 MHz clock) at 50% duty cycle

#if defined(TCCR1B) && defined(CS11) && defined(CS10)
	TCCR1B = 0;
     f1e:	e1 e8       	ldi	r30, 0x81	; 129
     f20:	f0 e0       	ldi	r31, 0x00	; 0
     f22:	10 82       	st	Z, r1

	// set timer 1 prescale factor to 64
	sbi(TCCR1B, CS11);
     f24:	80 81       	ld	r24, Z
     f26:	82 60       	ori	r24, 0x02	; 2
     f28:	80 83       	st	Z, r24
#if F_CPU >= 8000000L
	sbi(TCCR1B, CS10);
     f2a:	80 81       	ld	r24, Z
     f2c:	81 60       	ori	r24, 0x01	; 1
     f2e:	80 83       	st	Z, r24
	sbi(TCCR1, CS10);
#endif
#endif
	// put timer 1 in 8-bit phase correct pwm mode
#if defined(TCCR1A) && defined(WGM10)
	sbi(TCCR1A, WGM10);
     f30:	e0 e8       	ldi	r30, 0x80	; 128
     f32:	f0 e0       	ldi	r31, 0x00	; 0
     f34:	80 81       	ld	r24, Z
     f36:	81 60       	ori	r24, 0x01	; 1
     f38:	80 83       	st	Z, r24

	// set timer 2 prescale factor to 64
#if defined(TCCR2) && defined(CS22)
	sbi(TCCR2, CS22);
#elif defined(TCCR2B) && defined(CS22)
	sbi(TCCR2B, CS22);
     f3a:	e1 eb       	ldi	r30, 0xB1	; 177
     f3c:	f0 e0       	ldi	r31, 0x00	; 0
     f3e:	80 81       	ld	r24, Z
     f40:	84 60       	ori	r24, 0x04	; 4
     f42:	80 83       	st	Z, r24

	// configure timer 2 for phase correct pwm (8-bit)
#if defined(TCCR2) && defined(WGM20)
	sbi(TCCR2, WGM20);
#elif defined(TCCR2A) && defined(WGM20)
	sbi(TCCR2A, WGM20);
     f44:	e0 eb       	ldi	r30, 0xB0	; 176
     f46:	f0 e0       	ldi	r31, 0x00	; 0
     f48:	80 81       	ld	r24, Z
     f4a:	81 60       	ori	r24, 0x01	; 1
     f4c:	80 83       	st	Z, r24
#endif

#if defined(ADCSRA)
	// set a2d prescaler so we are inside the desired 50-200 KHz range.
	#if F_CPU >= 16000000 // 16 MHz / 128 = 125 KHz
		sbi(ADCSRA, ADPS2);
     f4e:	ea e7       	ldi	r30, 0x7A	; 122
     f50:	f0 e0       	ldi	r31, 0x00	; 0
     f52:	80 81       	ld	r24, Z
     f54:	84 60       	ori	r24, 0x04	; 4
     f56:	80 83       	st	Z, r24
		sbi(ADCSRA, ADPS1);
     f58:	80 81       	ld	r24, Z
     f5a:	82 60       	ori	r24, 0x02	; 2
     f5c:	80 83       	st	Z, r24
		sbi(ADCSRA, ADPS0);
     f5e:	80 81       	ld	r24, Z
     f60:	81 60       	ori	r24, 0x01	; 1
     f62:	80 83       	st	Z, r24
		cbi(ADCSRA, ADPS2);
		cbi(ADCSRA, ADPS1);
		sbi(ADCSRA, ADPS0);
	#endif
	// enable a2d conversions
	sbi(ADCSRA, ADEN);
     f64:	80 81       	ld	r24, Z
     f66:	80 68       	ori	r24, 0x80	; 128
     f68:	80 83       	st	Z, r24
	// here so they can be used as normal digital i/o; they will be
	// reconnected in Serial.begin()
#if defined(UCSRB)
	UCSRB = 0;
#elif defined(UCSR0B)
	UCSR0B = 0;
     f6a:	10 92 c1 00 	sts	0x00C1, r1	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
     f6e:	08 95       	ret

00000f70 <turnOffPWM>:
//
//static inline void turnOffPWM(uint8_t timer) __attribute__ ((always_inline));
//static inline void turnOffPWM(uint8_t timer)
static void turnOffPWM(uint8_t timer)
{
	switch (timer)
     f70:	83 30       	cpi	r24, 0x03	; 3
     f72:	81 f0       	breq	.+32     	; 0xf94 <turnOffPWM+0x24>
     f74:	28 f4       	brcc	.+10     	; 0xf80 <turnOffPWM+0x10>
     f76:	81 30       	cpi	r24, 0x01	; 1
     f78:	99 f0       	breq	.+38     	; 0xfa0 <turnOffPWM+0x30>
     f7a:	82 30       	cpi	r24, 0x02	; 2
     f7c:	a1 f0       	breq	.+40     	; 0xfa6 <turnOffPWM+0x36>
     f7e:	08 95       	ret
     f80:	87 30       	cpi	r24, 0x07	; 7
     f82:	a9 f0       	breq	.+42     	; 0xfae <turnOffPWM+0x3e>
     f84:	88 30       	cpi	r24, 0x08	; 8
     f86:	b9 f0       	breq	.+46     	; 0xfb6 <turnOffPWM+0x46>
     f88:	84 30       	cpi	r24, 0x04	; 4
     f8a:	d1 f4       	brne	.+52     	; 0xfc0 <turnOffPWM+0x50>
	{
		#if defined(TCCR1A) && defined(COM1A1)
		case TIMER1A:   cbi(TCCR1A, COM1A1);    break;
		#endif
		#if defined(TCCR1A) && defined(COM1B1)
		case TIMER1B:   cbi(TCCR1A, COM1B1);    break;
     f8c:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
     f90:	8f 7d       	andi	r24, 0xDF	; 223
     f92:	03 c0       	rjmp	.+6      	; 0xf9a <turnOffPWM+0x2a>
static void turnOffPWM(uint8_t timer)
{
	switch (timer)
	{
		#if defined(TCCR1A) && defined(COM1A1)
		case TIMER1A:   cbi(TCCR1A, COM1A1);    break;
     f94:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
     f98:	8f 77       	andi	r24, 0x7F	; 127
		#endif
		#if defined(TCCR1A) && defined(COM1B1)
		case TIMER1B:   cbi(TCCR1A, COM1B1);    break;
     f9a:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
     f9e:	08 95       	ret
		#if defined(TCCR2) && defined(COM21)
		case  TIMER2:   cbi(TCCR2, COM21);      break;
		#endif
		
		#if defined(TCCR0A) && defined(COM0A1)
		case  TIMER0A:  cbi(TCCR0A, COM0A1);    break;
     fa0:	84 b5       	in	r24, 0x24	; 36
     fa2:	8f 77       	andi	r24, 0x7F	; 127
     fa4:	02 c0       	rjmp	.+4      	; 0xfaa <turnOffPWM+0x3a>
		#endif
		
		#if defined(TCCR0A) && defined(COM0B1)
		case  TIMER0B:  cbi(TCCR0A, COM0B1);    break;
     fa6:	84 b5       	in	r24, 0x24	; 36
     fa8:	8f 7d       	andi	r24, 0xDF	; 223
     faa:	84 bd       	out	0x24, r24	; 36
     fac:	08 95       	ret
		#endif
		#if defined(TCCR2A) && defined(COM2A1)
		case  TIMER2A:  cbi(TCCR2A, COM2A1);    break;
     fae:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7e00b0>
     fb2:	8f 77       	andi	r24, 0x7F	; 127
     fb4:	03 c0       	rjmp	.+6      	; 0xfbc <turnOffPWM+0x4c>
		#endif
		#if defined(TCCR2A) && defined(COM2B1)
		case  TIMER2B:  cbi(TCCR2A, COM2B1);    break;
     fb6:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7e00b0>
     fba:	8f 7d       	andi	r24, 0xDF	; 223
     fbc:	80 93 b0 00 	sts	0x00B0, r24	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7e00b0>
     fc0:	08 95       	ret

00000fc2 <pinMode>:
#define ARDUINO_MAIN
#include "wiring_private.h"
#include "pins_arduino.h"

void pinMode(uint8_t pin, uint8_t mode)
{
     fc2:	cf 93       	push	r28
     fc4:	df 93       	push	r29
	uint8_t bit = digitalPinToBitMask(pin);
     fc6:	90 e0       	ldi	r25, 0x00	; 0
     fc8:	fc 01       	movw	r30, r24
     fca:	ec 53       	subi	r30, 0x3C	; 60
     fcc:	ff 4f       	sbci	r31, 0xFF	; 255
     fce:	24 91       	lpm	r18, Z
	uint8_t port = digitalPinToPort(pin);
     fd0:	fc 01       	movw	r30, r24
     fd2:	e8 52       	subi	r30, 0x28	; 40
     fd4:	ff 4f       	sbci	r31, 0xFF	; 255
     fd6:	84 91       	lpm	r24, Z
	volatile uint8_t *reg, *out;

	if (port == NOT_A_PIN) return;
     fd8:	88 23       	and	r24, r24
     fda:	61 f1       	breq	.+88     	; 0x1034 <pinMode+0x72>

	// JWS: can I let the optimizer do this?
	reg = portModeRegister(port);
     fdc:	90 e0       	ldi	r25, 0x00	; 0
     fde:	88 0f       	add	r24, r24
     fe0:	99 1f       	adc	r25, r25
     fe2:	fc 01       	movw	r30, r24
     fe4:	e0 50       	subi	r30, 0x00	; 0
     fe6:	ff 4f       	sbci	r31, 0xFF	; 255
     fe8:	c5 91       	lpm	r28, Z+
     fea:	d4 91       	lpm	r29, Z
	out = portOutputRegister(port);
     fec:	fc 01       	movw	r30, r24
     fee:	ea 50       	subi	r30, 0x0A	; 10
     ff0:	ff 4f       	sbci	r31, 0xFF	; 255
     ff2:	a5 91       	lpm	r26, Z+
     ff4:	b4 91       	lpm	r27, Z

	if (mode == INPUT) { 
     ff6:	61 11       	cpse	r22, r1
     ff8:	09 c0       	rjmp	.+18     	; 0x100c <pinMode+0x4a>
		uint8_t oldSREG = SREG;
     ffa:	9f b7       	in	r25, 0x3f	; 63
                cli();
     ffc:	f8 94       	cli
		*reg &= ~bit;
     ffe:	88 81       	ld	r24, Y
    1000:	20 95       	com	r18
    1002:	82 23       	and	r24, r18
    1004:	88 83       	st	Y, r24
		*out &= ~bit;
    1006:	ec 91       	ld	r30, X
    1008:	2e 23       	and	r18, r30
    100a:	0b c0       	rjmp	.+22     	; 0x1022 <pinMode+0x60>
		SREG = oldSREG;
	} else if (mode == INPUT_PULLUP) {
    100c:	62 30       	cpi	r22, 0x02	; 2
    100e:	61 f4       	brne	.+24     	; 0x1028 <pinMode+0x66>
		uint8_t oldSREG = SREG;
    1010:	9f b7       	in	r25, 0x3f	; 63
                cli();
    1012:	f8 94       	cli
		*reg &= ~bit;
    1014:	38 81       	ld	r19, Y
    1016:	82 2f       	mov	r24, r18
    1018:	80 95       	com	r24
    101a:	83 23       	and	r24, r19
    101c:	88 83       	st	Y, r24
		*out |= bit;
    101e:	ec 91       	ld	r30, X
    1020:	2e 2b       	or	r18, r30
    1022:	2c 93       	st	X, r18
		SREG = oldSREG;
    1024:	9f bf       	out	0x3f, r25	; 63
    1026:	06 c0       	rjmp	.+12     	; 0x1034 <pinMode+0x72>
	} else {
		uint8_t oldSREG = SREG;
    1028:	8f b7       	in	r24, 0x3f	; 63
                cli();
    102a:	f8 94       	cli
		*reg |= bit;
    102c:	e8 81       	ld	r30, Y
    102e:	2e 2b       	or	r18, r30
    1030:	28 83       	st	Y, r18
		SREG = oldSREG;
    1032:	8f bf       	out	0x3f, r24	; 63
	}
}
    1034:	df 91       	pop	r29
    1036:	cf 91       	pop	r28
    1038:	08 95       	ret

0000103a <digitalWrite>:
		#endif
	}
}

void digitalWrite(uint8_t pin, uint8_t val)
{
    103a:	1f 93       	push	r17
    103c:	cf 93       	push	r28
    103e:	df 93       	push	r29
	uint8_t timer = digitalPinToTimer(pin);
    1040:	28 2f       	mov	r18, r24
    1042:	30 e0       	ldi	r19, 0x00	; 0
    1044:	f9 01       	movw	r30, r18
    1046:	e0 55       	subi	r30, 0x50	; 80
    1048:	ff 4f       	sbci	r31, 0xFF	; 255
    104a:	84 91       	lpm	r24, Z
	uint8_t bit = digitalPinToBitMask(pin);
    104c:	f9 01       	movw	r30, r18
    104e:	ec 53       	subi	r30, 0x3C	; 60
    1050:	ff 4f       	sbci	r31, 0xFF	; 255
    1052:	d4 91       	lpm	r29, Z
	uint8_t port = digitalPinToPort(pin);
    1054:	f9 01       	movw	r30, r18
    1056:	e8 52       	subi	r30, 0x28	; 40
    1058:	ff 4f       	sbci	r31, 0xFF	; 255
    105a:	c4 91       	lpm	r28, Z
	volatile uint8_t *out;

	if (port == NOT_A_PIN) return;
    105c:	cc 23       	and	r28, r28
    105e:	c9 f0       	breq	.+50     	; 0x1092 <digitalWrite+0x58>
    1060:	16 2f       	mov	r17, r22

	// If the pin that support PWM output, we need to turn it off
	// before doing a digital write.
	if (timer != NOT_ON_TIMER) turnOffPWM(timer);
    1062:	81 11       	cpse	r24, r1
    1064:	0e 94 b8 07 	call	0xf70	; 0xf70 <turnOffPWM>

	out = portOutputRegister(port);
    1068:	ec 2f       	mov	r30, r28
    106a:	f0 e0       	ldi	r31, 0x00	; 0
    106c:	ee 0f       	add	r30, r30
    106e:	ff 1f       	adc	r31, r31
    1070:	ea 50       	subi	r30, 0x0A	; 10
    1072:	ff 4f       	sbci	r31, 0xFF	; 255
    1074:	a5 91       	lpm	r26, Z+
    1076:	b4 91       	lpm	r27, Z

	uint8_t oldSREG = SREG;
    1078:	8f b7       	in	r24, 0x3f	; 63
	cli();
    107a:	f8 94       	cli

	if (val == LOW) {
    107c:	11 11       	cpse	r17, r1
    107e:	05 c0       	rjmp	.+10     	; 0x108a <digitalWrite+0x50>
		*out &= ~bit;
    1080:	9c 91       	ld	r25, X
    1082:	ed 2f       	mov	r30, r29
    1084:	e0 95       	com	r30
    1086:	e9 23       	and	r30, r25
    1088:	02 c0       	rjmp	.+4      	; 0x108e <digitalWrite+0x54>
	} else {
		*out |= bit;
    108a:	ec 91       	ld	r30, X
    108c:	ed 2b       	or	r30, r29
    108e:	ec 93       	st	X, r30
	}

	SREG = oldSREG;
    1090:	8f bf       	out	0x3f, r24	; 63
}
    1092:	df 91       	pop	r29
    1094:	cf 91       	pop	r28
    1096:	1f 91       	pop	r17
    1098:	08 95       	ret

0000109a <pulseIn>:
 * before the start of the pulse.
 *
 * This function performs better with short pulses in noInterrupt() context
 */
unsigned long pulseIn(uint8_t pin, uint8_t state, unsigned long timeout)
{
    109a:	0f 93       	push	r16
    109c:	1f 93       	push	r17
	// cache the port and bit of the pin in order to speed up the
	// pulse width measuring loop and achieve finer resolution.  calling
	// digitalRead() instead yields much coarser resolution.
	uint8_t bit = digitalPinToBitMask(pin);
    109e:	90 e0       	ldi	r25, 0x00	; 0
    10a0:	fc 01       	movw	r30, r24
    10a2:	ec 53       	subi	r30, 0x3C	; 60
    10a4:	ff 4f       	sbci	r31, 0xFF	; 255
    10a6:	74 91       	lpm	r23, Z
	uint8_t port = digitalPinToPort(pin);
    10a8:	fc 01       	movw	r30, r24
    10aa:	e8 52       	subi	r30, 0x28	; 40
    10ac:	ff 4f       	sbci	r31, 0xFF	; 255
    10ae:	e4 91       	lpm	r30, Z
	uint8_t stateMask = (state ? bit : 0);
    10b0:	66 23       	and	r22, r22
    10b2:	11 f0       	breq	.+4      	; 0x10b8 <pulseIn+0x1e>
    10b4:	67 2f       	mov	r22, r23
    10b6:	01 c0       	rjmp	.+2      	; 0x10ba <pulseIn+0x20>
    10b8:	60 e0       	ldi	r22, 0x00	; 0

	// convert the timeout from microseconds to a number of times through
	// the initial loop; it takes approximately 16 clock cycles per iteration
	unsigned long maxloops = microsecondsToClockCycles(timeout)/16;

	unsigned long width = countPulseASM(portInputRegister(port), bit, stateMask, maxloops);
    10ba:	f0 e0       	ldi	r31, 0x00	; 0
    10bc:	ee 0f       	add	r30, r30
    10be:	ff 1f       	adc	r31, r31
    10c0:	e4 51       	subi	r30, 0x14	; 20
    10c2:	ff 4f       	sbci	r31, 0xFF	; 255
    10c4:	85 91       	lpm	r24, Z+
    10c6:	94 91       	lpm	r25, Z
	uint8_t port = digitalPinToPort(pin);
	uint8_t stateMask = (state ? bit : 0);

	// convert the timeout from microseconds to a number of times through
	// the initial loop; it takes approximately 16 clock cycles per iteration
	unsigned long maxloops = microsecondsToClockCycles(timeout)/16;
    10c8:	89 01       	movw	r16, r18
    10ca:	9a 01       	movw	r18, r20
    10cc:	3f 70       	andi	r19, 0x0F	; 15

	unsigned long width = countPulseASM(portInputRegister(port), bit, stateMask, maxloops);
    10ce:	46 2f       	mov	r20, r22
    10d0:	67 2f       	mov	r22, r23
    10d2:	0e 94 b1 00 	call	0x162	; 0x162 <countPulseASM>

	// prevent clockCyclesToMicroseconds to return bogus values if countPulseASM timed out
	if (width)
    10d6:	61 15       	cp	r22, r1
    10d8:	71 05       	cpc	r23, r1
    10da:	81 05       	cpc	r24, r1
    10dc:	91 05       	cpc	r25, r1
    10de:	49 f0       	breq	.+18     	; 0x10f2 <pulseIn+0x58>
		return clockCyclesToMicroseconds(width * 16 + 16);
    10e0:	dc 01       	movw	r26, r24
    10e2:	cb 01       	movw	r24, r22
    10e4:	01 96       	adiw	r24, 0x01	; 1
    10e6:	a1 1d       	adc	r26, r1
    10e8:	b1 1d       	adc	r27, r1
    10ea:	bc 01       	movw	r22, r24
    10ec:	cd 01       	movw	r24, r26
    10ee:	9f 70       	andi	r25, 0x0F	; 15
    10f0:	03 c0       	rjmp	.+6      	; 0x10f8 <pulseIn+0x5e>
	else
		return 0;
    10f2:	60 e0       	ldi	r22, 0x00	; 0
    10f4:	70 e0       	ldi	r23, 0x00	; 0
    10f6:	cb 01       	movw	r24, r22
}
    10f8:	1f 91       	pop	r17
    10fa:	0f 91       	pop	r16
    10fc:	08 95       	ret

000010fe <_ZN14HardwareSerial9availableEv>:
  // clear any received data
  _rx_buffer_head = _rx_buffer_tail;
}

int HardwareSerial::available(void)
{
    10fe:	fc 01       	movw	r30, r24
  return ((unsigned int)(SERIAL_RX_BUFFER_SIZE + _rx_buffer_head - _rx_buffer_tail)) % SERIAL_RX_BUFFER_SIZE;
    1100:	91 8d       	ldd	r25, Z+25	; 0x19
    1102:	22 8d       	ldd	r18, Z+26	; 0x1a
    1104:	89 2f       	mov	r24, r25
    1106:	90 e0       	ldi	r25, 0x00	; 0
    1108:	80 5c       	subi	r24, 0xC0	; 192
    110a:	9f 4f       	sbci	r25, 0xFF	; 255
    110c:	82 1b       	sub	r24, r18
    110e:	91 09       	sbc	r25, r1
}
    1110:	8f 73       	andi	r24, 0x3F	; 63
    1112:	99 27       	eor	r25, r25
    1114:	08 95       	ret

00001116 <_ZN14HardwareSerial4peekEv>:

int HardwareSerial::peek(void)
{
    1116:	fc 01       	movw	r30, r24
  if (_rx_buffer_head == _rx_buffer_tail) {
    1118:	91 8d       	ldd	r25, Z+25	; 0x19
    111a:	82 8d       	ldd	r24, Z+26	; 0x1a
    111c:	98 17       	cp	r25, r24
    111e:	31 f0       	breq	.+12     	; 0x112c <_ZN14HardwareSerial4peekEv+0x16>
    return -1;
  } else {
    return _rx_buffer[_rx_buffer_tail];
    1120:	82 8d       	ldd	r24, Z+26	; 0x1a
    1122:	e8 0f       	add	r30, r24
    1124:	f1 1d       	adc	r31, r1
    1126:	85 8d       	ldd	r24, Z+29	; 0x1d
    1128:	90 e0       	ldi	r25, 0x00	; 0
    112a:	08 95       	ret
}

int HardwareSerial::peek(void)
{
  if (_rx_buffer_head == _rx_buffer_tail) {
    return -1;
    112c:	8f ef       	ldi	r24, 0xFF	; 255
    112e:	9f ef       	ldi	r25, 0xFF	; 255
  } else {
    return _rx_buffer[_rx_buffer_tail];
  }
}
    1130:	08 95       	ret

00001132 <_ZN14HardwareSerial4readEv>:

int HardwareSerial::read(void)
{
    1132:	fc 01       	movw	r30, r24
  // if the head isn't ahead of the tail, we don't have any characters
  if (_rx_buffer_head == _rx_buffer_tail) {
    1134:	91 8d       	ldd	r25, Z+25	; 0x19
    1136:	82 8d       	ldd	r24, Z+26	; 0x1a
    1138:	98 17       	cp	r25, r24
    113a:	61 f0       	breq	.+24     	; 0x1154 <_ZN14HardwareSerial4readEv+0x22>
    return -1;
  } else {
    unsigned char c = _rx_buffer[_rx_buffer_tail];
    113c:	82 8d       	ldd	r24, Z+26	; 0x1a
    113e:	df 01       	movw	r26, r30
    1140:	a8 0f       	add	r26, r24
    1142:	b1 1d       	adc	r27, r1
    1144:	5d 96       	adiw	r26, 0x1d	; 29
    1146:	8c 91       	ld	r24, X
    _rx_buffer_tail = (rx_buffer_index_t)(_rx_buffer_tail + 1) % SERIAL_RX_BUFFER_SIZE;
    1148:	92 8d       	ldd	r25, Z+26	; 0x1a
    114a:	9f 5f       	subi	r25, 0xFF	; 255
    114c:	9f 73       	andi	r25, 0x3F	; 63
    114e:	92 8f       	std	Z+26, r25	; 0x1a
    return c;
    1150:	90 e0       	ldi	r25, 0x00	; 0
    1152:	08 95       	ret

int HardwareSerial::read(void)
{
  // if the head isn't ahead of the tail, we don't have any characters
  if (_rx_buffer_head == _rx_buffer_tail) {
    return -1;
    1154:	8f ef       	ldi	r24, 0xFF	; 255
    1156:	9f ef       	ldi	r25, 0xFF	; 255
  } else {
    unsigned char c = _rx_buffer[_rx_buffer_tail];
    _rx_buffer_tail = (rx_buffer_index_t)(_rx_buffer_tail + 1) % SERIAL_RX_BUFFER_SIZE;
    return c;
  }
}
    1158:	08 95       	ret

0000115a <_ZN14HardwareSerial17availableForWriteEv>:
{
#if (SERIAL_TX_BUFFER_SIZE>256)
  uint8_t oldSREG = SREG;
  cli();
#endif
  tx_buffer_index_t head = _tx_buffer_head;
    115a:	fc 01       	movw	r30, r24
    115c:	53 8d       	ldd	r21, Z+27	; 0x1b
  tx_buffer_index_t tail = _tx_buffer_tail;
    115e:	44 8d       	ldd	r20, Z+28	; 0x1c
    1160:	25 2f       	mov	r18, r21
    1162:	30 e0       	ldi	r19, 0x00	; 0
    1164:	84 2f       	mov	r24, r20
    1166:	90 e0       	ldi	r25, 0x00	; 0
#if (SERIAL_TX_BUFFER_SIZE>256)
  SREG = oldSREG;
#endif
  if (head >= tail) return SERIAL_TX_BUFFER_SIZE - 1 - head + tail;
    1168:	82 1b       	sub	r24, r18
    116a:	93 0b       	sbc	r25, r19
    116c:	54 17       	cp	r21, r20
    116e:	10 f0       	brcs	.+4      	; 0x1174 <_ZN14HardwareSerial17availableForWriteEv+0x1a>
    1170:	cf 96       	adiw	r24, 0x3f	; 63
    1172:	08 95       	ret
  return tail - head - 1;
    1174:	01 97       	sbiw	r24, 0x01	; 1
}
    1176:	08 95       	ret

00001178 <_Z14serialEventRunv>:
#endif

void serialEventRun(void)
{
#if defined(HAVE_HWSERIAL0)
  if (Serial0_available && serialEvent && Serial0_available()) serialEvent();
    1178:	81 e1       	ldi	r24, 0x11	; 17
    117a:	9a e0       	ldi	r25, 0x0A	; 10
    117c:	89 2b       	or	r24, r25
    117e:	49 f0       	breq	.+18     	; 0x1192 <_Z14serialEventRunv+0x1a>
    1180:	80 e0       	ldi	r24, 0x00	; 0
    1182:	90 e0       	ldi	r25, 0x00	; 0
    1184:	89 2b       	or	r24, r25
    1186:	29 f0       	breq	.+10     	; 0x1192 <_Z14serialEventRunv+0x1a>
    1188:	0e 94 11 0a 	call	0x1422	; 0x1422 <_Z17Serial0_availablev>
    118c:	81 11       	cpse	r24, r1
    118e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>
    1192:	08 95       	ret

00001194 <_ZN14HardwareSerial17_tx_udr_empty_irqEv>:
}

// Actual interrupt handlers //////////////////////////////////////////////////////////////

void HardwareSerial::_tx_udr_empty_irq(void)
{
    1194:	fc 01       	movw	r30, r24
  // If interrupts are enabled, there must be more data in the output
  // buffer. Send the next byte
  unsigned char c = _tx_buffer[_tx_buffer_tail];
    1196:	84 8d       	ldd	r24, Z+28	; 0x1c
    1198:	df 01       	movw	r26, r30
    119a:	a8 0f       	add	r26, r24
    119c:	b1 1d       	adc	r27, r1
    119e:	a3 5a       	subi	r26, 0xA3	; 163
    11a0:	bf 4f       	sbci	r27, 0xFF	; 255
    11a2:	2c 91       	ld	r18, X
  _tx_buffer_tail = (_tx_buffer_tail + 1) % SERIAL_TX_BUFFER_SIZE;
    11a4:	84 8d       	ldd	r24, Z+28	; 0x1c
    11a6:	90 e0       	ldi	r25, 0x00	; 0
    11a8:	01 96       	adiw	r24, 0x01	; 1
    11aa:	8f 73       	andi	r24, 0x3F	; 63
    11ac:	99 27       	eor	r25, r25
    11ae:	84 8f       	std	Z+28, r24	; 0x1c

  *_udr = c;
    11b0:	a6 89       	ldd	r26, Z+22	; 0x16
    11b2:	b7 89       	ldd	r27, Z+23	; 0x17
    11b4:	2c 93       	st	X, r18

  // clear the TXC bit -- "can be cleared by writing a one to its bit
  // location". This makes sure flush() won't return until the bytes
  // actually got written
  sbi(*_ucsra, TXC0);
    11b6:	a0 89       	ldd	r26, Z+16	; 0x10
    11b8:	b1 89       	ldd	r27, Z+17	; 0x11
    11ba:	8c 91       	ld	r24, X
    11bc:	80 64       	ori	r24, 0x40	; 64
    11be:	8c 93       	st	X, r24

  if (_tx_buffer_head == _tx_buffer_tail) {
    11c0:	93 8d       	ldd	r25, Z+27	; 0x1b
    11c2:	84 8d       	ldd	r24, Z+28	; 0x1c
    11c4:	98 13       	cpse	r25, r24
    11c6:	06 c0       	rjmp	.+12     	; 0x11d4 <_ZN14HardwareSerial17_tx_udr_empty_irqEv+0x40>
    // Buffer empty, so disable interrupts
    cbi(*_ucsrb, UDRIE0);
    11c8:	02 88       	ldd	r0, Z+18	; 0x12
    11ca:	f3 89       	ldd	r31, Z+19	; 0x13
    11cc:	e0 2d       	mov	r30, r0
    11ce:	80 81       	ld	r24, Z
    11d0:	8f 7d       	andi	r24, 0xDF	; 223
    11d2:	80 83       	st	Z, r24
    11d4:	08 95       	ret

000011d6 <_ZN14HardwareSerial5flushEv>:
  if (head >= tail) return SERIAL_TX_BUFFER_SIZE - 1 - head + tail;
  return tail - head - 1;
}

void HardwareSerial::flush()
{
    11d6:	cf 93       	push	r28
    11d8:	df 93       	push	r29
    11da:	ec 01       	movw	r28, r24
  // If we have never written a byte, no need to flush. This special
  // case is needed since there is no way to force the TXC (transmit
  // complete) bit to 1 during initialization
  if (!_written)
    11dc:	88 8d       	ldd	r24, Y+24	; 0x18
    11de:	88 23       	and	r24, r24
    11e0:	c9 f0       	breq	.+50     	; 0x1214 <_ZN14HardwareSerial5flushEv+0x3e>
    return;

  while (bit_is_set(*_ucsrb, UDRIE0) || bit_is_clear(*_ucsra, TXC0)) {
    11e2:	ea 89       	ldd	r30, Y+18	; 0x12
    11e4:	fb 89       	ldd	r31, Y+19	; 0x13
    11e6:	80 81       	ld	r24, Z
    11e8:	85 fd       	sbrc	r24, 5
    11ea:	05 c0       	rjmp	.+10     	; 0x11f6 <_ZN14HardwareSerial5flushEv+0x20>
    11ec:	a8 89       	ldd	r26, Y+16	; 0x10
    11ee:	b9 89       	ldd	r27, Y+17	; 0x11
    11f0:	8c 91       	ld	r24, X
    11f2:	86 fd       	sbrc	r24, 6
    11f4:	0f c0       	rjmp	.+30     	; 0x1214 <_ZN14HardwareSerial5flushEv+0x3e>
    if (bit_is_clear(SREG, SREG_I) && bit_is_set(*_ucsrb, UDRIE0))
    11f6:	0f b6       	in	r0, 0x3f	; 63
    11f8:	07 fc       	sbrc	r0, 7
    11fa:	f5 cf       	rjmp	.-22     	; 0x11e6 <_ZN14HardwareSerial5flushEv+0x10>
    11fc:	80 81       	ld	r24, Z
    11fe:	85 ff       	sbrs	r24, 5
    1200:	f2 cf       	rjmp	.-28     	; 0x11e6 <_ZN14HardwareSerial5flushEv+0x10>
	// Interrupts are globally disabled, but the DR empty
	// interrupt should be enabled, so poll the DR empty flag to
	// prevent deadlock
	if (bit_is_set(*_ucsra, UDRE0))
    1202:	a8 89       	ldd	r26, Y+16	; 0x10
    1204:	b9 89       	ldd	r27, Y+17	; 0x11
    1206:	8c 91       	ld	r24, X
    1208:	85 ff       	sbrs	r24, 5
    120a:	ed cf       	rjmp	.-38     	; 0x11e6 <_ZN14HardwareSerial5flushEv+0x10>
	  _tx_udr_empty_irq();
    120c:	ce 01       	movw	r24, r28
    120e:	0e 94 ca 08 	call	0x1194	; 0x1194 <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
    1212:	e7 cf       	rjmp	.-50     	; 0x11e2 <_ZN14HardwareSerial5flushEv+0xc>
  }
  // If we get here, nothing is queued anymore (DRIE is disabled) and
  // the hardware finished tranmission (TXC is set).
}
    1214:	df 91       	pop	r29
    1216:	cf 91       	pop	r28
    1218:	08 95       	ret

0000121a <_ZN14HardwareSerial5writeEh>:

size_t HardwareSerial::write(uint8_t c)
{
    121a:	ef 92       	push	r14
    121c:	ff 92       	push	r15
    121e:	0f 93       	push	r16
    1220:	1f 93       	push	r17
    1222:	cf 93       	push	r28
    1224:	df 93       	push	r29
    1226:	ec 01       	movw	r28, r24
  _written = true;
    1228:	81 e0       	ldi	r24, 0x01	; 1
    122a:	88 8f       	std	Y+24, r24	; 0x18
  // If the buffer and the data register is empty, just write the byte
  // to the data register and be done. This shortcut helps
  // significantly improve the effective datarate at high (>
  // 500kbit/s) bitrates, where interrupt overhead becomes a slowdown.
  if (_tx_buffer_head == _tx_buffer_tail && bit_is_set(*_ucsra, UDRE0)) {
    122c:	9b 8d       	ldd	r25, Y+27	; 0x1b
    122e:	8c 8d       	ldd	r24, Y+28	; 0x1c
    1230:	98 13       	cpse	r25, r24
    1232:	05 c0       	rjmp	.+10     	; 0x123e <_ZN14HardwareSerial5writeEh+0x24>
    1234:	e8 89       	ldd	r30, Y+16	; 0x10
    1236:	f9 89       	ldd	r31, Y+17	; 0x11
    1238:	80 81       	ld	r24, Z
    123a:	85 fd       	sbrc	r24, 5
    123c:	24 c0       	rjmp	.+72     	; 0x1286 <_ZN14HardwareSerial5writeEh+0x6c>
    123e:	f6 2e       	mov	r15, r22
    *_udr = c;
    sbi(*_ucsra, TXC0);
    return 1;
  }
  tx_buffer_index_t i = (_tx_buffer_head + 1) % SERIAL_TX_BUFFER_SIZE;
    1240:	0b 8d       	ldd	r16, Y+27	; 0x1b
    1242:	10 e0       	ldi	r17, 0x00	; 0
    1244:	0f 5f       	subi	r16, 0xFF	; 255
    1246:	1f 4f       	sbci	r17, 0xFF	; 255
    1248:	0f 73       	andi	r16, 0x3F	; 63
    124a:	11 27       	eor	r17, r17
    124c:	e0 2e       	mov	r14, r16
	
  // If the output buffer is full, there's nothing for it other than to 
  // wait for the interrupt handler to empty it a bit
  while (i == _tx_buffer_tail) {
    124e:	8c 8d       	ldd	r24, Y+28	; 0x1c
    1250:	e8 12       	cpse	r14, r24
    1252:	0c c0       	rjmp	.+24     	; 0x126c <_ZN14HardwareSerial5writeEh+0x52>
    if (bit_is_clear(SREG, SREG_I)) {
    1254:	0f b6       	in	r0, 0x3f	; 63
    1256:	07 fc       	sbrc	r0, 7
    1258:	fa cf       	rjmp	.-12     	; 0x124e <_ZN14HardwareSerial5writeEh+0x34>
      // Interrupts are disabled, so we'll have to poll the data
      // register empty flag ourselves. If it is set, pretend an
      // interrupt has happened and call the handler to free up
      // space for us.
      if(bit_is_set(*_ucsra, UDRE0))
    125a:	e8 89       	ldd	r30, Y+16	; 0x10
    125c:	f9 89       	ldd	r31, Y+17	; 0x11
    125e:	80 81       	ld	r24, Z
    1260:	85 ff       	sbrs	r24, 5
    1262:	f5 cf       	rjmp	.-22     	; 0x124e <_ZN14HardwareSerial5writeEh+0x34>
	_tx_udr_empty_irq();
    1264:	ce 01       	movw	r24, r28
    1266:	0e 94 ca 08 	call	0x1194	; 0x1194 <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
    126a:	f1 cf       	rjmp	.-30     	; 0x124e <_ZN14HardwareSerial5writeEh+0x34>
    } else {
      // nop, the interrupt handler will free up space for us
    }
  }

  _tx_buffer[_tx_buffer_head] = c;
    126c:	8b 8d       	ldd	r24, Y+27	; 0x1b
    126e:	fe 01       	movw	r30, r28
    1270:	e8 0f       	add	r30, r24
    1272:	f1 1d       	adc	r31, r1
    1274:	e3 5a       	subi	r30, 0xA3	; 163
    1276:	ff 4f       	sbci	r31, 0xFF	; 255
    1278:	f0 82       	st	Z, r15
  _tx_buffer_head = i;
    127a:	0b 8f       	std	Y+27, r16	; 0x1b
	
  sbi(*_ucsrb, UDRIE0);
    127c:	ea 89       	ldd	r30, Y+18	; 0x12
    127e:	fb 89       	ldd	r31, Y+19	; 0x13
    1280:	80 81       	ld	r24, Z
    1282:	80 62       	ori	r24, 0x20	; 32
    1284:	07 c0       	rjmp	.+14     	; 0x1294 <_ZN14HardwareSerial5writeEh+0x7a>
  // If the buffer and the data register is empty, just write the byte
  // to the data register and be done. This shortcut helps
  // significantly improve the effective datarate at high (>
  // 500kbit/s) bitrates, where interrupt overhead becomes a slowdown.
  if (_tx_buffer_head == _tx_buffer_tail && bit_is_set(*_ucsra, UDRE0)) {
    *_udr = c;
    1286:	ee 89       	ldd	r30, Y+22	; 0x16
    1288:	ff 89       	ldd	r31, Y+23	; 0x17
    128a:	60 83       	st	Z, r22
    sbi(*_ucsra, TXC0);
    128c:	e8 89       	ldd	r30, Y+16	; 0x10
    128e:	f9 89       	ldd	r31, Y+17	; 0x11
    1290:	80 81       	ld	r24, Z
    1292:	80 64       	ori	r24, 0x40	; 64
    1294:	80 83       	st	Z, r24
  _tx_buffer_head = i;
	
  sbi(*_ucsrb, UDRIE0);
  
  return 1;
}
    1296:	81 e0       	ldi	r24, 0x01	; 1
    1298:	90 e0       	ldi	r25, 0x00	; 0
    129a:	df 91       	pop	r29
    129c:	cf 91       	pop	r28
    129e:	1f 91       	pop	r17
    12a0:	0f 91       	pop	r16
    12a2:	ff 90       	pop	r15
    12a4:	ef 90       	pop	r14
    12a6:	08 95       	ret

000012a8 <_ZN14HardwareSerial5beginEmh>:
}

// Public Methods //////////////////////////////////////////////////////////////

void HardwareSerial::begin(unsigned long baud, byte config)
{
    12a8:	cf 92       	push	r12
    12aa:	df 92       	push	r13
    12ac:	ef 92       	push	r14
    12ae:	ff 92       	push	r15
    12b0:	1f 93       	push	r17
    12b2:	cf 93       	push	r28
    12b4:	df 93       	push	r29
    12b6:	ec 01       	movw	r28, r24
    12b8:	6a 01       	movw	r12, r20
    12ba:	7b 01       	movw	r14, r22
    12bc:	12 2f       	mov	r17, r18
  // Try u2x mode first
  uint16_t baud_setting = (F_CPU / 4 / baud - 1) / 2;
  *_ucsra = 1 << U2X0;
    12be:	e8 89       	ldd	r30, Y+16	; 0x10
    12c0:	f9 89       	ldd	r31, Y+17	; 0x11
    12c2:	82 e0       	ldi	r24, 0x02	; 2
    12c4:	80 83       	st	Z, r24
  // hardcoded exception for 57600 for compatibility with the bootloader
  // shipped with the Duemilanove and previous boards and the firmware
  // on the 8U2 on the Uno and Mega 2560. Also, The baud_setting cannot
  // be > 4095, so switch back to non-u2x mode if the baud rate is too
  // low.
  if (((F_CPU == 16000000UL) && (baud == 57600)) || (baud_setting >4095))
    12c6:	41 15       	cp	r20, r1
    12c8:	51 4e       	sbci	r21, 0xE1	; 225
    12ca:	61 05       	cpc	r22, r1
    12cc:	71 05       	cpc	r23, r1
    12ce:	b1 f0       	breq	.+44     	; 0x12fc <_ZN14HardwareSerial5beginEmh+0x54>
// Public Methods //////////////////////////////////////////////////////////////

void HardwareSerial::begin(unsigned long baud, byte config)
{
  // Try u2x mode first
  uint16_t baud_setting = (F_CPU / 4 / baud - 1) / 2;
    12d0:	60 e0       	ldi	r22, 0x00	; 0
    12d2:	79 e0       	ldi	r23, 0x09	; 9
    12d4:	8d e3       	ldi	r24, 0x3D	; 61
    12d6:	90 e0       	ldi	r25, 0x00	; 0
    12d8:	a7 01       	movw	r20, r14
    12da:	96 01       	movw	r18, r12
    12dc:	0e 94 9d 0e 	call	0x1d3a	; 0x1d3a <__udivmodsi4>
    12e0:	da 01       	movw	r26, r20
    12e2:	c9 01       	movw	r24, r18
    12e4:	01 97       	sbiw	r24, 0x01	; 1
    12e6:	a1 09       	sbc	r26, r1
    12e8:	b1 09       	sbc	r27, r1
    12ea:	b6 95       	lsr	r27
    12ec:	a7 95       	ror	r26
    12ee:	97 95       	ror	r25
    12f0:	87 95       	ror	r24
    12f2:	ac 01       	movw	r20, r24
  // hardcoded exception for 57600 for compatibility with the bootloader
  // shipped with the Duemilanove and previous boards and the firmware
  // on the 8U2 on the Uno and Mega 2560. Also, The baud_setting cannot
  // be > 4095, so switch back to non-u2x mode if the baud rate is too
  // low.
  if (((F_CPU == 16000000UL) && (baud == 57600)) || (baud_setting >4095))
    12f4:	41 15       	cp	r20, r1
    12f6:	80 e1       	ldi	r24, 0x10	; 16
    12f8:	58 07       	cpc	r21, r24
    12fa:	a8 f0       	brcs	.+42     	; 0x1326 <_ZN14HardwareSerial5beginEmh+0x7e>
  {
    *_ucsra = 0;
    12fc:	e8 89       	ldd	r30, Y+16	; 0x10
    12fe:	f9 89       	ldd	r31, Y+17	; 0x11
    1300:	10 82       	st	Z, r1
    baud_setting = (F_CPU / 8 / baud - 1) / 2;
    1302:	60 e8       	ldi	r22, 0x80	; 128
    1304:	74 e8       	ldi	r23, 0x84	; 132
    1306:	8e e1       	ldi	r24, 0x1E	; 30
    1308:	90 e0       	ldi	r25, 0x00	; 0
    130a:	a7 01       	movw	r20, r14
    130c:	96 01       	movw	r18, r12
    130e:	0e 94 9d 0e 	call	0x1d3a	; 0x1d3a <__udivmodsi4>
    1312:	ba 01       	movw	r22, r20
    1314:	a9 01       	movw	r20, r18
    1316:	41 50       	subi	r20, 0x01	; 1
    1318:	51 09       	sbc	r21, r1
    131a:	61 09       	sbc	r22, r1
    131c:	71 09       	sbc	r23, r1
    131e:	76 95       	lsr	r23
    1320:	67 95       	ror	r22
    1322:	57 95       	ror	r21
    1324:	47 95       	ror	r20
  }

  // assign the baud_setting, a.k.a. ubrr (USART Baud Rate Register)
  *_ubrrh = baud_setting >> 8;
    1326:	ec 85       	ldd	r30, Y+12	; 0x0c
    1328:	fd 85       	ldd	r31, Y+13	; 0x0d
    132a:	50 83       	st	Z, r21
  *_ubrrl = baud_setting;
    132c:	ee 85       	ldd	r30, Y+14	; 0x0e
    132e:	ff 85       	ldd	r31, Y+15	; 0x0f
    1330:	40 83       	st	Z, r20

  _written = false;
    1332:	18 8e       	std	Y+24, r1	; 0x18

  //set the data bits, parity, and stop bits
#if defined(__AVR_ATmega8__)
  config |= 0x80; // select UCSRC register (shared with UBRRH)
#endif
  *_ucsrc = config;
    1334:	ec 89       	ldd	r30, Y+20	; 0x14
    1336:	fd 89       	ldd	r31, Y+21	; 0x15
    1338:	10 83       	st	Z, r17
  
  sbi(*_ucsrb, RXEN0);
    133a:	ea 89       	ldd	r30, Y+18	; 0x12
    133c:	fb 89       	ldd	r31, Y+19	; 0x13
    133e:	80 81       	ld	r24, Z
    1340:	80 61       	ori	r24, 0x10	; 16
    1342:	80 83       	st	Z, r24
  sbi(*_ucsrb, TXEN0);
    1344:	ea 89       	ldd	r30, Y+18	; 0x12
    1346:	fb 89       	ldd	r31, Y+19	; 0x13
    1348:	80 81       	ld	r24, Z
    134a:	88 60       	ori	r24, 0x08	; 8
    134c:	80 83       	st	Z, r24
  sbi(*_ucsrb, RXCIE0);
    134e:	ea 89       	ldd	r30, Y+18	; 0x12
    1350:	fb 89       	ldd	r31, Y+19	; 0x13
    1352:	80 81       	ld	r24, Z
    1354:	80 68       	ori	r24, 0x80	; 128
    1356:	80 83       	st	Z, r24
  cbi(*_ucsrb, UDRIE0);
    1358:	ea 89       	ldd	r30, Y+18	; 0x12
    135a:	fb 89       	ldd	r31, Y+19	; 0x13
    135c:	80 81       	ld	r24, Z
    135e:	8f 7d       	andi	r24, 0xDF	; 223
    1360:	80 83       	st	Z, r24
}
    1362:	df 91       	pop	r29
    1364:	cf 91       	pop	r28
    1366:	1f 91       	pop	r17
    1368:	ff 90       	pop	r15
    136a:	ef 90       	pop	r14
    136c:	df 90       	pop	r13
    136e:	cf 90       	pop	r12
    1370:	08 95       	ret

00001372 <__vector_18>:
#elif defined(USART_RXC_vect)
  ISR(USART_RXC_vect) // ATmega8
#else
  #error "Don't know what the Data Received vector is called for Serial"
#endif
  {
    1372:	1f 92       	push	r1
    1374:	0f 92       	push	r0
    1376:	0f b6       	in	r0, 0x3f	; 63
    1378:	0f 92       	push	r0
    137a:	11 24       	eor	r1, r1
    137c:	2f 93       	push	r18
    137e:	8f 93       	push	r24
    1380:	9f 93       	push	r25
    1382:	ef 93       	push	r30
    1384:	ff 93       	push	r31

// Actual interrupt handlers //////////////////////////////////////////////////////////////

void HardwareSerial::_rx_complete_irq(void)
{
  if (bit_is_clear(*_ucsra, UPE0)) {
    1386:	e0 91 55 03 	lds	r30, 0x0355	; 0x800355 <Serial+0x10>
    138a:	f0 91 56 03 	lds	r31, 0x0356	; 0x800356 <Serial+0x11>
    138e:	80 81       	ld	r24, Z
    1390:	e0 91 5b 03 	lds	r30, 0x035B	; 0x80035b <Serial+0x16>
    1394:	f0 91 5c 03 	lds	r31, 0x035C	; 0x80035c <Serial+0x17>
    1398:	82 fd       	sbrc	r24, 2
    139a:	12 c0       	rjmp	.+36     	; 0x13c0 <__vector_18+0x4e>
    // No Parity error, read byte and store it in the buffer if there is
    // room
    unsigned char c = *_udr;
    139c:	90 81       	ld	r25, Z
    rx_buffer_index_t i = (unsigned int)(_rx_buffer_head + 1) % SERIAL_RX_BUFFER_SIZE;
    139e:	80 91 5e 03 	lds	r24, 0x035E	; 0x80035e <Serial+0x19>
    13a2:	8f 5f       	subi	r24, 0xFF	; 255
    13a4:	8f 73       	andi	r24, 0x3F	; 63

    // if we should be storing the received character into the location
    // just before the tail (meaning that the head would advance to the
    // current location of the tail), we're about to overflow the buffer
    // and so we don't write the character or advance the head.
    if (i != _rx_buffer_tail) {
    13a6:	20 91 5f 03 	lds	r18, 0x035F	; 0x80035f <Serial+0x1a>
    13aa:	82 17       	cp	r24, r18
    13ac:	51 f0       	breq	.+20     	; 0x13c2 <__vector_18+0x50>
      _rx_buffer[_rx_buffer_head] = c;
    13ae:	e0 91 5e 03 	lds	r30, 0x035E	; 0x80035e <Serial+0x19>
    13b2:	f0 e0       	ldi	r31, 0x00	; 0
    13b4:	eb 5b       	subi	r30, 0xBB	; 187
    13b6:	fc 4f       	sbci	r31, 0xFC	; 252
    13b8:	95 8f       	std	Z+29, r25	; 0x1d
      _rx_buffer_head = i;
    13ba:	80 93 5e 03 	sts	0x035E, r24	; 0x80035e <Serial+0x19>
    13be:	01 c0       	rjmp	.+2      	; 0x13c2 <__vector_18+0x50>
    }
  } else {
    // Parity error, read byte but discard it
    *_udr;
    13c0:	80 81       	ld	r24, Z
    Serial._rx_complete_irq();
  }
    13c2:	ff 91       	pop	r31
    13c4:	ef 91       	pop	r30
    13c6:	9f 91       	pop	r25
    13c8:	8f 91       	pop	r24
    13ca:	2f 91       	pop	r18
    13cc:	0f 90       	pop	r0
    13ce:	0f be       	out	0x3f, r0	; 63
    13d0:	0f 90       	pop	r0
    13d2:	1f 90       	pop	r1
    13d4:	18 95       	reti

000013d6 <__vector_19>:
#elif defined(USART_UDRE_vect)
ISR(USART_UDRE_vect)
#else
  #error "Don't know what the Data Register Empty vector is called for Serial"
#endif
{
    13d6:	1f 92       	push	r1
    13d8:	0f 92       	push	r0
    13da:	0f b6       	in	r0, 0x3f	; 63
    13dc:	0f 92       	push	r0
    13de:	11 24       	eor	r1, r1
    13e0:	2f 93       	push	r18
    13e2:	3f 93       	push	r19
    13e4:	4f 93       	push	r20
    13e6:	5f 93       	push	r21
    13e8:	6f 93       	push	r22
    13ea:	7f 93       	push	r23
    13ec:	8f 93       	push	r24
    13ee:	9f 93       	push	r25
    13f0:	af 93       	push	r26
    13f2:	bf 93       	push	r27
    13f4:	ef 93       	push	r30
    13f6:	ff 93       	push	r31
  Serial._tx_udr_empty_irq();
    13f8:	85 e4       	ldi	r24, 0x45	; 69
    13fa:	93 e0       	ldi	r25, 0x03	; 3
    13fc:	0e 94 ca 08 	call	0x1194	; 0x1194 <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
}
    1400:	ff 91       	pop	r31
    1402:	ef 91       	pop	r30
    1404:	bf 91       	pop	r27
    1406:	af 91       	pop	r26
    1408:	9f 91       	pop	r25
    140a:	8f 91       	pop	r24
    140c:	7f 91       	pop	r23
    140e:	6f 91       	pop	r22
    1410:	5f 91       	pop	r21
    1412:	4f 91       	pop	r20
    1414:	3f 91       	pop	r19
    1416:	2f 91       	pop	r18
    1418:	0f 90       	pop	r0
    141a:	0f be       	out	0x3f, r0	; 63
    141c:	0f 90       	pop	r0
    141e:	1f 90       	pop	r1
    1420:	18 95       	reti

00001422 <_Z17Serial0_availablev>:
#endif

// Function that can be weakly referenced by serialEventRun to prevent
// pulling in this file if it's not otherwise used.
bool Serial0_available() {
  return Serial.available();
    1422:	85 e4       	ldi	r24, 0x45	; 69
    1424:	93 e0       	ldi	r25, 0x03	; 3
    1426:	0e 94 7f 08 	call	0x10fe	; 0x10fe <_ZN14HardwareSerial9availableEv>
    142a:	21 e0       	ldi	r18, 0x01	; 1
    142c:	89 2b       	or	r24, r25
    142e:	09 f4       	brne	.+2      	; 0x1432 <_Z17Serial0_availablev+0x10>
    1430:	20 e0       	ldi	r18, 0x00	; 0
}
    1432:	82 2f       	mov	r24, r18
    1434:	08 95       	ret

00001436 <_GLOBAL__sub_I___vector_18>:
    size_t printNumber(unsigned long, uint8_t);
    size_t printFloat(double, uint8_t);
  protected:
    void setWriteError(int err = 1) { write_error = err; }
  public:
    Print() : write_error(0) {}
    1436:	e5 e4       	ldi	r30, 0x45	; 69
    1438:	f3 e0       	ldi	r31, 0x03	; 3
    143a:	13 82       	std	Z+3, r1	; 0x03
    143c:	12 82       	std	Z+2, r1	; 0x02
  public:
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;

    Stream() {_timeout=1000;}
    143e:	88 ee       	ldi	r24, 0xE8	; 232
    1440:	93 e0       	ldi	r25, 0x03	; 3
    1442:	a0 e0       	ldi	r26, 0x00	; 0
    1444:	b0 e0       	ldi	r27, 0x00	; 0
    1446:	84 83       	std	Z+4, r24	; 0x04
    1448:	95 83       	std	Z+5, r25	; 0x05
    144a:	a6 83       	std	Z+6, r26	; 0x06
    144c:	b7 83       	std	Z+7, r27	; 0x07
  volatile uint8_t *ucsrc, volatile uint8_t *udr) :
    _ubrrh(ubrrh), _ubrrl(ubrrl),
    _ucsra(ucsra), _ucsrb(ucsrb), _ucsrc(ucsrc),
    _udr(udr),
    _rx_buffer_head(0), _rx_buffer_tail(0),
    _tx_buffer_head(0), _tx_buffer_tail(0)
    144e:	8a ef       	ldi	r24, 0xFA	; 250
    1450:	92 e0       	ldi	r25, 0x02	; 2
    1452:	91 83       	std	Z+1, r25	; 0x01
    1454:	80 83       	st	Z, r24
    1456:	85 ec       	ldi	r24, 0xC5	; 197
    1458:	90 e0       	ldi	r25, 0x00	; 0
    145a:	95 87       	std	Z+13, r25	; 0x0d
    145c:	84 87       	std	Z+12, r24	; 0x0c
    145e:	84 ec       	ldi	r24, 0xC4	; 196
    1460:	90 e0       	ldi	r25, 0x00	; 0
    1462:	97 87       	std	Z+15, r25	; 0x0f
    1464:	86 87       	std	Z+14, r24	; 0x0e
    1466:	80 ec       	ldi	r24, 0xC0	; 192
    1468:	90 e0       	ldi	r25, 0x00	; 0
    146a:	91 8b       	std	Z+17, r25	; 0x11
    146c:	80 8b       	std	Z+16, r24	; 0x10
    146e:	81 ec       	ldi	r24, 0xC1	; 193
    1470:	90 e0       	ldi	r25, 0x00	; 0
    1472:	93 8b       	std	Z+19, r25	; 0x13
    1474:	82 8b       	std	Z+18, r24	; 0x12
    1476:	82 ec       	ldi	r24, 0xC2	; 194
    1478:	90 e0       	ldi	r25, 0x00	; 0
    147a:	95 8b       	std	Z+21, r25	; 0x15
    147c:	84 8b       	std	Z+20, r24	; 0x14
    147e:	86 ec       	ldi	r24, 0xC6	; 198
    1480:	90 e0       	ldi	r25, 0x00	; 0
    1482:	97 8b       	std	Z+23, r25	; 0x17
    1484:	86 8b       	std	Z+22, r24	; 0x16
    1486:	11 8e       	std	Z+25, r1	; 0x19
    1488:	12 8e       	std	Z+26, r1	; 0x1a
    148a:	13 8e       	std	Z+27, r1	; 0x1b
    148c:	14 8e       	std	Z+28, r1	; 0x1c
    148e:	08 95       	ret

00001490 <_ZN5Print5writeEPKhj>:
size_t Print::println(const String &s)
{
  size_t n = print(s);
  n += println();
  return n;
}
    1490:	cf 92       	push	r12
    1492:	df 92       	push	r13
    1494:	ef 92       	push	r14
    1496:	ff 92       	push	r15
    1498:	0f 93       	push	r16
    149a:	1f 93       	push	r17
    149c:	cf 93       	push	r28
    149e:	df 93       	push	r29
    14a0:	6c 01       	movw	r12, r24
    14a2:	7a 01       	movw	r14, r20
    14a4:	8b 01       	movw	r16, r22
    14a6:	c0 e0       	ldi	r28, 0x00	; 0
    14a8:	d0 e0       	ldi	r29, 0x00	; 0
    14aa:	ce 15       	cp	r28, r14
    14ac:	df 05       	cpc	r29, r15
    14ae:	89 f0       	breq	.+34     	; 0x14d2 <_ZN5Print5writeEPKhj+0x42>
    14b0:	d8 01       	movw	r26, r16
    14b2:	6d 91       	ld	r22, X+
    14b4:	8d 01       	movw	r16, r26
    14b6:	d6 01       	movw	r26, r12
    14b8:	ed 91       	ld	r30, X+
    14ba:	fc 91       	ld	r31, X
    14bc:	01 90       	ld	r0, Z+
    14be:	f0 81       	ld	r31, Z
    14c0:	e0 2d       	mov	r30, r0
    14c2:	c6 01       	movw	r24, r12
    14c4:	09 95       	icall
    14c6:	89 2b       	or	r24, r25
    14c8:	11 f4       	brne	.+4      	; 0x14ce <_ZN5Print5writeEPKhj+0x3e>
    14ca:	7e 01       	movw	r14, r28
    14cc:	02 c0       	rjmp	.+4      	; 0x14d2 <_ZN5Print5writeEPKhj+0x42>
    14ce:	21 96       	adiw	r28, 0x01	; 1
    14d0:	ec cf       	rjmp	.-40     	; 0x14aa <_ZN5Print5writeEPKhj+0x1a>
    14d2:	c7 01       	movw	r24, r14
    14d4:	df 91       	pop	r29
    14d6:	cf 91       	pop	r28
    14d8:	1f 91       	pop	r17
    14da:	0f 91       	pop	r16
    14dc:	ff 90       	pop	r15
    14de:	ef 90       	pop	r14
    14e0:	df 90       	pop	r13
    14e2:	cf 90       	pop	r12
    14e4:	08 95       	ret

000014e6 <_ZN5Print5writeEPKc>:
    14e6:	61 15       	cp	r22, r1
    14e8:	71 05       	cpc	r23, r1
    14ea:	79 f0       	breq	.+30     	; 0x150a <_ZN5Print5writeEPKc+0x24>
    14ec:	fb 01       	movw	r30, r22
    14ee:	01 90       	ld	r0, Z+
    14f0:	00 20       	and	r0, r0
    14f2:	e9 f7       	brne	.-6      	; 0x14ee <_ZN5Print5writeEPKc+0x8>
    14f4:	31 97       	sbiw	r30, 0x01	; 1
    14f6:	af 01       	movw	r20, r30
    14f8:	46 1b       	sub	r20, r22
    14fa:	57 0b       	sbc	r21, r23
    14fc:	dc 01       	movw	r26, r24
    14fe:	ed 91       	ld	r30, X+
    1500:	fc 91       	ld	r31, X
    1502:	02 80       	ldd	r0, Z+2	; 0x02
    1504:	f3 81       	ldd	r31, Z+3	; 0x03
    1506:	e0 2d       	mov	r30, r0
    1508:	09 94       	ijmp
    150a:	80 e0       	ldi	r24, 0x00	; 0
    150c:	90 e0       	ldi	r25, 0x00	; 0
    150e:	08 95       	ret

00001510 <_ZN5Print5printEPKc>:
    1510:	0c 94 73 0a 	jmp	0x14e6	; 0x14e6 <_ZN5Print5writeEPKc>

00001514 <_ZN5Print7printlnEv>:
    1514:	61 ed       	ldi	r22, 0xD1	; 209
    1516:	71 e0       	ldi	r23, 0x01	; 1
    1518:	0c 94 73 0a 	jmp	0x14e6	; 0x14e6 <_ZN5Print5writeEPKc>

0000151c <_ZN5Print7printlnEPKc>:

size_t Print::println(const char c[])
{
    151c:	0f 93       	push	r16
    151e:	1f 93       	push	r17
    1520:	cf 93       	push	r28
    1522:	df 93       	push	r29
    1524:	ec 01       	movw	r28, r24
  return write(s.c_str(), s.length());
}

size_t Print::print(const char str[])
{
  return write(str);
    1526:	0e 94 73 0a 	call	0x14e6	; 0x14e6 <_ZN5Print5writeEPKc>
    152a:	8c 01       	movw	r16, r24
}

size_t Print::println(const char c[])
{
  size_t n = print(c);
  n += println();
    152c:	ce 01       	movw	r24, r28
    152e:	0e 94 8a 0a 	call	0x1514	; 0x1514 <_ZN5Print7printlnEv>
  return n;
}
    1532:	80 0f       	add	r24, r16
    1534:	91 1f       	adc	r25, r17
    1536:	df 91       	pop	r29
    1538:	cf 91       	pop	r28
    153a:	1f 91       	pop	r17
    153c:	0f 91       	pop	r16
    153e:	08 95       	ret

00001540 <yield>:
 * libraries or sketches that supports cooperative threads.
 *
 * Its defined as a weak symbol and it can be redefined to implement a
 * real cooperative scheduler.
 */
static void __empty() {
    1540:	08 95       	ret

00001542 <StartOS>:
    osEE_end_primitive(flags);
  }
#endif /* OSEE_HAS_ERRORHOOK */

  return ev;
}
    1542:	0f 93       	push	r16
    1544:	1f 93       	push	r17
    1546:	cf 93       	push	r28
    1548:	df 93       	push	r29
    154a:	00 d0       	rcall	.+0      	; 0x154c <StartOS+0xa>
    154c:	cd b7       	in	r28, 0x3d	; 61
    154e:	de b7       	in	r29, 0x3e	; 62
    1550:	00 91 72 01 	lds	r16, 0x0172	; 0x800172 <CDB>
    1554:	10 91 73 01 	lds	r17, 0x0173	; 0x800173 <CDB+0x1>
    1558:	9f b7       	in	r25, 0x3f	; 63
    155a:	f8 94       	cli
    155c:	f8 01       	movw	r30, r16
    155e:	20 85       	ldd	r18, Z+8	; 0x08
    1560:	31 85       	ldd	r19, Z+9	; 0x09
    1562:	23 2b       	or	r18, r19
    1564:	e9 f4       	brne	.+58     	; 0x15a0 <StartOS+0x5e>
    1566:	28 2f       	mov	r18, r24
    1568:	8f e3       	ldi	r24, 0x3F	; 63
    156a:	9c e0       	ldi	r25, 0x0C	; 12
    156c:	9a 83       	std	Y+2, r25	; 0x02
    156e:	89 83       	std	Y+1, r24	; 0x01
    1570:	80 91 76 01 	lds	r24, 0x0176	; 0x800176 <CDB+0x4>
    1574:	90 91 77 01 	lds	r25, 0x0177	; 0x800177 <CDB+0x5>
    1578:	22 87       	std	Z+10, r18	; 0x0a
    157a:	22 e0       	ldi	r18, 0x02	; 2
    157c:	30 e0       	ldi	r19, 0x00	; 0
    157e:	31 87       	std	Z+9, r19	; 0x09
    1580:	20 87       	std	Z+8, r18	; 0x08
    1582:	fc 01       	movw	r30, r24
    1584:	62 81       	ldd	r22, Z+2	; 0x02
    1586:	73 81       	ldd	r23, Z+3	; 0x03
    1588:	ab 01       	movw	r20, r22
    158a:	0e 94 3e 01 	call	0x27c	; 0x27c <osEE_hal_save_ctx_and_ready2stacked>
    158e:	f8 01       	movw	r30, r16
    1590:	80 85       	ldd	r24, Z+8	; 0x08
    1592:	91 85       	ldd	r25, Z+9	; 0x09
    1594:	02 97       	sbiw	r24, 0x02	; 2
    1596:	09 f4       	brne	.+2      	; 0x159a <StartOS+0x58>
    1598:	78 94       	sei
    159a:	80 e0       	ldi	r24, 0x00	; 0
    159c:	90 e0       	ldi	r25, 0x00	; 0
    159e:	03 c0       	rjmp	.+6      	; 0x15a6 <StartOS+0x64>
    15a0:	9f bf       	out	0x3f, r25	; 63
    15a2:	81 e0       	ldi	r24, 0x01	; 1
    15a4:	90 e0       	ldi	r25, 0x00	; 0
    15a6:	0f 90       	pop	r0
    15a8:	0f 90       	pop	r0
    15aa:	df 91       	pop	r29
    15ac:	cf 91       	pop	r28
    15ae:	1f 91       	pop	r17
    15b0:	0f 91       	pop	r16
    15b2:	08 95       	ret

000015b4 <ActivateTask>:
    15b4:	cf 93       	push	r28
    15b6:	90 e0       	ldi	r25, 0x00	; 0
    15b8:	20 91 6e 01 	lds	r18, 0x016E	; 0x80016e <KDB+0x6>
    15bc:	30 91 6f 01 	lds	r19, 0x016F	; 0x80016f <KDB+0x7>
    15c0:	82 17       	cp	r24, r18
    15c2:	93 07       	cpc	r25, r19
    15c4:	d8 f4       	brcc	.+54     	; 0x15fc <ActivateTask+0x48>
    15c6:	e0 91 6a 01 	lds	r30, 0x016A	; 0x80016a <KDB+0x2>
    15ca:	f0 91 6b 01 	lds	r31, 0x016B	; 0x80016b <KDB+0x3>
    15ce:	88 0f       	add	r24, r24
    15d0:	99 1f       	adc	r25, r25
    15d2:	e8 0f       	add	r30, r24
    15d4:	f9 1f       	adc	r31, r25
    15d6:	40 81       	ld	r20, Z
    15d8:	51 81       	ldd	r21, Z+1	; 0x01
    15da:	fa 01       	movw	r30, r20
    15dc:	87 81       	ldd	r24, Z+7	; 0x07
    15de:	90 85       	ldd	r25, Z+8	; 0x08
    15e0:	02 97       	sbiw	r24, 0x02	; 2
    15e2:	60 f4       	brcc	.+24     	; 0x15fc <ActivateTask+0x48>
    15e4:	cf b7       	in	r28, 0x3f	; 63
    15e6:	f8 94       	cli
    15e8:	21 e0       	ldi	r18, 0x01	; 1
    15ea:	30 e0       	ldi	r19, 0x00	; 0
    15ec:	62 e7       	ldi	r22, 0x72	; 114
    15ee:	71 e0       	ldi	r23, 0x01	; 1
    15f0:	88 e6       	ldi	r24, 0x68	; 104
    15f2:	91 e0       	ldi	r25, 0x01	; 1
    15f4:	0e 94 5c 0b 	call	0x16b8	; 0x16b8 <osEE_scheduler_task_activated>
    15f8:	cf bf       	out	0x3f, r28	; 63
    15fa:	02 c0       	rjmp	.+4      	; 0x1600 <ActivateTask+0x4c>
    15fc:	83 e0       	ldi	r24, 0x03	; 3
    15fe:	90 e0       	ldi	r25, 0x00	; 0
    1600:	cf 91       	pop	r28
    1602:	08 95       	ret

00001604 <TerminateTask>:
  CONSTP2VAR(OsEE_CDB, OS_APPL_DATA, AUTOMATIC)
    p_cdb       = osEE_get_curr_core();
  CONSTP2VAR(OsEE_CCB, OS_APPL_DATA, AUTOMATIC)
    p_ccb       = p_cdb->p_ccb;
  CONSTP2VAR(OsEE_TDB, OS_APPL_DATA, AUTOMATIC)
    p_curr      = p_ccb->p_curr;
    1604:	e0 91 72 01 	lds	r30, 0x0172	; 0x800172 <CDB>
    1608:	f0 91 73 01 	lds	r31, 0x0173	; 0x800173 <CDB+0x1>
    160c:	01 90       	ld	r0, Z+
    160e:	f0 81       	ld	r31, Z
    1610:	e0 2d       	mov	r30, r0
}

/* Suspend/Resume Interrupts */
OSEE_STATIC_INLINE OsEE_reg osEE_hal_suspendIRQ ( void )
{
  register OsEE_reg sr = SREG;
    1612:	8f b7       	in	r24, 0x3f	; 63
 =============================================================================*/

/* Disable/Enable Interrupts */
OSEE_STATIC_INLINE void osEE_hal_disableIRQ( void )
{
  cli();
    1614:	f8 94       	cli
(
  P2VAR(OsEE_HDB, AUTOMATIC, OS_APPL_DATA)  p_to_term,
  VAR(OsEE_kernel_cb, AUTOMATIC)            kernel_cb
)
{
  osEE_hal_terminate_ctx(p_to_term->p_scb, kernel_cb);
    1616:	61 e1       	ldi	r22, 0x11	; 17
    1618:	7b e0       	ldi	r23, 0x0B	; 11
    161a:	82 81       	ldd	r24, Z+2	; 0x02
    161c:	93 81       	ldd	r25, Z+3	; 0x03
    161e:	0e 94 5e 01 	call	0x2bc	; 0x2bc <osEE_hal_terminate_ctx>

00001622 <osEE_scheduler_task_end>:
FUNC(void, OS_CODE)
  osEE_scheduler_task_end
(
  void
)
{
    1622:	cf 93       	push	r28
    1624:	df 93       	push	r29
    1626:	00 d0       	rcall	.+0      	; 0x1628 <osEE_scheduler_task_end+0x6>
    1628:	cd b7       	in	r28, 0x3d	; 61
    162a:	de b7       	in	r29, 0x3e	; 62
  P2VAR(OsEE_TDB, AUTOMATIC, OS_APPL_DATA)  p_to;
  P2VAR(OsEE_TDB, AUTOMATIC, OS_APPL_DATA)  p_from;

  p_to = osEE_scheduler_task_terminated(osEE_get_kernel(), osEE_get_curr_core(),
    162c:	ae 01       	movw	r20, r28
    162e:	4f 5f       	subi	r20, 0xFF	; 255
    1630:	5f 4f       	sbci	r21, 0xFF	; 255
    1632:	62 e7       	ldi	r22, 0x72	; 114
    1634:	71 e0       	ldi	r23, 0x01	; 1
    1636:	88 e6       	ldi	r24, 0x68	; 104
    1638:	91 e0       	ldi	r25, 0x01	; 1
    163a:	0e 94 c3 0b 	call	0x1786	; 0x1786 <osEE_scheduler_task_terminated>
(
  P2VAR(OsEE_TDB, AUTOMATIC, OS_APPL_CONST) p_from,
  P2VAR(OsEE_TDB, AUTOMATIC, OS_APPL_CONST) p_to
)
{
  osEE_change_context_from_task_end(p_from, p_to);
    163e:	bc 01       	movw	r22, r24
    1640:	89 81       	ldd	r24, Y+1	; 0x01
    1642:	9a 81       	ldd	r25, Y+2	; 0x02
    1644:	0e 94 5d 0c 	call	0x18ba	; 0x18ba <osEE_change_context_from_task_end>
  if (p_from->task_type != OSEE_TASK_TYPE_ISR2) {
    osEE_change_context_from_task_end(p_from, p_to);
  } else {
    osEE_change_context_from_isr2_end(p_from, p_to);
  }
}
    1648:	0f 90       	pop	r0
    164a:	0f 90       	pop	r0
    164c:	df 91       	pop	r29
    164e:	cf 91       	pop	r28
    1650:	08 95       	ret

00001652 <osEE_scheduler_task_wrapper_restore>:
FUNC(void, OS_CODE)
  osEE_scheduler_task_wrapper_restore
(
  P2VAR(OsEE_TDB, AUTOMATIC, OS_APPL_DATA)  p_tdb_to
)
{
    1652:	08 95       	ret

00001654 <osEE_scheduler_task_wrapper_run>:
FUNC(void, OS_CODE)
  osEE_scheduler_task_wrapper_run
(
  P2VAR(OsEE_TDB, AUTOMATIC, OS_APPL_DATA)  p_tdb_to
)
{
    1654:	ec 01       	movw	r28, r24
  CONST(TaskPrio, AUTOMATIC) task_prio = p_tdb_to->p_tcb->current_prio;
    1656:	ec 81       	ldd	r30, Y+4	; 0x04
    1658:	fd 81       	ldd	r31, Y+5	; 0x05
  osEE_scheduler_task_wrapper_restore(p_tdb_to);

  if (task_prio < OSEE_ISR_ALL_PRIO) {
    165a:	81 81       	ldd	r24, Z+1	; 0x01
    165c:	8f 3f       	cpi	r24, 0xFF	; 255
    165e:	09 f0       	breq	.+2      	; 0x1662 <osEE_scheduler_task_wrapper_run+0xe>
  cli();
}

OSEE_STATIC_INLINE void osEE_hal_enableIRQ( void )
{
  sei();
    1660:	78 94       	sei
    /* Set-up IPL at current TASK level in addition to enable IRQ */
    osEE_hal_set_ipl(task_prio);
    osEE_hal_enableIRQ();
  }
  p_tdb_to->task_func();
    1662:	e9 85       	ldd	r30, Y+9	; 0x09
    1664:	fa 85       	ldd	r31, Y+10	; 0x0a
    1666:	09 95       	icall
}

/* Suspend/Resume Interrupts */
OSEE_STATIC_INLINE OsEE_reg osEE_hal_suspendIRQ ( void )
{
  register OsEE_reg sr = SREG;
    1668:	8f b7       	in	r24, 0x3f	; 63
 =============================================================================*/

/* Disable/Enable Interrupts */
OSEE_STATIC_INLINE void osEE_hal_disableIRQ( void )
{
  cli();
    166a:	f8 94       	cli
    166c:	61 e1       	ldi	r22, 0x11	; 17
    166e:	7b e0       	ldi	r23, 0x0B	; 11
    1670:	8a 81       	ldd	r24, Y+2	; 0x02
    1672:	9b 81       	ldd	r25, Y+3	; 0x03
    1674:	0e 94 5e 01 	call	0x2bc	; 0x2bc <osEE_hal_terminate_ctx>

00001678 <osEE_idle_hook_wrapper>:
FUNC(void, OS_CODE)
  osEE_idle_hook_wrapper
(
  void
)
{
    1678:	0f 93       	push	r16
    167a:	1f 93       	push	r17
    167c:	cf 93       	push	r28
    167e:	df 93       	push	r29
  (void)osEE_scheduler_task_preemption_point(osEE_get_kernel(), p_cdb);
  osEE_end_primitive(flags);
#endif /* !OSEE_STARTOS_RETURN && !OSEE_API_DYNAMIC && !OSEE_HAS_AUTOSTART_TASK */
  while (p_cdb->p_ccb->os_status == OSEE_KERNEL_STARTED) {
#if (defined(OSEE_HAS_IDLEHOOK)) || (defined(OSEE_API_DYNAMIC))
    CONST(TaskFunc, AUTOMATIC) p_idle_hook = p_cdb->p_idle_hook;
    1680:	c0 91 74 01 	lds	r28, 0x0174	; 0x800174 <CDB+0x2>
    1684:	d0 91 75 01 	lds	r29, 0x0175	; 0x800175 <CDB+0x3>
  /* Schedule Here: Autostart TASKs */
  CONST(OsEE_reg, AUTOMATIC) flags = osEE_begin_primitive();
  (void)osEE_scheduler_task_preemption_point(osEE_get_kernel(), p_cdb);
  osEE_end_primitive(flags);
#endif /* !OSEE_STARTOS_RETURN && !OSEE_API_DYNAMIC && !OSEE_HAS_AUTOSTART_TASK */
  while (p_cdb->p_ccb->os_status == OSEE_KERNEL_STARTED) {
    1688:	00 91 72 01 	lds	r16, 0x0172	; 0x800172 <CDB>
    168c:	10 91 73 01 	lds	r17, 0x0173	; 0x800173 <CDB+0x1>
    1690:	f8 01       	movw	r30, r16
    1692:	80 85       	ldd	r24, Z+8	; 0x08
    1694:	91 85       	ldd	r25, Z+9	; 0x09
    1696:	02 97       	sbiw	r24, 0x02	; 2
    1698:	29 f4       	brne	.+10     	; 0x16a4 <osEE_idle_hook_wrapper+0x2c>
#if (defined(OSEE_HAS_IDLEHOOK)) || (defined(OSEE_API_DYNAMIC))
    CONST(TaskFunc, AUTOMATIC) p_idle_hook = p_cdb->p_idle_hook;
    if (p_idle_hook != NULL) {
    169a:	20 97       	sbiw	r28, 0x00	; 0
    169c:	f1 f3       	breq	.-4      	; 0x169a <osEE_idle_hook_wrapper+0x22>
      p_idle_hook();
    169e:	fe 01       	movw	r30, r28
    16a0:	09 95       	icall
    16a2:	f6 cf       	rjmp	.-20     	; 0x1690 <osEE_idle_hook_wrapper+0x18>
    }
#else
    ; /* Empty Endless Loop */
#endif /* OSEE_HAS_IDLEHOOK || OSEE_API_DYNAMIC */
  }
  osEE_idle_task_terminate(p_cdb->p_idle_task);
    16a4:	80 91 76 01 	lds	r24, 0x0176	; 0x800176 <CDB+0x4>
    16a8:	90 91 77 01 	lds	r25, 0x0177	; 0x800177 <CDB+0x5>
}
    16ac:	df 91       	pop	r29
    16ae:	cf 91       	pop	r28
    16b0:	1f 91       	pop	r17
    16b2:	0f 91       	pop	r16
    }
#else
    ; /* Empty Endless Loop */
#endif /* OSEE_HAS_IDLEHOOK || OSEE_API_DYNAMIC */
  }
  osEE_idle_task_terminate(p_cdb->p_idle_task);
    16b4:	0c 94 74 0c 	jmp	0x18e8	; 0x18e8 <osEE_idle_task_terminate>

000016b8 <osEE_scheduler_task_activated>:
    }
  }
#endif /* !OSEE_SINGLECORE */

  return is_preemption;
}
    16b8:	ef 92       	push	r14
    16ba:	ff 92       	push	r15
    16bc:	0f 93       	push	r16
    16be:	1f 93       	push	r17
    16c0:	cf 93       	push	r28
    16c2:	df 93       	push	r29
    16c4:	da 01       	movw	r26, r20
    16c6:	14 96       	adiw	r26, 0x04	; 4
    16c8:	ed 90       	ld	r14, X+
    16ca:	fc 90       	ld	r15, X
    16cc:	15 97       	sbiw	r26, 0x05	; 5
    16ce:	e7 01       	movw	r28, r14
    16d0:	98 81       	ld	r25, Y
    16d2:	1d 96       	adiw	r26, 0x0d	; 13
    16d4:	8c 91       	ld	r24, X
    16d6:	98 17       	cp	r25, r24
    16d8:	08 f0       	brcs	.+2      	; 0x16dc <osEE_scheduler_task_activated+0x24>
    16da:	4c c0       	rjmp	.+152    	; 0x1774 <osEE_scheduler_task_activated+0xbc>
    16dc:	fb 01       	movw	r30, r22
    16de:	01 90       	ld	r0, Z+
    16e0:	f0 81       	ld	r31, Z
    16e2:	e0 2d       	mov	r30, r0
    16e4:	00 81       	ld	r16, Z
    16e6:	11 81       	ldd	r17, Z+1	; 0x01
    16e8:	d8 01       	movw	r26, r16
    16ea:	14 96       	adiw	r26, 0x04	; 4
    16ec:	6d 91       	ld	r22, X+
    16ee:	7c 91       	ld	r23, X
    16f0:	15 97       	sbiw	r26, 0x05	; 5
    16f2:	9f 5f       	subi	r25, 0xFF	; 255
    16f4:	98 83       	st	Y, r25
    16f6:	a4 81       	ldd	r26, Z+4	; 0x04
    16f8:	b5 81       	ldd	r27, Z+5	; 0x05
    16fa:	23 2b       	or	r18, r19
    16fc:	11 f1       	breq	.+68     	; 0x1742 <osEE_scheduler_task_activated+0x8a>
    16fe:	eb 01       	movw	r28, r22
    1700:	99 81       	ldd	r25, Y+1	; 0x01
    1702:	e7 01       	movw	r28, r14
    1704:	89 81       	ldd	r24, Y+1	; 0x01
    1706:	98 17       	cp	r25, r24
    1708:	e0 f4       	brcc	.+56     	; 0x1742 <osEE_scheduler_task_activated+0x8a>
    170a:	8d 91       	ld	r24, X+
    170c:	9c 91       	ld	r25, X
    170e:	11 97       	sbiw	r26, 0x01	; 1
    1710:	95 83       	std	Z+5, r25	; 0x05
    1712:	84 83       	std	Z+4, r24	; 0x04
    1714:	82 e0       	ldi	r24, 0x02	; 2
    1716:	90 e0       	ldi	r25, 0x00	; 0
    1718:	eb 01       	movw	r28, r22
    171a:	9b 83       	std	Y+3, r25	; 0x03
    171c:	8a 83       	std	Y+2, r24	; 0x02
    171e:	13 96       	adiw	r26, 0x03	; 3
    1720:	5c 93       	st	X, r21
    1722:	4e 93       	st	-X, r20
    1724:	12 97       	sbiw	r26, 0x02	; 2
    1726:	86 81       	ldd	r24, Z+6	; 0x06
    1728:	97 81       	ldd	r25, Z+7	; 0x07
    172a:	11 96       	adiw	r26, 0x01	; 1
    172c:	9c 93       	st	X, r25
    172e:	8e 93       	st	-X, r24
    1730:	b7 83       	std	Z+7, r27	; 0x07
    1732:	a6 83       	std	Z+6, r26	; 0x06
    1734:	51 83       	std	Z+1, r21	; 0x01
    1736:	40 83       	st	Z, r20
    1738:	ba 01       	movw	r22, r20
    173a:	c8 01       	movw	r24, r16
    173c:	0e 94 41 0c 	call	0x1882	; 0x1882 <osEE_change_context_from_running>
    1740:	16 c0       	rjmp	.+44     	; 0x176e <osEE_scheduler_task_activated+0xb6>
    1742:	e7 01       	movw	r28, r14
    1744:	8a 81       	ldd	r24, Y+2	; 0x02
    1746:	9b 81       	ldd	r25, Y+3	; 0x03
    1748:	89 2b       	or	r24, r25
    174a:	21 f4       	brne	.+8      	; 0x1754 <osEE_scheduler_task_activated+0x9c>
    174c:	81 e0       	ldi	r24, 0x01	; 1
    174e:	90 e0       	ldi	r25, 0x00	; 0
    1750:	9b 83       	std	Y+3, r25	; 0x03
    1752:	8a 83       	std	Y+2, r24	; 0x02
    1754:	8d 91       	ld	r24, X+
    1756:	9c 91       	ld	r25, X
    1758:	11 97       	sbiw	r26, 0x01	; 1
    175a:	95 83       	std	Z+5, r25	; 0x05
    175c:	84 83       	std	Z+4, r24	; 0x04
    175e:	11 96       	adiw	r26, 0x01	; 1
    1760:	1c 92       	st	X, r1
    1762:	1e 92       	st	-X, r1
    1764:	bd 01       	movw	r22, r26
    1766:	cf 01       	movw	r24, r30
    1768:	02 96       	adiw	r24, 0x02	; 2
    176a:	0e 94 3b 0d 	call	0x1a76	; 0x1a76 <osEE_scheduler_rq_insert>
    176e:	80 e0       	ldi	r24, 0x00	; 0
    1770:	90 e0       	ldi	r25, 0x00	; 0
    1772:	02 c0       	rjmp	.+4      	; 0x1778 <osEE_scheduler_task_activated+0xc0>
    1774:	84 e0       	ldi	r24, 0x04	; 4
    1776:	90 e0       	ldi	r25, 0x00	; 0
    1778:	df 91       	pop	r29
    177a:	cf 91       	pop	r28
    177c:	1f 91       	pop	r17
    177e:	0f 91       	pop	r16
    1780:	ff 90       	pop	r15
    1782:	ef 90       	pop	r14
    1784:	08 95       	ret

00001786 <osEE_scheduler_task_terminated>:
(
  P2VAR(OsEE_KDB, AUTOMATIC, OS_APPL_DATA)    p_kdb,
  P2VAR(OsEE_CDB, AUTOMATIC, OS_APPL_DATA)    p_cdb,
  P2VAR(OsEE_TDB *, AUTOMATIC, OS_APPL_DATA)  pp_tdb_from
)
{
    1786:	af 92       	push	r10
    1788:	bf 92       	push	r11
    178a:	cf 92       	push	r12
    178c:	df 92       	push	r13
    178e:	ef 92       	push	r14
    1790:	ff 92       	push	r15
    1792:	0f 93       	push	r16
    1794:	1f 93       	push	r17
    1796:	cf 93       	push	r28
    1798:	df 93       	push	r29
    179a:	5b 01       	movw	r10, r22
  CONSTP2VAR(OsEE_CCB, AUTOMATIC, OS_APPL_DATA) p_ccb = p_cdb->p_ccb;
    179c:	db 01       	movw	r26, r22
    179e:	cd 91       	ld	r28, X+
    17a0:	dc 91       	ld	r29, X
  /* Touch unused parameters */
  (void)p_kdb;
  osEE_lock_core(p_cdb);
  {
    CONSTP2VAR(OsEE_TDB, AUTOMATIC, OS_APPL_DATA)
      p_tdb_term  = p_ccb->p_curr;
    17a2:	fe 01       	movw	r30, r28
    17a4:	01 91       	ld	r16, Z+
    17a6:	11 91       	ld	r17, Z+
    17a8:	7f 01       	movw	r14, r30
    CONSTP2VAR(OsEE_TCB, AUTOMATIC, OS_APPL_DATA)
      p_tcb_term  = p_tdb_term->p_tcb;
    17aa:	d8 01       	movw	r26, r16
    17ac:	14 96       	adiw	r26, 0x04	; 4
    17ae:	cd 90       	ld	r12, X+
    17b0:	dc 90       	ld	r13, X
    17b2:	15 97       	sbiw	r26, 0x05	; 5

    /* Prepare the TDB from return value */
    (*pp_tdb_from) = p_tdb_term;
    17b4:	fa 01       	movw	r30, r20
    17b6:	11 83       	std	Z+1, r17	; 0x01
    17b8:	00 83       	st	Z, r16

    if (p_tcb_term->status == OSEE_TASK_RUNNING) {
    17ba:	d6 01       	movw	r26, r12
    17bc:	12 96       	adiw	r26, 0x02	; 2
    17be:	8d 91       	ld	r24, X+
    17c0:	9c 91       	ld	r25, X
    17c2:	13 97       	sbiw	r26, 0x03	; 3
    17c4:	04 97       	sbiw	r24, 0x04	; 4
    17c6:	59 f5       	brne	.+86     	; 0x181e <osEE_scheduler_task_terminated+0x98>
      /* Normal Termination */
      CONSTP2VAR(OsEE_SN, AUTOMATIC, OS_APPL_DATA)
        p_sn_term = osEE_scheduler_core_pop_running(p_cdb, &p_ccb->rq);
    17c8:	b7 01       	movw	r22, r14
    17ca:	c5 01       	movw	r24, r10
    17cc:	0e 94 42 0d 	call	0x1a84	; 0x1a84 <osEE_scheduler_core_pop_running>
    17d0:	ac 01       	movw	r20, r24

      p_tdb_to = p_ccb->p_curr;
    17d2:	88 81       	ld	r24, Y
    17d4:	99 81       	ldd	r25, Y+1	; 0x01

      /* Handle if there was another activation of the same TASK already
       * as Head of RQ */
      if (p_tdb_term != p_tdb_to) {
    17d6:	08 17       	cp	r16, r24
    17d8:	19 07       	cpc	r17, r25
    17da:	a9 f0       	breq	.+42     	; 0x1806 <osEE_scheduler_task_terminated+0x80>
  osEE_task_end
(
  CONSTP2VAR(OsEE_TDB, AUTOMATIC, OS_APPL_DATA) p_tdb
)
{
  CONSTP2VAR(OsEE_TCB, AUTOMATIC, OS_APPL_DATA) p_tcb = p_tdb->p_tcb;
    17dc:	d8 01       	movw	r26, r16
    17de:	14 96       	adiw	r26, 0x04	; 4
    17e0:	ed 91       	ld	r30, X+
    17e2:	fc 91       	ld	r31, X
    17e4:	15 97       	sbiw	r26, 0x05	; 5

  p_tcb->current_prio = p_tdb->ready_prio;
    17e6:	1b 96       	adiw	r26, 0x0b	; 11
    17e8:	2c 91       	ld	r18, X
    17ea:	21 83       	std	Z+1, r18	; 0x01

  --p_tcb->current_num_of_act;
    17ec:	20 81       	ld	r18, Z
    17ee:	21 50       	subi	r18, 0x01	; 1
    17f0:	20 83       	st	Z, r18

  if (p_tcb->current_num_of_act == 0U) {
    17f2:	21 11       	cpse	r18, r1
    17f4:	03 c0       	rjmp	.+6      	; 0x17fc <osEE_scheduler_task_terminated+0x76>
    p_tcb->status = OSEE_TASK_SUSPENDED;
    17f6:	13 82       	std	Z+3, r1	; 0x03
    17f8:	12 82       	std	Z+2, r1	; 0x02
    17fa:	09 c0       	rjmp	.+18     	; 0x180e <osEE_scheduler_task_terminated+0x88>
  } else {
    p_tcb->status = OSEE_TASK_READY;
    17fc:	21 e0       	ldi	r18, 0x01	; 1
    17fe:	30 e0       	ldi	r19, 0x00	; 0
    1800:	33 83       	std	Z+3, r19	; 0x03
    1802:	22 83       	std	Z+2, r18	; 0x02
    1804:	04 c0       	rjmp	.+8      	; 0x180e <osEE_scheduler_task_terminated+0x88>
#if (defined(OSEE_HAS_PRETASKHOOK))
        /* If TDB_TERM is equal to TDB_TO, the following assure that
         * PreTaskHook will be called */
        p_ccb->p_last_tdb_hook = NULL;
#endif /* OSEE_HAS_PRETASKHOOK */
        --p_tcb_term->current_num_of_act;
    1806:	f6 01       	movw	r30, r12
    1808:	20 81       	ld	r18, Z
    180a:	21 50       	subi	r18, 0x01	; 1
    180c:	20 83       	st	Z, r18
(
  P2VAR(OsEE_SN *, AUTOMATIC, OS_APPL_DATA) pp_first,
  P2VAR(OsEE_SN  , AUTOMATIC, OS_APPL_DATA) p_to_free
)
{
  p_to_free->p_next = (*pp_first);
    180e:	2c 81       	ldd	r18, Y+4	; 0x04
    1810:	3d 81       	ldd	r19, Y+5	; 0x05
    1812:	da 01       	movw	r26, r20
    1814:	2d 93       	st	X+, r18
    1816:	3c 93       	st	X, r19
  (*pp_first)       = p_to_free;
    1818:	5d 83       	std	Y+5, r21	; 0x05
    181a:	4c 83       	std	Y+4, r20	; 0x04
    181c:	23 c0       	rjmp	.+70     	; 0x1864 <osEE_scheduler_task_terminated+0xde>
      /* In Normal Termination => SN released */
      osEE_sn_release(&p_ccb->p_free_sn, p_sn_term);
    } else {
      /* Handle ChainTask */
      CONSTP2VAR(OsEE_SN, AUTOMATIC, OS_APPL_DATA)
        p_sn_term = p_ccb->p_stk_sn;
    181e:	6e 81       	ldd	r22, Y+6	; 0x06
    1820:	7f 81       	ldd	r23, Y+7	; 0x07

      /* Pop the current STK SN, if not IDLE TASK. This function MUST not be
       * called inside IDLE TASK. */
      p_ccb->p_stk_sn = p_sn_term->p_next;
    1822:	fb 01       	movw	r30, r22
    1824:	80 81       	ld	r24, Z
    1826:	91 81       	ldd	r25, Z+1	; 0x01
    1828:	9f 83       	std	Y+7, r25	; 0x07
    182a:	8e 83       	std	Y+6, r24	; 0x06
      /* Wait to see p_ccb->p_curr until you are completely sure to what set */

      /* I need to release internal resource for Chained TASK
       * (set ready prio instead of dispatch prio) to let RQ Tasks 'preempt'
       * the Chained. */
      p_tcb_term->current_prio = p_tdb_term->ready_prio;
    182c:	d8 01       	movw	r26, r16
    182e:	1b 96       	adiw	r26, 0x0b	; 11
    1830:	8c 91       	ld	r24, X
    1832:	f6 01       	movw	r30, r12
    1834:	81 83       	std	Z+1, r24	; 0x01
      p_tcb_term->status = OSEE_TASK_READY;
    1836:	81 e0       	ldi	r24, 0x01	; 1
    1838:	90 e0       	ldi	r25, 0x00	; 0
    183a:	93 83       	std	Z+3, r25	; 0x03
    183c:	82 83       	std	Z+2, r24	; 0x02
      if (p_tcb_term->current_num_of_act == 1U) {
        osEE_event_reset_mask(p_tcb_term);
      }
#endif /* OSEE_HAS_EVENTS */

      (void)osEE_scheduler_rq_insert(&p_ccb->rq, p_sn_term, p_tdb_term);
    183e:	a8 01       	movw	r20, r16
    1840:	c7 01       	movw	r24, r14
    1842:	0e 94 3b 0d 	call	0x1a76	; 0x1a76 <osEE_scheduler_rq_insert>

      {
        CONSTP2VAR(OsEE_preempt, AUTOMATIC, OS_APPL_DATA)
          p_prev = osEE_scheduler_core_rq_preempt_stk(p_cdb, &p_ccb->rq);
    1846:	b7 01       	movw	r22, r14
    1848:	c5 01       	movw	r24, r10
    184a:	0e 94 8f 0c 	call	0x191e	; 0x191e <osEE_scheduler_core_rq_preempt_stk>

        if (p_prev == NULL) {
    184e:	89 2b       	or	r24, r25
    1850:	39 f4       	brne	.+14     	; 0x1860 <osEE_scheduler_task_terminated+0xda>
          /* Restore Stacked.
           * Not Needed to Check Idle TASK since just reinserted the chained
           * in RQ */
          p_tdb_to                = p_ccb->p_stk_sn->p_tdb;
    1852:	ee 81       	ldd	r30, Y+6	; 0x06
    1854:	ff 81       	ldd	r31, Y+7	; 0x07
    1856:	82 81       	ldd	r24, Z+2	; 0x02
    1858:	93 81       	ldd	r25, Z+3	; 0x03
          p_ccb->p_curr           = p_tdb_to;
    185a:	99 83       	std	Y+1, r25	; 0x01
    185c:	88 83       	st	Y, r24
    185e:	02 c0       	rjmp	.+4      	; 0x1864 <osEE_scheduler_task_terminated+0xde>
        } else {
          p_tdb_to = p_ccb->p_curr;
    1860:	88 81       	ld	r24, Y
    1862:	99 81       	ldd	r25, Y+1	; 0x01
    }
  }
  osEE_unlock_core(p_cdb);

  return p_tdb_to;
}
    1864:	df 91       	pop	r29
    1866:	cf 91       	pop	r28
    1868:	1f 91       	pop	r17
    186a:	0f 91       	pop	r16
    186c:	ff 90       	pop	r15
    186e:	ef 90       	pop	r14
    1870:	df 90       	pop	r13
    1872:	cf 90       	pop	r12
    1874:	bf 90       	pop	r11
    1876:	af 90       	pop	r10
    1878:	08 95       	ret

0000187a <__vector_default>:
#include "ee_avr8_irqstub.h"

/* Erika Interrupt Vector Definition */

/* DUMMY interrupt vector */
OSEE_AVR8_ISR_NOT_DEFINED(BADISR_vect)
    187a:	f8 94       	cli
    187c:	ff cf       	rjmp	.-2      	; 0x187c <__vector_default+0x2>

0000187e <osEE_atmega_intvect>:

/* Interrupt Vector Table Recall. */
void osEE_atmega_intvect(void) {
  OSEE_AVR8_REQUEST_IRQ_ENTRY(BADISR_vect);
    187e:	ea e7       	ldi	r30, 0x7A	; 122
    1880:	08 95       	ret

00001882 <osEE_change_context_from_running>:
  osEE_change_context_from_running
(
  P2VAR(OsEE_TDB, AUTOMATIC, OS_APPL_CONST) p_from,
  P2VAR(OsEE_TDB, AUTOMATIC, OS_APPL_CONST) p_to
)
{
    1882:	fb 01       	movw	r30, r22
  CONSTP2VAR(OsEE_TCB, AUTOMATIC, OS_APPL_DATA) p_to_tcb  = p_to->p_tcb;
    1884:	a4 81       	ldd	r26, Z+4	; 0x04
    1886:	b5 81       	ldd	r27, Z+5	; 0x05
  CONST(TaskStateType, AUTOMATIC)     status_prev_running = p_to_tcb->status;
    1888:	12 96       	adiw	r26, 0x02	; 2
    188a:	2d 91       	ld	r18, X+
    188c:	3c 91       	ld	r19, X
    188e:	13 97       	sbiw	r26, 0x03	; 3

  p_to_tcb->status = OSEE_TASK_RUNNING;
    1890:	44 e0       	ldi	r20, 0x04	; 4
    1892:	50 e0       	ldi	r21, 0x00	; 0
    1894:	13 96       	adiw	r26, 0x03	; 3
    1896:	5c 93       	st	X, r21
    1898:	4e 93       	st	-X, r20
    189a:	12 97       	sbiw	r26, 0x02	; 2
    189c:	dc 01       	movw	r26, r24
    189e:	12 96       	adiw	r26, 0x02	; 2
    18a0:	4d 91       	ld	r20, X+
    18a2:	5c 91       	ld	r21, X
    18a4:	13 97       	sbiw	r26, 0x03	; 3
    18a6:	62 81       	ldd	r22, Z+2	; 0x02
    18a8:	73 81       	ldd	r23, Z+3	; 0x03

  if (status_prev_running == OSEE_TASK_READY_STACKED) {
    osEE_hal_save_ctx_and_restore_ctx(p_to, p_to->hdb.p_scb,
    18aa:	cf 01       	movw	r24, r30
  CONSTP2VAR(OsEE_TCB, AUTOMATIC, OS_APPL_DATA) p_to_tcb  = p_to->p_tcb;
  CONST(TaskStateType, AUTOMATIC)     status_prev_running = p_to_tcb->status;

  p_to_tcb->status = OSEE_TASK_RUNNING;

  if (status_prev_running == OSEE_TASK_READY_STACKED) {
    18ac:	22 30       	cpi	r18, 0x02	; 2
    18ae:	31 05       	cpc	r19, r1
    18b0:	11 f4       	brne	.+4      	; 0x18b6 <osEE_change_context_from_running+0x34>
    osEE_hal_save_ctx_and_restore_ctx(p_to, p_to->hdb.p_scb,
    18b2:	0c 94 f6 00 	jmp	0x1ec	; 0x1ec <osEE_hal_save_ctx_and_restore_ctx>
      p_from->hdb.p_scb);
  } else {
    osEE_hal_save_ctx_and_ready2stacked(p_to, p_to->hdb.p_scb,
    18b6:	0c 94 3e 01 	jmp	0x27c	; 0x27c <osEE_hal_save_ctx_and_ready2stacked>

000018ba <osEE_change_context_from_task_end>:
  osEE_change_context_from_task_end
(
  P2VAR(OsEE_TDB, AUTOMATIC, OS_APPL_CONST) p_from,
  P2VAR(OsEE_TDB, AUTOMATIC, OS_APPL_CONST) p_to
)
{
    18ba:	cb 01       	movw	r24, r22
  CONSTP2VAR(OsEE_TCB, AUTOMATIC, OS_APPL_DATA) p_to_tcb  = p_to->p_tcb;
    18bc:	db 01       	movw	r26, r22
    18be:	14 96       	adiw	r26, 0x04	; 4
    18c0:	ed 91       	ld	r30, X+
    18c2:	fc 91       	ld	r31, X
    18c4:	15 97       	sbiw	r26, 0x05	; 5
  CONST(TaskStateType, AUTOMATIC)     status_prev_running = p_to_tcb->status;
    18c6:	22 81       	ldd	r18, Z+2	; 0x02
    18c8:	33 81       	ldd	r19, Z+3	; 0x03

  p_to_tcb->status = OSEE_TASK_RUNNING;
    18ca:	44 e0       	ldi	r20, 0x04	; 4
    18cc:	50 e0       	ldi	r21, 0x00	; 0
    18ce:	53 83       	std	Z+3, r21	; 0x03
    18d0:	42 83       	std	Z+2, r20	; 0x02
    18d2:	12 96       	adiw	r26, 0x02	; 2
    18d4:	6d 91       	ld	r22, X+
    18d6:	7c 91       	ld	r23, X
    18d8:	13 97       	sbiw	r26, 0x03	; 3

  if (status_prev_running == OSEE_TASK_READY_STACKED) {
    18da:	22 30       	cpi	r18, 0x02	; 2
    18dc:	31 05       	cpc	r19, r1
    18de:	11 f4       	brne	.+4      	; 0x18e4 <osEE_change_context_from_task_end+0x2a>
    osEE_hal_restore_ctx(p_to, p_to->hdb.p_scb);
    18e0:	0c 94 16 01 	jmp	0x22c	; 0x22c <osEE_hal_restore_ctx>
  } else {
    osEE_hal_ready2stacked(p_to, p_to->hdb.p_scb);
    18e4:	0c 94 36 01 	jmp	0x26c	; 0x26c <osEE_hal_ready2stacked>

000018e8 <osEE_idle_task_terminate>:
{
  P2VAR(OsEE_CTX, AUTOMATIC, OS_APPL_DATA)      p_ctx;

  CONSTP2VAR(OsEE_HDB, AUTOMATIC, OS_APPL_DATA) p_idle_hdb  = &p_idle_tdb->hdb;
  CONSTP2VAR(OsEE_SDB, AUTOMATIC, OS_APPL_DATA) p_sdb       = p_idle_hdb->p_sdb;
  CONSTP2VAR(OsEE_SCB, AUTOMATIC, OS_APPL_DATA) p_scb       = p_idle_hdb->p_scb;
    18e8:	dc 01       	movw	r26, r24
    18ea:	12 96       	adiw	r26, 0x02	; 2
    18ec:	6d 91       	ld	r22, X+
    18ee:	7c 91       	ld	r23, X
    18f0:	13 97       	sbiw	r26, 0x03	; 3
  CONSTP2VAR(OsEE_CTX, AUTOMATIC, OS_APPL_DATA) p_bos       = p_sdb->p_bos;
    18f2:	ed 91       	ld	r30, X+
    18f4:	fc 91       	ld	r31, X
    18f6:	40 81       	ld	r20, Z
    18f8:	51 81       	ldd	r21, Z+1	; 0x01
  P2VAR(OsEE_CTX, AUTOMATIC, OS_APPL_DATA)      p_tos       = p_scb->p_tos;
    18fa:	db 01       	movw	r26, r22
    18fc:	ed 91       	ld	r30, X+
    18fe:	fc 91       	ld	r31, X

  do {
    p_ctx = p_tos;
    p_tos = p_tos->p_ctx;
    1900:	22 89       	ldd	r18, Z+18	; 0x12
    1902:	33 89       	ldd	r19, Z+19	; 0x13
  } while ((p_tos != NULL) && (p_tos != p_bos));
    1904:	21 15       	cp	r18, r1
    1906:	31 05       	cpc	r19, r1
    1908:	29 f4       	brne	.+10     	; 0x1914 <osEE_idle_task_terminate+0x2c>

  /* Unwind the stack until the last context*/
  p_scb->p_tos = p_ctx;
    190a:	db 01       	movw	r26, r22
    190c:	ed 93       	st	X+, r30
    190e:	fc 93       	st	X, r31

  osEE_hal_restore_ctx(p_idle_tdb, p_scb);
    1910:	0c 94 16 01 	jmp	0x22c	; 0x22c <osEE_hal_restore_ctx>
  P2VAR(OsEE_CTX, AUTOMATIC, OS_APPL_DATA)      p_tos       = p_scb->p_tos;

  do {
    p_ctx = p_tos;
    p_tos = p_tos->p_ctx;
  } while ((p_tos != NULL) && (p_tos != p_bos));
    1914:	24 17       	cp	r18, r20
    1916:	35 07       	cpc	r19, r21
    1918:	c1 f3       	breq	.-16     	; 0x190a <osEE_idle_task_terminate+0x22>
    191a:	f9 01       	movw	r30, r18
    191c:	f1 cf       	rjmp	.-30     	; 0x1900 <osEE_idle_task_terminate+0x18>

0000191e <osEE_scheduler_core_rq_preempt_stk>:
  osEE_scheduler_core_rq_preempt_stk
(
  P2VAR(OsEE_CDB, AUTOMATIC, OS_APPL_DATA)  p_cdb,
  P2VAR(OsEE_RQ,  AUTOMATIC, OS_APPL_DATA)  p_rq
)
{
    191e:	0f 93       	push	r16
    1920:	1f 93       	push	r17
    1922:	cf 93       	push	r28
    1924:	df 93       	push	r29
  CONSTP2VAR(OsEE_CCB, AUTOMATIC, OS_APPL_DATA) p_ccb = p_cdb->p_ccb;
    1926:	ec 01       	movw	r28, r24
    1928:	a8 81       	ld	r26, Y
    192a:	b9 81       	ldd	r27, Y+1	; 0x01
  CONSTP2VAR(OsEE_SN, AUTOMATIC, OS_APPL_DATA)  p_rq_sn  = (*p_rq);
    192c:	eb 01       	movw	r28, r22
    192e:	e8 81       	ld	r30, Y
    1930:	f9 81       	ldd	r31, Y+1	; 0x01
  P2VAR(OsEE_SN, AUTOMATIC, OS_APPL_DATA)       p_ret_sn = p_ccb->p_stk_sn;
    1932:	16 96       	adiw	r26, 0x06	; 6
    1934:	cd 91       	ld	r28, X+
    1936:	dc 91       	ld	r29, X
    1938:	17 97       	sbiw	r26, 0x07	; 7

  VAR(OsEE_bool, AUTOMATIC)                     is_rq_preemption = OSEE_FALSE;
  P2VAR(OsEE_TDB, AUTOMATIC, OS_APPL_DATA)      p_ret_tdb;

  if (p_ret_sn != NULL) {
    193a:	20 97       	sbiw	r28, 0x00	; 0
    193c:	b1 f0       	breq	.+44     	; 0x196a <osEE_scheduler_core_rq_preempt_stk+0x4c>
    p_ret_tdb = p_ret_sn->p_tdb;
    193e:	8a 81       	ldd	r24, Y+2	; 0x02
    1940:	9b 81       	ldd	r25, Y+3	; 0x03
    if (p_rq_sn != NULL) {
    1942:	30 97       	sbiw	r30, 0x00	; 0
    1944:	e1 f1       	breq	.+120    	; 0x19be <osEE_scheduler_core_rq_preempt_stk+0xa0>
      CONSTP2VAR(OsEE_TCB, AUTOMATIC, OS_APPL_DATA)
        p_ret_tcb = p_ret_tdb->p_tcb;
    1946:	ec 01       	movw	r28, r24
    1948:	0c 81       	ldd	r16, Y+4	; 0x04
    194a:	1d 81       	ldd	r17, Y+5	; 0x05
      if (p_ret_tcb->current_prio <
        p_rq_sn->p_tdb->p_tcb->current_prio)
    194c:	22 81       	ldd	r18, Z+2	; 0x02
    194e:	33 81       	ldd	r19, Z+3	; 0x03
    1950:	e9 01       	movw	r28, r18
    1952:	4c 81       	ldd	r20, Y+4	; 0x04
    1954:	5d 81       	ldd	r21, Y+5	; 0x05
  if (p_ret_sn != NULL) {
    p_ret_tdb = p_ret_sn->p_tdb;
    if (p_rq_sn != NULL) {
      CONSTP2VAR(OsEE_TCB, AUTOMATIC, OS_APPL_DATA)
        p_ret_tcb = p_ret_tdb->p_tcb;
      if (p_ret_tcb->current_prio <
    1956:	e8 01       	movw	r28, r16
    1958:	39 81       	ldd	r19, Y+1	; 0x01
    195a:	ea 01       	movw	r28, r20
    195c:	29 81       	ldd	r18, Y+1	; 0x01
    195e:	32 17       	cp	r19, r18
    1960:	70 f5       	brcc	.+92     	; 0x19be <osEE_scheduler_core_rq_preempt_stk+0xa0>
      {
        /* RQ preempt STK */
        /* Call PostTaskHook before switching active TASK */
        osEE_call_post_task_hook(p_ccb);

        p_ret_tcb->status = OSEE_TASK_READY_STACKED;
    1962:	22 e0       	ldi	r18, 0x02	; 2
    1964:	30 e0       	ldi	r19, 0x00	; 0
    1966:	e8 01       	movw	r28, r16
    1968:	0b c0       	rjmp	.+22     	; 0x1980 <osEE_scheduler_core_rq_preempt_stk+0x62>
        is_rq_preemption  = OSEE_TRUE;
      }
    }
  } else if (p_rq_sn != NULL) {
    196a:	30 97       	sbiw	r30, 0x00	; 0
    196c:	41 f1       	breq	.+80     	; 0x19be <osEE_scheduler_core_rq_preempt_stk+0xa0>
    /* Don't use p_ccb->p_curr, is not reliable here,
     * It points to the terminated TASK, we are still evaluating
     * the next one. */
    /* Call PostTaskHook before switching active TASK */
    osEE_call_post_task_hook(p_ccb);
    p_ret_tdb                 = p_cdb->p_idle_task;
    196e:	ec 01       	movw	r28, r24
    1970:	8c 81       	ldd	r24, Y+4	; 0x04
    1972:	9d 81       	ldd	r25, Y+5	; 0x05
    p_ret_tdb->p_tcb->status  = OSEE_TASK_READY_STACKED;
    1974:	ec 01       	movw	r28, r24
    1976:	4c 81       	ldd	r20, Y+4	; 0x04
    1978:	5d 81       	ldd	r21, Y+5	; 0x05
    197a:	22 e0       	ldi	r18, 0x02	; 2
    197c:	30 e0       	ldi	r19, 0x00	; 0
    197e:	ea 01       	movw	r28, r20
    1980:	3b 83       	std	Y+3, r19	; 0x03
    1982:	2a 83       	std	Y+2, r18	; 0x02
    is_rq_preemption          = OSEE_TRUE;
  }

  if (is_rq_preemption) {
    /* Extract from ready queue */
    (*p_rq)       = p_rq_sn->p_next;
    1984:	20 81       	ld	r18, Z
    1986:	31 81       	ldd	r19, Z+1	; 0x01
    1988:	eb 01       	movw	r28, r22
    198a:	39 83       	std	Y+1, r19	; 0x01
    198c:	28 83       	st	Y, r18
(
  P2VAR(OsEE_CCB, AUTOMATIC, OS_APPL_DATA) p_ccb,
  P2VAR(OsEE_SN, AUTOMATIC, OS_APPL_DATA)  p_rq_sn
)
{
  CONSTP2VAR(OsEE_TDB, AUTOMATIC, OS_APPL_DATA) p_tdb = p_rq_sn->p_tdb;
    198e:	c2 81       	ldd	r28, Z+2	; 0x02
    1990:	d3 81       	ldd	r29, Z+3	; 0x03
  CONSTP2VAR(OsEE_TCB, AUTOMATIC, OS_APPL_DATA) p_tcb = p_tdb->p_tcb;
    1992:	4c 81       	ldd	r20, Y+4	; 0x04
    1994:	5d 81       	ldd	r21, Y+5	; 0x05
  /* N.B. The Handling of the preempted SN as Stacked or re-inserted in RQ
   * is done by the calling function */
  p_rq_sn->p_next               = NULL;
  p_tcb->current_core_id        = osEE_get_curr_core_id();
#else
  p_rq_sn->p_next               = p_ccb->p_stk_sn;
    1996:	16 96       	adiw	r26, 0x06	; 6
    1998:	2d 91       	ld	r18, X+
    199a:	3c 91       	ld	r19, X
    199c:	17 97       	sbiw	r26, 0x07	; 7
    199e:	31 83       	std	Z+1, r19	; 0x01
    19a0:	20 83       	st	Z, r18
#endif /* OSEE_ALLOW_TASK_MIGRATION */
  p_ccb->p_stk_sn               = p_rq_sn;
    19a2:	17 96       	adiw	r26, 0x07	; 7
    19a4:	fc 93       	st	X, r31
    19a6:	ee 93       	st	-X, r30
    19a8:	16 97       	sbiw	r26, 0x06	; 6
  p_ccb->p_curr                 = p_tdb;
    19aa:	cd 93       	st	X+, r28
    19ac:	dc 93       	st	X, r29

  /* Adjust actual priority with dispatch priority: if needed */
  {
    CONST(TaskPrio, AUTOMATIC)
      dispatch_prio = p_tdb->dispatch_prio;
    19ae:	2c 85       	ldd	r18, Y+12	; 0x0c
    if (p_tcb->current_prio < dispatch_prio) {
    19b0:	fa 01       	movw	r30, r20
    19b2:	31 81       	ldd	r19, Z+1	; 0x01
    19b4:	32 17       	cp	r19, r18
    19b6:	28 f4       	brcc	.+10     	; 0x19c2 <osEE_scheduler_core_rq_preempt_stk+0xa4>
      p_tcb->current_prio = dispatch_prio;
    19b8:	fa 01       	movw	r30, r20
    19ba:	21 83       	std	Z+1, r18	; 0x01
    19bc:	02 c0       	rjmp	.+4      	; 0x19c2 <osEE_scheduler_core_rq_preempt_stk+0xa4>
    (*p_rq)       = p_rq_sn->p_next;

    /* Set as current on top of STK */
    osEE_scheduler_stk_next(p_ccb, p_rq_sn);
  } else {
    p_ret_tdb = NULL;
    19be:	80 e0       	ldi	r24, 0x00	; 0
    19c0:	90 e0       	ldi	r25, 0x00	; 0
#if (defined(OSEE_ALLOW_TASK_MIGRATION))
  return p_ret_sn;
#else
  return p_ret_tdb;
#endif /* OSEE_ALLOW_TASK_MIGRATION */
}
    19c2:	df 91       	pop	r29
    19c4:	cf 91       	pop	r28
    19c6:	1f 91       	pop	r17
    19c8:	0f 91       	pop	r16
    19ca:	08 95       	ret

000019cc <osEE_sn_priority_insert>:
(
  P2VAR(OsEE_SN *, AUTOMATIC, OS_APPL_DATA)     pp_first,
  P2VAR(OsEE_SN  , AUTOMATIC, OS_APPL_DATA)     p_sn_new,
  CONST(OsEE_bool, AUTOMATIC)                   hnd_act
)
{
    19cc:	cf 92       	push	r12
    19ce:	df 92       	push	r13
    19d0:	ef 92       	push	r14
    19d2:	ff 92       	push	r15
    19d4:	0f 93       	push	r16
    19d6:	1f 93       	push	r17
    19d8:	cf 93       	push	r28
    19da:	df 93       	push	r29
  CONSTP2VAR(OsEE_TDB, AUTOMATIC, OS_APPL_DATA) p_tdb_new = p_sn_new->p_tdb;
    19dc:	eb 01       	movw	r28, r22
    19de:	aa 81       	ldd	r26, Y+2	; 0x02
    19e0:	bb 81       	ldd	r27, Y+3	; 0x03
  CONSTP2VAR(OsEE_TCB, AUTOMATIC, OS_APPL_DATA) p_tcb_new = p_tdb_new->p_tcb;
    19e2:	14 96       	adiw	r26, 0x04	; 4
    19e4:	ed 91       	ld	r30, X+
    19e6:	fc 91       	ld	r31, X
    19e8:	15 97       	sbiw	r26, 0x05	; 5
  CONST(TaskPrio, AUTOMATIC)                new_task_prio =
    19ea:	41 15       	cp	r20, r1
    19ec:	51 05       	cpc	r21, r1
    19ee:	41 f0       	breq	.+16     	; 0x1a00 <osEE_sn_priority_insert+0x34>
    ((hnd_act) && osEE_is_active_task(p_tcb_new))?
    19f0:	22 81       	ldd	r18, Z+2	; 0x02
    19f2:	33 81       	ldd	r19, Z+3	; 0x03
    19f4:	22 30       	cpi	r18, 0x02	; 2
    19f6:	31 05       	cpc	r19, r1
    19f8:	18 f0       	brcs	.+6      	; 0x1a00 <osEE_sn_priority_insert+0x34>
  CONST(OsEE_bool, AUTOMATIC)                   hnd_act
)
{
  CONSTP2VAR(OsEE_TDB, AUTOMATIC, OS_APPL_DATA) p_tdb_new = p_sn_new->p_tdb;
  CONSTP2VAR(OsEE_TCB, AUTOMATIC, OS_APPL_DATA) p_tcb_new = p_tdb_new->p_tcb;
  CONST(TaskPrio, AUTOMATIC)                new_task_prio =
    19fa:	1b 96       	adiw	r26, 0x0b	; 11
    19fc:	2c 91       	ld	r18, X
    19fe:	01 c0       	rjmp	.+2      	; 0x1a02 <osEE_sn_priority_insert+0x36>
    1a00:	21 81       	ldd	r18, Z+1	; 0x01
    ((hnd_act) && osEE_is_active_task(p_tcb_new))?
      p_tdb_new->ready_prio:
      p_tcb_new->current_prio;
  P2VAR(OsEE_SN, AUTOMATIC, OS_APPL_DATA) p_prev          = NULL;
  P2VAR(OsEE_SN, AUTOMATIC, OS_APPL_DATA) p_curr          = (*pp_first);
    1a02:	dc 01       	movw	r26, r24
    1a04:	ed 91       	ld	r30, X+
    1a06:	fc 91       	ld	r31, X
  CONSTP2VAR(OsEE_TCB, AUTOMATIC, OS_APPL_DATA) p_tcb_new = p_tdb_new->p_tcb;
  CONST(TaskPrio, AUTOMATIC)                new_task_prio =
    ((hnd_act) && osEE_is_active_task(p_tcb_new))?
      p_tdb_new->ready_prio:
      p_tcb_new->current_prio;
  P2VAR(OsEE_SN, AUTOMATIC, OS_APPL_DATA) p_prev          = NULL;
    1a08:	a0 e0       	ldi	r26, 0x00	; 0
    1a0a:	b0 e0       	ldi	r27, 0x00	; 0
  P2VAR(OsEE_SN, AUTOMATIC, OS_APPL_DATA) p_curr          = (*pp_first);
  VAR(OsEE_bool, AUTOMATIC)               head_changed    = OSEE_FALSE;

  /* Traverse the queue until needed */
  while (p_curr != NULL) {
    1a0c:	30 97       	sbiw	r30, 0x00	; 0
    1a0e:	d9 f0       	breq	.+54     	; 0x1a46 <osEE_sn_priority_insert+0x7a>
    VAR(TaskPrio, AUTOMATIC)                      prio_to_check;
    CONSTP2VAR(OsEE_TDB, AUTOMATIC, OS_APPL_DATA) p_cur_tdb = p_curr->p_tdb;
    1a10:	02 81       	ldd	r16, Z+2	; 0x02
    1a12:	13 81       	ldd	r17, Z+3	; 0x03
    CONSTP2VAR(OsEE_TCB, AUTOMATIC, OS_APPL_DATA) p_cur_tcb = p_cur_tdb->p_tcb;
    1a14:	e8 01       	movw	r28, r16
    1a16:	cc 80       	ldd	r12, Y+4	; 0x04
    1a18:	dd 80       	ldd	r13, Y+5	; 0x05

    if (hnd_act && osEE_is_active_task(p_cur_tcb)) {
    1a1a:	41 15       	cp	r20, r1
    1a1c:	51 05       	cpc	r21, r1
    1a1e:	51 f0       	breq	.+20     	; 0x1a34 <osEE_sn_priority_insert+0x68>
    1a20:	e6 01       	movw	r28, r12
    1a22:	ea 80       	ldd	r14, Y+2	; 0x02
    1a24:	fb 80       	ldd	r15, Y+3	; 0x03
    1a26:	d2 e0       	ldi	r29, 0x02	; 2
    1a28:	ed 16       	cp	r14, r29
    1a2a:	f1 04       	cpc	r15, r1
    1a2c:	18 f0       	brcs	.+6      	; 0x1a34 <osEE_sn_priority_insert+0x68>
      prio_to_check = p_cur_tdb->ready_prio;
    1a2e:	e8 01       	movw	r28, r16
    1a30:	3b 85       	ldd	r19, Y+11	; 0x0b
    1a32:	02 c0       	rjmp	.+4      	; 0x1a38 <osEE_sn_priority_insert+0x6c>
    } else {
      prio_to_check = p_cur_tcb->current_prio;
    1a34:	e6 01       	movw	r28, r12
    1a36:	39 81       	ldd	r19, Y+1	; 0x01
    }

    if (new_task_prio <= prio_to_check)
    1a38:	32 17       	cp	r19, r18
    1a3a:	28 f0       	brcs	.+10     	; 0x1a46 <osEE_sn_priority_insert+0x7a>
    {
      p_prev = p_curr;
      p_curr = p_curr->p_next;
    1a3c:	df 01       	movw	r26, r30
    1a3e:	01 90       	ld	r0, Z+
    1a40:	f0 81       	ld	r31, Z
    1a42:	e0 2d       	mov	r30, r0
    1a44:	e3 cf       	rjmp	.-58     	; 0x1a0c <osEE_sn_priority_insert+0x40>
    } else {
      break;
    }
  }

  if (p_prev != NULL) {
    1a46:	10 97       	sbiw	r26, 0x00	; 0
    1a48:	29 f0       	breq	.+10     	; 0x1a54 <osEE_sn_priority_insert+0x88>
    p_prev->p_next = p_sn_new;
    1a4a:	6d 93       	st	X+, r22
    1a4c:	7c 93       	st	X, r23
    ((hnd_act) && osEE_is_active_task(p_tcb_new))?
      p_tdb_new->ready_prio:
      p_tcb_new->current_prio;
  P2VAR(OsEE_SN, AUTOMATIC, OS_APPL_DATA) p_prev          = NULL;
  P2VAR(OsEE_SN, AUTOMATIC, OS_APPL_DATA) p_curr          = (*pp_first);
  VAR(OsEE_bool, AUTOMATIC)               head_changed    = OSEE_FALSE;
    1a4e:	80 e0       	ldi	r24, 0x00	; 0
    1a50:	90 e0       	ldi	r25, 0x00	; 0
    1a52:	05 c0       	rjmp	.+10     	; 0x1a5e <osEE_sn_priority_insert+0x92>
  }

  if (p_prev != NULL) {
    p_prev->p_next = p_sn_new;
  } else {
    (*pp_first)   = p_sn_new;
    1a54:	dc 01       	movw	r26, r24
    1a56:	6d 93       	st	X+, r22
    1a58:	7c 93       	st	X, r23
    head_changed  = OSEE_TRUE;
    1a5a:	81 e0       	ldi	r24, 0x01	; 1
    1a5c:	90 e0       	ldi	r25, 0x00	; 0
  }

  p_sn_new->p_next = p_curr;
    1a5e:	eb 01       	movw	r28, r22
    1a60:	f9 83       	std	Y+1, r31	; 0x01
    1a62:	e8 83       	st	Y, r30

  return head_changed;
}
    1a64:	df 91       	pop	r29
    1a66:	cf 91       	pop	r28
    1a68:	1f 91       	pop	r17
    1a6a:	0f 91       	pop	r16
    1a6c:	ff 90       	pop	r15
    1a6e:	ef 90       	pop	r14
    1a70:	df 90       	pop	r13
    1a72:	cf 90       	pop	r12
    1a74:	08 95       	ret

00001a76 <osEE_scheduler_rq_insert>:
  P2VAR(OsEE_RQ, AUTOMATIC, OS_APPL_DATA)       p_rq,
  P2VAR(OsEE_SN, AUTOMATIC, OS_APPL_DATA)       p_sn_new,
  CONSTP2VAR(OsEE_TDB, AUTOMATIC, OS_APPL_DATA) p_tdb_new
)
{
  p_sn_new->p_tdb = p_tdb_new;
    1a76:	fb 01       	movw	r30, r22
    1a78:	53 83       	std	Z+3, r21	; 0x03
    1a7a:	42 83       	std	Z+2, r20	; 0x02

#if (!defined(OSEE_SCHEDULER_GLOBAL))
  return osEE_sn_priority_insert(p_rq, p_sn_new, OSEE_TRUE);
    1a7c:	41 e0       	ldi	r20, 0x01	; 1
    1a7e:	50 e0       	ldi	r21, 0x00	; 0
    1a80:	0c 94 e6 0c 	jmp	0x19cc	; 0x19cc <osEE_sn_priority_insert>

00001a84 <osEE_scheduler_core_pop_running>:
  osEE_scheduler_core_pop_running
(
  P2VAR(OsEE_CDB, AUTOMATIC, OS_APPL_DATA)  p_cdb,
  P2VAR(OsEE_RQ,  AUTOMATIC, OS_APPL_DATA)  p_rq
)
{
    1a84:	ef 92       	push	r14
    1a86:	ff 92       	push	r15
    1a88:	0f 93       	push	r16
    1a8a:	1f 93       	push	r17
    1a8c:	cf 93       	push	r28
    1a8e:	df 93       	push	r29
    1a90:	8c 01       	movw	r16, r24
  CONSTP2VAR(OsEE_CCB, AUTOMATIC, OS_APPL_DATA) p_ccb         = p_cdb->p_ccb;
    1a92:	fc 01       	movw	r30, r24
    1a94:	c0 81       	ld	r28, Z
    1a96:	d1 81       	ldd	r29, Z+1	; 0x01
  CONSTP2VAR(OsEE_SN, AUTOMATIC, OS_APPL_DATA)  p_prev_stk_sn = p_ccb->p_stk_sn;
    1a98:	ee 80       	ldd	r14, Y+6	; 0x06
    1a9a:	ff 80       	ldd	r15, Y+7	; 0x07
  CONSTP2VAR(OsEE_SN, AUTOMATIC, OS_APPL_DATA)
    p_next_stk_sn = p_prev_stk_sn->p_next;

  /* Pop the current STK SN, if not IDLE TASK. This function MUST not be
   * called inside IDLE TASK. */
  p_ccb->p_stk_sn = p_next_stk_sn;
    1a9c:	f7 01       	movw	r30, r14
    1a9e:	80 81       	ld	r24, Z
    1aa0:	91 81       	ldd	r25, Z+1	; 0x01
    1aa2:	9f 83       	std	Y+7, r25	; 0x07
    1aa4:	8e 83       	std	Y+6, r24	; 0x06
   * */

  {
    /* Handle if RQ preempt STK (It manipulate the core data structures) */
    CONSTP2VAR(OsEE_preempt, AUTOMATIC, OS_APPL_DATA)
      p_preempt = osEE_scheduler_core_rq_preempt_stk(p_cdb, p_rq);
    1aa6:	c8 01       	movw	r24, r16
    1aa8:	0e 94 8f 0c 	call	0x191e	; 0x191e <osEE_scheduler_core_rq_preempt_stk>
    CONSTP2VAR(OsEE_SN, AUTOMATIC, OS_APPL_DATA)
      p_curr_stk_sn = p_ccb->p_stk_sn;
    1aac:	ee 81       	ldd	r30, Y+6	; 0x06
    1aae:	ff 81       	ldd	r31, Y+7	; 0x07

    /* If not, resume current STK first */
    if (p_preempt == NULL) {
    1ab0:	89 2b       	or	r24, r25
    1ab2:	51 f4       	brne	.+20     	; 0x1ac8 <osEE_scheduler_core_pop_running+0x44>
      if (p_ccb->p_curr->task_type <= OSEE_TASK_TYPE_EXTENDED) {
        osEE_call_post_task_hook(p_ccb);
      }
#endif /* OSEE_HAS_POSTTASKHOOK */

      if ( p_curr_stk_sn != NULL ) {
    1ab4:	30 97       	sbiw	r30, 0x00	; 0
    1ab6:	19 f0       	breq	.+6      	; 0x1abe <osEE_scheduler_core_pop_running+0x3a>
        /* Resume STK TASK */
        p_tdb_stk = p_curr_stk_sn->p_tdb;
    1ab8:	82 81       	ldd	r24, Z+2	; 0x02
    1aba:	93 81       	ldd	r25, Z+3	; 0x03
    1abc:	03 c0       	rjmp	.+6      	; 0x1ac4 <osEE_scheduler_core_pop_running+0x40>
      } else {
        /* Resume IDLE TASK */
        p_tdb_stk = p_cdb->p_idle_task;
    1abe:	f8 01       	movw	r30, r16
    1ac0:	84 81       	ldd	r24, Z+4	; 0x04
    1ac2:	95 81       	ldd	r25, Z+5	; 0x05
      }

      p_ccb->p_curr            = p_tdb_stk;
    1ac4:	99 83       	std	Y+1, r25	; 0x01
    1ac6:	88 83       	st	Y, r24
    }
#endif /* OSEE_ALLOW_TASK_MIGRATION */
  }

  return p_prev_stk_sn;
}
    1ac8:	c7 01       	movw	r24, r14
    1aca:	df 91       	pop	r29
    1acc:	cf 91       	pop	r28
    1ace:	1f 91       	pop	r17
    1ad0:	0f 91       	pop	r16
    1ad2:	ff 90       	pop	r15
    1ad4:	ef 90       	pop	r14
    1ad6:	08 95       	ret

00001ad8 <__fixsfsi>:
    1ad8:	0e 94 73 0d 	call	0x1ae6	; 0x1ae6 <__fixunssfsi>
    1adc:	68 94       	set
    1ade:	b1 11       	cpse	r27, r1
    1ae0:	0c 94 2a 0e 	jmp	0x1c54	; 0x1c54 <__fp_szero>
    1ae4:	08 95       	ret

00001ae6 <__fixunssfsi>:
    1ae6:	0e 94 0f 0e 	call	0x1c1e	; 0x1c1e <__fp_splitA>
    1aea:	88 f0       	brcs	.+34     	; 0x1b0e <__fixunssfsi+0x28>
    1aec:	9f 57       	subi	r25, 0x7F	; 127
    1aee:	98 f0       	brcs	.+38     	; 0x1b16 <__fixunssfsi+0x30>
    1af0:	b9 2f       	mov	r27, r25
    1af2:	99 27       	eor	r25, r25
    1af4:	b7 51       	subi	r27, 0x17	; 23
    1af6:	b0 f0       	brcs	.+44     	; 0x1b24 <__fixunssfsi+0x3e>
    1af8:	e1 f0       	breq	.+56     	; 0x1b32 <__fixunssfsi+0x4c>
    1afa:	66 0f       	add	r22, r22
    1afc:	77 1f       	adc	r23, r23
    1afe:	88 1f       	adc	r24, r24
    1b00:	99 1f       	adc	r25, r25
    1b02:	1a f0       	brmi	.+6      	; 0x1b0a <__fixunssfsi+0x24>
    1b04:	ba 95       	dec	r27
    1b06:	c9 f7       	brne	.-14     	; 0x1afa <__fixunssfsi+0x14>
    1b08:	14 c0       	rjmp	.+40     	; 0x1b32 <__fixunssfsi+0x4c>
    1b0a:	b1 30       	cpi	r27, 0x01	; 1
    1b0c:	91 f0       	breq	.+36     	; 0x1b32 <__fixunssfsi+0x4c>
    1b0e:	0e 94 29 0e 	call	0x1c52	; 0x1c52 <__fp_zero>
    1b12:	b1 e0       	ldi	r27, 0x01	; 1
    1b14:	08 95       	ret
    1b16:	0c 94 29 0e 	jmp	0x1c52	; 0x1c52 <__fp_zero>
    1b1a:	67 2f       	mov	r22, r23
    1b1c:	78 2f       	mov	r23, r24
    1b1e:	88 27       	eor	r24, r24
    1b20:	b8 5f       	subi	r27, 0xF8	; 248
    1b22:	39 f0       	breq	.+14     	; 0x1b32 <__fixunssfsi+0x4c>
    1b24:	b9 3f       	cpi	r27, 0xF9	; 249
    1b26:	cc f3       	brlt	.-14     	; 0x1b1a <__fixunssfsi+0x34>
    1b28:	86 95       	lsr	r24
    1b2a:	77 95       	ror	r23
    1b2c:	67 95       	ror	r22
    1b2e:	b3 95       	inc	r27
    1b30:	d9 f7       	brne	.-10     	; 0x1b28 <__fixunssfsi+0x42>
    1b32:	3e f4       	brtc	.+14     	; 0x1b42 <__fixunssfsi+0x5c>
    1b34:	90 95       	com	r25
    1b36:	80 95       	com	r24
    1b38:	70 95       	com	r23
    1b3a:	61 95       	neg	r22
    1b3c:	7f 4f       	sbci	r23, 0xFF	; 255
    1b3e:	8f 4f       	sbci	r24, 0xFF	; 255
    1b40:	9f 4f       	sbci	r25, 0xFF	; 255
    1b42:	08 95       	ret

00001b44 <__floatunsisf>:
    1b44:	e8 94       	clt
    1b46:	09 c0       	rjmp	.+18     	; 0x1b5a <__floatsisf+0x12>

00001b48 <__floatsisf>:
    1b48:	97 fb       	bst	r25, 7
    1b4a:	3e f4       	brtc	.+14     	; 0x1b5a <__floatsisf+0x12>
    1b4c:	90 95       	com	r25
    1b4e:	80 95       	com	r24
    1b50:	70 95       	com	r23
    1b52:	61 95       	neg	r22
    1b54:	7f 4f       	sbci	r23, 0xFF	; 255
    1b56:	8f 4f       	sbci	r24, 0xFF	; 255
    1b58:	9f 4f       	sbci	r25, 0xFF	; 255
    1b5a:	99 23       	and	r25, r25
    1b5c:	a9 f0       	breq	.+42     	; 0x1b88 <__floatsisf+0x40>
    1b5e:	f9 2f       	mov	r31, r25
    1b60:	96 e9       	ldi	r25, 0x96	; 150
    1b62:	bb 27       	eor	r27, r27
    1b64:	93 95       	inc	r25
    1b66:	f6 95       	lsr	r31
    1b68:	87 95       	ror	r24
    1b6a:	77 95       	ror	r23
    1b6c:	67 95       	ror	r22
    1b6e:	b7 95       	ror	r27
    1b70:	f1 11       	cpse	r31, r1
    1b72:	f8 cf       	rjmp	.-16     	; 0x1b64 <__floatsisf+0x1c>
    1b74:	fa f4       	brpl	.+62     	; 0x1bb4 <__floatsisf+0x6c>
    1b76:	bb 0f       	add	r27, r27
    1b78:	11 f4       	brne	.+4      	; 0x1b7e <__floatsisf+0x36>
    1b7a:	60 ff       	sbrs	r22, 0
    1b7c:	1b c0       	rjmp	.+54     	; 0x1bb4 <__floatsisf+0x6c>
    1b7e:	6f 5f       	subi	r22, 0xFF	; 255
    1b80:	7f 4f       	sbci	r23, 0xFF	; 255
    1b82:	8f 4f       	sbci	r24, 0xFF	; 255
    1b84:	9f 4f       	sbci	r25, 0xFF	; 255
    1b86:	16 c0       	rjmp	.+44     	; 0x1bb4 <__floatsisf+0x6c>
    1b88:	88 23       	and	r24, r24
    1b8a:	11 f0       	breq	.+4      	; 0x1b90 <__floatsisf+0x48>
    1b8c:	96 e9       	ldi	r25, 0x96	; 150
    1b8e:	11 c0       	rjmp	.+34     	; 0x1bb2 <__floatsisf+0x6a>
    1b90:	77 23       	and	r23, r23
    1b92:	21 f0       	breq	.+8      	; 0x1b9c <__floatsisf+0x54>
    1b94:	9e e8       	ldi	r25, 0x8E	; 142
    1b96:	87 2f       	mov	r24, r23
    1b98:	76 2f       	mov	r23, r22
    1b9a:	05 c0       	rjmp	.+10     	; 0x1ba6 <__floatsisf+0x5e>
    1b9c:	66 23       	and	r22, r22
    1b9e:	71 f0       	breq	.+28     	; 0x1bbc <__floatsisf+0x74>
    1ba0:	96 e8       	ldi	r25, 0x86	; 134
    1ba2:	86 2f       	mov	r24, r22
    1ba4:	70 e0       	ldi	r23, 0x00	; 0
    1ba6:	60 e0       	ldi	r22, 0x00	; 0
    1ba8:	2a f0       	brmi	.+10     	; 0x1bb4 <__floatsisf+0x6c>
    1baa:	9a 95       	dec	r25
    1bac:	66 0f       	add	r22, r22
    1bae:	77 1f       	adc	r23, r23
    1bb0:	88 1f       	adc	r24, r24
    1bb2:	da f7       	brpl	.-10     	; 0x1baa <__floatsisf+0x62>
    1bb4:	88 0f       	add	r24, r24
    1bb6:	96 95       	lsr	r25
    1bb8:	87 95       	ror	r24
    1bba:	97 f9       	bld	r25, 7
    1bbc:	08 95       	ret

00001bbe <__fp_inf>:
    1bbe:	97 f9       	bld	r25, 7
    1bc0:	9f 67       	ori	r25, 0x7F	; 127
    1bc2:	80 e8       	ldi	r24, 0x80	; 128
    1bc4:	70 e0       	ldi	r23, 0x00	; 0
    1bc6:	60 e0       	ldi	r22, 0x00	; 0
    1bc8:	08 95       	ret

00001bca <__fp_nan>:
    1bca:	9f ef       	ldi	r25, 0xFF	; 255
    1bcc:	80 ec       	ldi	r24, 0xC0	; 192
    1bce:	08 95       	ret

00001bd0 <__fp_pscA>:
    1bd0:	00 24       	eor	r0, r0
    1bd2:	0a 94       	dec	r0
    1bd4:	16 16       	cp	r1, r22
    1bd6:	17 06       	cpc	r1, r23
    1bd8:	18 06       	cpc	r1, r24
    1bda:	09 06       	cpc	r0, r25
    1bdc:	08 95       	ret

00001bde <__fp_pscB>:
    1bde:	00 24       	eor	r0, r0
    1be0:	0a 94       	dec	r0
    1be2:	12 16       	cp	r1, r18
    1be4:	13 06       	cpc	r1, r19
    1be6:	14 06       	cpc	r1, r20
    1be8:	05 06       	cpc	r0, r21
    1bea:	08 95       	ret

00001bec <__fp_round>:
    1bec:	09 2e       	mov	r0, r25
    1bee:	03 94       	inc	r0
    1bf0:	00 0c       	add	r0, r0
    1bf2:	11 f4       	brne	.+4      	; 0x1bf8 <__fp_round+0xc>
    1bf4:	88 23       	and	r24, r24
    1bf6:	52 f0       	brmi	.+20     	; 0x1c0c <__fp_round+0x20>
    1bf8:	bb 0f       	add	r27, r27
    1bfa:	40 f4       	brcc	.+16     	; 0x1c0c <__fp_round+0x20>
    1bfc:	bf 2b       	or	r27, r31
    1bfe:	11 f4       	brne	.+4      	; 0x1c04 <__fp_round+0x18>
    1c00:	60 ff       	sbrs	r22, 0
    1c02:	04 c0       	rjmp	.+8      	; 0x1c0c <__fp_round+0x20>
    1c04:	6f 5f       	subi	r22, 0xFF	; 255
    1c06:	7f 4f       	sbci	r23, 0xFF	; 255
    1c08:	8f 4f       	sbci	r24, 0xFF	; 255
    1c0a:	9f 4f       	sbci	r25, 0xFF	; 255
    1c0c:	08 95       	ret

00001c0e <__fp_split3>:
    1c0e:	57 fd       	sbrc	r21, 7
    1c10:	90 58       	subi	r25, 0x80	; 128
    1c12:	44 0f       	add	r20, r20
    1c14:	55 1f       	adc	r21, r21
    1c16:	59 f0       	breq	.+22     	; 0x1c2e <__fp_splitA+0x10>
    1c18:	5f 3f       	cpi	r21, 0xFF	; 255
    1c1a:	71 f0       	breq	.+28     	; 0x1c38 <__fp_splitA+0x1a>
    1c1c:	47 95       	ror	r20

00001c1e <__fp_splitA>:
    1c1e:	88 0f       	add	r24, r24
    1c20:	97 fb       	bst	r25, 7
    1c22:	99 1f       	adc	r25, r25
    1c24:	61 f0       	breq	.+24     	; 0x1c3e <__fp_splitA+0x20>
    1c26:	9f 3f       	cpi	r25, 0xFF	; 255
    1c28:	79 f0       	breq	.+30     	; 0x1c48 <__fp_splitA+0x2a>
    1c2a:	87 95       	ror	r24
    1c2c:	08 95       	ret
    1c2e:	12 16       	cp	r1, r18
    1c30:	13 06       	cpc	r1, r19
    1c32:	14 06       	cpc	r1, r20
    1c34:	55 1f       	adc	r21, r21
    1c36:	f2 cf       	rjmp	.-28     	; 0x1c1c <__fp_split3+0xe>
    1c38:	46 95       	lsr	r20
    1c3a:	f1 df       	rcall	.-30     	; 0x1c1e <__fp_splitA>
    1c3c:	08 c0       	rjmp	.+16     	; 0x1c4e <__fp_splitA+0x30>
    1c3e:	16 16       	cp	r1, r22
    1c40:	17 06       	cpc	r1, r23
    1c42:	18 06       	cpc	r1, r24
    1c44:	99 1f       	adc	r25, r25
    1c46:	f1 cf       	rjmp	.-30     	; 0x1c2a <__fp_splitA+0xc>
    1c48:	86 95       	lsr	r24
    1c4a:	71 05       	cpc	r23, r1
    1c4c:	61 05       	cpc	r22, r1
    1c4e:	08 94       	sec
    1c50:	08 95       	ret

00001c52 <__fp_zero>:
    1c52:	e8 94       	clt

00001c54 <__fp_szero>:
    1c54:	bb 27       	eor	r27, r27
    1c56:	66 27       	eor	r22, r22
    1c58:	77 27       	eor	r23, r23
    1c5a:	cb 01       	movw	r24, r22
    1c5c:	97 f9       	bld	r25, 7
    1c5e:	08 95       	ret

00001c60 <__mulsf3>:
    1c60:	0e 94 43 0e 	call	0x1c86	; 0x1c86 <__mulsf3x>
    1c64:	0c 94 f6 0d 	jmp	0x1bec	; 0x1bec <__fp_round>
    1c68:	0e 94 e8 0d 	call	0x1bd0	; 0x1bd0 <__fp_pscA>
    1c6c:	38 f0       	brcs	.+14     	; 0x1c7c <__mulsf3+0x1c>
    1c6e:	0e 94 ef 0d 	call	0x1bde	; 0x1bde <__fp_pscB>
    1c72:	20 f0       	brcs	.+8      	; 0x1c7c <__mulsf3+0x1c>
    1c74:	95 23       	and	r25, r21
    1c76:	11 f0       	breq	.+4      	; 0x1c7c <__mulsf3+0x1c>
    1c78:	0c 94 df 0d 	jmp	0x1bbe	; 0x1bbe <__fp_inf>
    1c7c:	0c 94 e5 0d 	jmp	0x1bca	; 0x1bca <__fp_nan>
    1c80:	11 24       	eor	r1, r1
    1c82:	0c 94 2a 0e 	jmp	0x1c54	; 0x1c54 <__fp_szero>

00001c86 <__mulsf3x>:
    1c86:	0e 94 07 0e 	call	0x1c0e	; 0x1c0e <__fp_split3>
    1c8a:	70 f3       	brcs	.-36     	; 0x1c68 <__mulsf3+0x8>

00001c8c <__mulsf3_pse>:
    1c8c:	95 9f       	mul	r25, r21
    1c8e:	c1 f3       	breq	.-16     	; 0x1c80 <__mulsf3+0x20>
    1c90:	95 0f       	add	r25, r21
    1c92:	50 e0       	ldi	r21, 0x00	; 0
    1c94:	55 1f       	adc	r21, r21
    1c96:	62 9f       	mul	r22, r18
    1c98:	f0 01       	movw	r30, r0
    1c9a:	72 9f       	mul	r23, r18
    1c9c:	bb 27       	eor	r27, r27
    1c9e:	f0 0d       	add	r31, r0
    1ca0:	b1 1d       	adc	r27, r1
    1ca2:	63 9f       	mul	r22, r19
    1ca4:	aa 27       	eor	r26, r26
    1ca6:	f0 0d       	add	r31, r0
    1ca8:	b1 1d       	adc	r27, r1
    1caa:	aa 1f       	adc	r26, r26
    1cac:	64 9f       	mul	r22, r20
    1cae:	66 27       	eor	r22, r22
    1cb0:	b0 0d       	add	r27, r0
    1cb2:	a1 1d       	adc	r26, r1
    1cb4:	66 1f       	adc	r22, r22
    1cb6:	82 9f       	mul	r24, r18
    1cb8:	22 27       	eor	r18, r18
    1cba:	b0 0d       	add	r27, r0
    1cbc:	a1 1d       	adc	r26, r1
    1cbe:	62 1f       	adc	r22, r18
    1cc0:	73 9f       	mul	r23, r19
    1cc2:	b0 0d       	add	r27, r0
    1cc4:	a1 1d       	adc	r26, r1
    1cc6:	62 1f       	adc	r22, r18
    1cc8:	83 9f       	mul	r24, r19
    1cca:	a0 0d       	add	r26, r0
    1ccc:	61 1d       	adc	r22, r1
    1cce:	22 1f       	adc	r18, r18
    1cd0:	74 9f       	mul	r23, r20
    1cd2:	33 27       	eor	r19, r19
    1cd4:	a0 0d       	add	r26, r0
    1cd6:	61 1d       	adc	r22, r1
    1cd8:	23 1f       	adc	r18, r19
    1cda:	84 9f       	mul	r24, r20
    1cdc:	60 0d       	add	r22, r0
    1cde:	21 1d       	adc	r18, r1
    1ce0:	82 2f       	mov	r24, r18
    1ce2:	76 2f       	mov	r23, r22
    1ce4:	6a 2f       	mov	r22, r26
    1ce6:	11 24       	eor	r1, r1
    1ce8:	9f 57       	subi	r25, 0x7F	; 127
    1cea:	50 40       	sbci	r21, 0x00	; 0
    1cec:	9a f0       	brmi	.+38     	; 0x1d14 <__mulsf3_pse+0x88>
    1cee:	f1 f0       	breq	.+60     	; 0x1d2c <__mulsf3_pse+0xa0>
    1cf0:	88 23       	and	r24, r24
    1cf2:	4a f0       	brmi	.+18     	; 0x1d06 <__mulsf3_pse+0x7a>
    1cf4:	ee 0f       	add	r30, r30
    1cf6:	ff 1f       	adc	r31, r31
    1cf8:	bb 1f       	adc	r27, r27
    1cfa:	66 1f       	adc	r22, r22
    1cfc:	77 1f       	adc	r23, r23
    1cfe:	88 1f       	adc	r24, r24
    1d00:	91 50       	subi	r25, 0x01	; 1
    1d02:	50 40       	sbci	r21, 0x00	; 0
    1d04:	a9 f7       	brne	.-22     	; 0x1cf0 <__mulsf3_pse+0x64>
    1d06:	9e 3f       	cpi	r25, 0xFE	; 254
    1d08:	51 05       	cpc	r21, r1
    1d0a:	80 f0       	brcs	.+32     	; 0x1d2c <__mulsf3_pse+0xa0>
    1d0c:	0c 94 df 0d 	jmp	0x1bbe	; 0x1bbe <__fp_inf>
    1d10:	0c 94 2a 0e 	jmp	0x1c54	; 0x1c54 <__fp_szero>
    1d14:	5f 3f       	cpi	r21, 0xFF	; 255
    1d16:	e4 f3       	brlt	.-8      	; 0x1d10 <__mulsf3_pse+0x84>
    1d18:	98 3e       	cpi	r25, 0xE8	; 232
    1d1a:	d4 f3       	brlt	.-12     	; 0x1d10 <__mulsf3_pse+0x84>
    1d1c:	86 95       	lsr	r24
    1d1e:	77 95       	ror	r23
    1d20:	67 95       	ror	r22
    1d22:	b7 95       	ror	r27
    1d24:	f7 95       	ror	r31
    1d26:	e7 95       	ror	r30
    1d28:	9f 5f       	subi	r25, 0xFF	; 255
    1d2a:	c1 f7       	brne	.-16     	; 0x1d1c <__mulsf3_pse+0x90>
    1d2c:	fe 2b       	or	r31, r30
    1d2e:	88 0f       	add	r24, r24
    1d30:	91 1d       	adc	r25, r1
    1d32:	96 95       	lsr	r25
    1d34:	87 95       	ror	r24
    1d36:	97 f9       	bld	r25, 7
    1d38:	08 95       	ret

00001d3a <__udivmodsi4>:
    1d3a:	a1 e2       	ldi	r26, 0x21	; 33
    1d3c:	1a 2e       	mov	r1, r26
    1d3e:	aa 1b       	sub	r26, r26
    1d40:	bb 1b       	sub	r27, r27
    1d42:	fd 01       	movw	r30, r26
    1d44:	0d c0       	rjmp	.+26     	; 0x1d60 <__udivmodsi4_ep>

00001d46 <__udivmodsi4_loop>:
    1d46:	aa 1f       	adc	r26, r26
    1d48:	bb 1f       	adc	r27, r27
    1d4a:	ee 1f       	adc	r30, r30
    1d4c:	ff 1f       	adc	r31, r31
    1d4e:	a2 17       	cp	r26, r18
    1d50:	b3 07       	cpc	r27, r19
    1d52:	e4 07       	cpc	r30, r20
    1d54:	f5 07       	cpc	r31, r21
    1d56:	20 f0       	brcs	.+8      	; 0x1d60 <__udivmodsi4_ep>
    1d58:	a2 1b       	sub	r26, r18
    1d5a:	b3 0b       	sbc	r27, r19
    1d5c:	e4 0b       	sbc	r30, r20
    1d5e:	f5 0b       	sbc	r31, r21

00001d60 <__udivmodsi4_ep>:
    1d60:	66 1f       	adc	r22, r22
    1d62:	77 1f       	adc	r23, r23
    1d64:	88 1f       	adc	r24, r24
    1d66:	99 1f       	adc	r25, r25
    1d68:	1a 94       	dec	r1
    1d6a:	69 f7       	brne	.-38     	; 0x1d46 <__udivmodsi4_loop>
    1d6c:	60 95       	com	r22
    1d6e:	70 95       	com	r23
    1d70:	80 95       	com	r24
    1d72:	90 95       	com	r25
    1d74:	9b 01       	movw	r18, r22
    1d76:	ac 01       	movw	r20, r24
    1d78:	bd 01       	movw	r22, r26
    1d7a:	cf 01       	movw	r24, r30
    1d7c:	08 95       	ret

00001d7e <__tablejump2__>:
    1d7e:	ee 0f       	add	r30, r30
    1d80:	ff 1f       	adc	r31, r31
    1d82:	05 90       	lpm	r0, Z+
    1d84:	f4 91       	lpm	r31, Z
    1d86:	e0 2d       	mov	r30, r0
    1d88:	09 94       	ijmp

00001d8a <_exit>:
    1d8a:	f8 94       	cli

00001d8c <__stop_program>:
    1d8c:	ff cf       	rjmp	.-2      	; 0x1d8c <__stop_program>
